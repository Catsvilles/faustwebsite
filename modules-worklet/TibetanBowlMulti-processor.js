
/*
Code generated with Faust version 2.11.8
Compilation options: wasm-ib, -scal -ftz 2
*/

function getJSONTibetanBowlMulti() {
	return "{\"name\":\"Tibetan Bowl\",\"filename\":\"TibetanBowlMulti\",\"version\":\"2.11.8\",\"compile_options\":\"-scal -ftz 2\",\"library_list\":[\"/usr/local/share/faust/stdfaust.lib\",\"/usr/local/share/faust/delays.lib\",\"/usr/local/share/faust/maths.lib\",\"/usr/local/share/faust/instruments.lib\",\"/usr/local/share/faust/filters.lib\",\"/usr/local/share/faust/signals.lib\",\"/usr/local/share/faust/oscillators.lib\",\"/usr/local/share/faust/basics.lib\",\"/usr/local/share/faust/reverbs.lib\",\"/usr/local/share/faust/routes.lib\"],\"include_pathnames\":[\".\",\"/usr/local/share/faust\",\"/usr/share/faust\"],\"size\":\"1149404\",\"inputs\":\"0\",\"outputs\":\"2\",\"meta\":[{\"author\":\"Romain Michon\"},{\"basics.lib/name\":\"Faust Basic Element Library\"},{\"basics.lib/version\":\"0.0\"},{\"copyright\":\"Romain Michon (rmichon@ccrma.stanford.edu)\"},{\"delays.lib/name\":\"Faust Delay Library\"},{\"delays.lib/version\":\"0.0\"},{\"description\":\"Banded Waveguide Modeld Tibetan Bowl\"},{\"filename\":\"TibetanBowlMulti\"},{\"filters.lib/name\":\"Faust Filters Library\"},{\"filters.lib/version\":\"0.0\"},{\"instruments.lib/author\":\"Romain Michon (rmichon@ccrma.stanford.edu)\"},{\"instruments.lib/copyright\":\"Romain Michon\"},{\"instruments.lib/licence\":\"STK-4.3\"},{\"instruments.lib/name\":\"Faust-STK Tools Library\"},{\"instruments.lib/version\":\"1.0\"},{\"licence\":\"STK-4.3\"},{\"maths.lib/author\":\"GRAME\"},{\"maths.lib/copyright\":\"GRAME\"},{\"maths.lib/license\":\"LGPL with exception\"},{\"maths.lib/name\":\"Faust Math Library\"},{\"maths.lib/version\":\"2.1\"},{\"name\":\"Tibetan Bowl\"},{\"oscillators.lib/name\":\"Faust Oscillator Library\"},{\"oscillators.lib/version\":\"0.0\"},{\"reverbs.lib/name\":\"Faust Reverb Library\"},{\"reverbs.lib/version\":\"0.0\"},{\"routes.lib/name\":\"Faust Signal Routing Library\"},{\"routes.lib/version\":\"0.0\"},{\"signals.lib/name\":\"Faust Signal Routing Library\"},{\"signals.lib/version\":\"0.0\"},{\"version\":\"1.0\"}],\"ui\":[{\"type\":\"vgroup\",\"label\":\"Tibetan Bowl\",\"items\":[{\"type\":\"hslider\",\"label\":\"Play\",\"address\":\"/Tibetan_Bowl/Play\",\"index\":\"393312\",\"meta\":[{\"0\":\"\"},{\"acc\":\"2 1 -10 0 10\"},{\"tooltip\":\"0=Bow; 1=Strike\"}],\"init\":\"0\",\"min\":\"0\",\"max\":\"1\",\"step\":\"1\"},{\"type\":\"hslider\",\"label\":\"Frequency\",\"address\":\"/Tibetan_Bowl/Frequency\",\"index\":\"393576\",\"meta\":[{\"1\":\"\"},{\"acc\":\"0 1 -10 0 10\"},{\"unit\":\"Hz\"}],\"init\":\"440\",\"min\":\"180\",\"max\":\"780\",\"step\":\"1\"},{\"type\":\"hslider\",\"label\":\"Modulation\",\"address\":\"/Tibetan_Bowl/Modulation\",\"index\":\"417696\",\"meta\":[{\"2\":\"\"},{\"acc\":\"2 0 -10 0 15\"},{\"tooltip\":\"Nonlinearity factor (value between 0 and 1)\"}],\"init\":\"0.02\",\"min\":\"0\",\"max\":\"0.1\",\"step\":\"0.001\"},{\"type\":\"hslider\",\"label\":\"Modulation Frequency\",\"address\":\"/Tibetan_Bowl/Modulation_Frequency\",\"index\":\"417712\",\"meta\":[{\"3\":\"\"},{\"acc\":\"2 0 -10 0 15\"},{\"unit\":\"Hz\"}],\"init\":\"220\",\"min\":\"150\",\"max\":\"500\",\"step\":\"0.1\"},{\"type\":\"vgroup\",\"label\":\"Reverb\",\"meta\":[{\"4\":\"\"}],\"items\":[{\"type\":\"hslider\",\"label\":\"Reverberation Volume (InstrReverb)\",\"address\":\"/Tibetan_Bowl/Reverb/Reverberation_Volume_(InstrReverb)\",\"index\":\"393288\",\"meta\":[{\"1\":\"\"},{\"acc\":\"1 1 -10 0 10\"}],\"init\":\"0.2\",\"min\":\"0.02\",\"max\":\"1\",\"step\":\"0.01\"},{\"type\":\"hslider\",\"label\":\"Reverberation Room Size (InstrReverb)\",\"address\":\"/Tibetan_Bowl/Reverb/Reverberation_Room_Size_(InstrReverb)\",\"index\":\"262168\",\"meta\":[{\"2\":\"\"},{\"acc\":\"1 1 -10 0 10\"}],\"init\":\"0.2\",\"min\":\"0.02\",\"max\":\"1.3\",\"step\":\"0.01\"}]}]}]}";
}
function getBase64CodeTibetanBowlMulti() { return "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YWxzLmxpYiIsIi91c3IvbG9jYWwvc2hhcmUvZmF1c3Qvb3NjaWxsYXRvcnMubGliIiwiL3Vzci9sb2NhbC9zaGFyZS9mYXVzdC9iYXNpY3MubGliIiwiL3Vzci9sb2NhbC9zaGFyZS9mYXVzdC9yZXZlcmJzLmxpYiIsIi91c3IvbG9jYWwvc2hhcmUvZmF1c3Qvcm91dGVzLmxpYiJdLCJpbmNsdWRlX3BhdGhuYW1lcyI6WyIuIiwiL3Vzci9sb2NhbC9zaGFyZS9mYXVzdCIsIi91c3Ivc2hhcmUvZmF1c3QiXSwic2l6ZSI6IjExNDk0MDQiLCJpbnB1dHMiOiIwIiwib3V0cHV0cyI6IjIiLCJtZXRhIjpbeyJhdXRob3IiOiJSb21haW4gTWljaG9uIn0seyJiYXNpY3MubGliL25hbWUiOiJGYXVzdCBCYXNpYyBFbGVtZW50IExpYnJhcnkifSx7ImJhc2ljcy5saWIvdmVyc2lvbiI6IjAuMCJ9LHsiY29weXJpZ2h0IjoiUm9tYWluIE1pY2hvbiAocm1pY2hvbkBjY3JtYS5zdGFuZm9yZC5lZHUpIn0seyJkZWxheXMubGliL25hbWUiOiJGYXVzdCBEZWxheSBMaWJyYXJ5In0seyJkZWxheXMubGliL3ZlcnNpb24iOiIwLjAifSx7ImRlc2NyaXB0aW9uIjoiQmFuZGVkIFdhdmVndWlkZSBNb2RlbGQgVGliZXRhbiBCb3dsIn0seyJmaWxlbmFtZSI6IlRpYmV0YW5Cb3dsTXVsdGkifSx7ImZpbHRlcnMubGliL25hbWUiOiJGYXVzdCBGaWx0ZXJzIExpYnJhcnkifSx7ImZpbHRlcnMubGliL3ZlcnNpb24iOiIwLjAifSx7Imluc3RydW1lbnRzLmxpYi9hdXRob3IiOiJSb21haW4gTWljaG9uIChybWljaG9uQGNjcm1hLnN0YW5mb3JkLmVkdSkifSx7Imluc3RydW1lbnRzLmxpYi9jb3B5cmlnaHQiOiJSb21haW4gTWljaG9uIn0seyJpbnN0cnVtZW50cy5saWIvbGljZW5jZSI6IlNUSy00LjMifSx7Imluc3RydW1lbnRzLmxpYi9uYW1lIjoiRmF1c3QtU1RLIFRvb2xzIExpYnJhcnkifSx7Imluc3RydW1lbnRzLmxpYi92ZXJzaW9uIjoiMS4wIn0seyJsaWNlbmNlIjoiU1RLLTQuMyJ9LHsibWF0aHMubGliL2F1dGhvciI6IkdSQU1FIn0seyJtYXRocy5saWIvY29weXJpZ2h0IjoiR1JBTUUifSx7Im1hdGhzLmxpYi9saWNlbnNlIjoiTEdQTCB3aXRoIGV4Y2VwdGlvbiJ9LHsibWF0aHMubGliL25hbWUiOiJGYXVzdCBNYXRoIExpYnJhcnkifSx7Im1hdGhzLmxpYi92ZXJzaW9uIjoiMi4xIn0seyJuYW1lIjoiVGliZXRhbiBCb3dsIn0seyJvc2NpbGxhdG9ycy5saWIvbmFtZSI6IkZhdXN0IE9zY2lsbGF0b3IgTGlicmFyeSJ9LHsib3NjaWxsYXRvcnMubGliL3ZlcnNpb24iOiIwLjAifSx7InJldmVyYnMubGliL25hbWUiOiJGYXVzdCBSZXZlcmIgTGlicmFyeSJ9LHsicmV2ZXJicy5saWIvdmVyc2lvbiI6IjAuMCJ9LHsicm91dGVzLmxpYi9uYW1lIjoiRmF1c3QgU2lnbmFsIFJvdXRpbmcgTGlicmFyeSJ9LHsicm91dGVzLmxpYi92ZXJzaW9uIjoiMC4wIn0seyJzaWduYWxzLmxpYi9uYW1lIjoiRmF1c3QgU2lnbmFsIFJvdXRpbmcgTGlicmFyeSJ9LHsic2lnbmFscy5saWIvdmVyc2lvbiI6IjAuMCJ9LHsidmVyc2lvbiI6IjEuMCJ9XSwidWkiOlt7InR5cGUiOiJ2Z3JvdXAiLCJsYWJlbCI6IlRpYmV0YW4gQm93bCIsIml0ZW1zIjpbeyJ0eXBlIjoiaHNsaWRlciIsImxhYmVsIjoiUGxheSIsImFkZHJlc3MiOiIvVGliZXRhbl9Cb3dsL1BsYXkiLCJpbmRleCI6IjM5MzMxMiIsIm1ldGEiOlt7IjAiOiIifSx7ImFjYyI6IjIgMSAtMTAgMCAxMCJ9LHsidG9vbHRpcCI6IjA9Qm93OyAxPVN0cmlrZSJ9XSwiaW5pdCI6IjAiLCJtaW4iOiIwIiwibWF4IjoiMSIsInN0ZXAiOiIxIn0seyJ0eXBlIjoiaHNsaWRlciIsImxhYmVsIjoiRnJlcXVlbmN5IiwiYWRkcmVzcyI6Ii9UaWJldGFuX0Jvd2wvRnJlcXVlbmN5IiwiaW5kZXgiOiIzOTM1NzYiLCJtZXRhIjpbeyIxIjoiIn0seyJhY2MiOiIwIDEgLTEwIDAgMTAifSx7InVuaXQiOiJIeiJ9XSwiaW5pdCI6IjQ0MCIsIm1pbiI6IjE4MCIsIm1heCI6Ijc4MCIsInN0ZXAiOiIxIn0seyJ0eXBlIjoiaHNsaWRlciIsImxhYmVsIjoiTW9kdWxhdGlvbiIsImFkZHJlc3MiOiIvVGliZXRhbl9Cb3dsL01vZHVsYXRpb24iLCJpbmRleCI6IjQxNzY5NiIsIm1ldGEiOlt7IjIiOiIifSx7ImFjYyI6IjIgMCAtMTAgMCAxNSJ9LHsidG9vbHRpcCI6Ik5vbmxpbmVhcml0eSBmYWN0b3IgKHZhbHVlIGJldHdlZW4gMCBhbmQgMSkifV0sImluaXQiOiIwLjAyIiwibWluIjoiMCIsIm1heCI6IjAuMSIsInN0ZXAiOiIwLjAwMSJ9LHsidHlwZSI6ImhzbGlkZXIiLCJsYWJlbCI6Ik1vZHVsYXRpb24gRnJlcXVlbmN5IiwiYWRkcmVzcyI6Ii9UaWJldGFuX0Jvd2wvTW9kdWxhdGlvbl9GcmVxdWVuY3kiLCJpbmRleCI6IjQxNzcxMiIsIm1ldGEiOlt7IjMiOiIifSx7ImFjYyI6IjIgMCAtMTAgMCAxNSJ9LHsidW5pdCI6Ikh6In1dLCJpbml0IjoiMjIwIiwibWluIjoiMTUwIiwibWF4IjoiNTAwIiwic3RlcCI6IjAuMSJ9LHsidHlwZSI6InZncm91cCIsImxhYmVsIjoiUmV2ZXJiIiwibWV0YSI6W3siNCI6IiJ9XSwiaXRlbXMiOlt7InR5cGUiOiJoc2xpZGVyIiwibGFiZWwiOiJSZXZlcmJlcmF0aW9uIFZvbHVtZSAoSW5zdHJSZXZlcmIpIiwiYWRkcmVzcyI6Ii9UaWJldGFuX0Jvd2wvUmV2ZXJiL1JldmVyYmVyYXRpb25fVm9sdW1lXyhJbnN0clJldmVyYikiLCJpbmRleCI6IjM5MzI4OCIsIm1ldGEiOlt7IjEiOiIifSx7ImFjYyI6IjEgMSAtMTAgMCAxMCJ9XSwiaW5pdCI6IjAuMiIsIm1pbiI6IjAuMDIiLCJtYXgiOiIxIiwic3RlcCI6IjAuMDEifSx7InR5cGUiOiJoc2xpZGVyIiwibGFiZWwiOiJSZXZlcmJlcmF0aW9uIFJvb20gU2l6ZSAoSW5zdHJSZXZlcmIpIiwiYWRkcmVzcyI6Ii9UaWJldGFuX0Jvd2wvUmV2ZXJiL1JldmVyYmVyYXRpb25fUm9vbV9TaXplXyhJbnN0clJldmVyYikiLCJpbmRleCI6IjI2MjE2OCIsIm1ldGEiOlt7IjIiOiIifSx7ImFjYyI6IjEgMSAtMTAgMCAxMCJ9XSwiaW5pdCI6IjAuMiIsIm1pbiI6IjAuMDIiLCJtYXgiOiIxLjMiLCJzdGVwIjoiMC4wMSJ9XX1dfV19"; }

/*
 faust2wasm: GRAME 2017-2018
*/
 
'use strict';

// Monophonic Faust DSP
class TibetanBowlMultiProcessor extends AudioWorkletProcessor {
    
    // JSON parsing functions
    static parse_ui(ui, obj, callback)
    {
        for (var i = 0; i < ui.length; i++) {
            TibetanBowlMultiProcessor.parse_group(ui[i], obj, callback);
        }
    }
    
    static parse_group(group, obj, callback)
    {
        if (group.items) {
            TibetanBowlMultiProcessor.parse_items(group.items, obj, callback);
        }
    }
    
    static parse_items(items, obj, callback)
    {
        for (var i = 0; i < items.length; i++) {
            callback(items[i], obj, callback);
        }
    }
    
    static parse_item1(item, obj, callback)
    {
        if (item.type === "vgroup"
            || item.type === "hgroup"
            || item.type === "tgroup") {
            TibetanBowlMultiProcessor.parse_items(item.items, obj, callback);
        } else if (item.type === "hbargraph"
                   || item.type === "vbargraph") {
            // Nothing
        } else if (item.type === "vslider"
                   || item.type === "hslider"
                   || item.type === "button"
                   || item.type === "checkbox"
                   || item.type === "nentry") {
            obj.push({ name: item.address,
                     defaultValue: item.init,
                     minValue: item.min,
                     maxValue: item.max });
        }
    }
    
    static parse_item2(item, obj, callback)
    {
        if (item.type === "vgroup"
            || item.type === "hgroup"
            || item.type === "tgroup") {
            TibetanBowlMultiProcessor.parse_items(item.items, obj, callback);
        } else if (item.type === "hbargraph"
                   || item.type === "vbargraph") {
            // Keep bargraph adresses
            obj.outputs_items.push(item.address);
            obj.pathTable[item.address] = parseInt(item.index);
        } else if (item.type === "soundfile") {
            // Keep soundfile adresses
            obj.soundfile_items.push(item.address);
            obj.pathTable[item.address] = parseInt(item.index);
        } else if (item.type === "vslider"
                   || item.type === "hslider"
                   || item.type === "button"
                   || item.type === "checkbox"
                   || item.type === "nentry") {
            // Keep inputs adresses
            obj.inputs_items.push(item.address);
            obj.pathTable[item.address] = parseInt(item.index);
        }
    }
    
    static b64ToUint6(nChr)
    {
        return nChr > 64 && nChr < 91 ?
        nChr - 65
        : nChr > 96 && nChr < 123 ?
        nChr - 71
        : nChr > 47 && nChr < 58 ?
        nChr + 4
        : nChr === 43 ?
        62
        : nChr === 47 ?
        63
        :
        0;
    }
    
    static atob(sBase64, nBlocksSize)
    {
        if (typeof atob === 'function') {
            return atob(sBase64);
        } else {
            
            var sB64Enc = sBase64.replace(/[^A-Za-z0-9\+\/]/g, "");
            var nInLen = sB64Enc.length;
            var nOutLen = nBlocksSize ? Math.ceil((nInLen * 3 + 1 >> 2) / nBlocksSize) * nBlocksSize : nInLen * 3 + 1 >> 2;
            var taBytes = new Uint8Array(nOutLen);
            
            for (var nMod3, nMod4, nUint24 = 0, nOutIdx = 0, nInIdx = 0; nInIdx < nInLen; nInIdx++) {
                nMod4 = nInIdx & 3;
                nUint24 |= TibetanBowlMultiProcessor.b64ToUint6(sB64Enc.charCodeAt(nInIdx)) << 18 - 6 * nMod4;
                if (nMod4 === 3 || nInLen - nInIdx === 1) {
                    for (nMod3 = 0; nMod3 < 3 && nOutIdx < nOutLen; nMod3++, nOutIdx++) {
                        taBytes[nOutIdx] = nUint24 >>> (16 >>> nMod3 & 24) & 255;
                    }
                    nUint24 = 0;
                }
            }
            return taBytes.buffer;
        }
    }
   
    static get parameterDescriptors () 
    {
        // Analyse JSON to generate AudioParam parameters
        var params = [];
        TibetanBowlMultiProcessor.parse_ui(JSON.parse(getJSONTibetanBowlMulti()).ui, params, TibetanBowlMultiProcessor.parse_item1);
        return params;
    }
    
    constructor(options)
    {
        super(options);
      
        this.json_object = JSON.parse(getJSONTibetanBowlMulti());

        this.output_handler = function(path, value) { this.port.postMessage({ path: path, value: value }); };
        
        this.ins = null;
        this.outs = null;

        this.dspInChannnels = [];
        this.dspOutChannnels = [];

        this.numIn = parseInt(this.json_object.inputs);
        this.numOut = parseInt(this.json_object.outputs);

        // Memory allocator
        this.ptr_size = 4;
        this.sample_size = 4;
        this.integer_size = 4;
        
        this.TibetanBowlMulti_instance = new WebAssembly.Instance(TibetanBowlMultiProcessor.wasm_module, TibetanBowlMultiProcessor.importObject);
  	   	this.factory = this.TibetanBowlMulti_instance.exports;
        this.HEAP = this.TibetanBowlMulti_instance.exports.memory.buffer;
        this.HEAP32 = new Int32Array(this.HEAP);
        this.HEAPF32 = new Float32Array(this.HEAP);

        //console.log(this.HEAP);
        //console.log(this.HEAP32);
        //console.log(this.HEAPF32);

        // bargraph
        this.outputs_timer = 5;
        this.outputs_items = [];

        // input items
        this.inputs_items = [];
        
        // soundfile items
        this.soundfile_items = [];

        // Start of HEAP index

        // DSP is placed first with index 0. Audio buffer start at the end of DSP.
        this.audio_heap_ptr = parseInt(this.json_object.size);

        // Setup pointers offset
        this.audio_heap_ptr_inputs = this.audio_heap_ptr;
        this.audio_heap_ptr_outputs = this.audio_heap_ptr_inputs + (this.numIn * this.ptr_size);

        // Setup buffer offset
        this.audio_heap_inputs = this.audio_heap_ptr_outputs + (this.numOut * this.ptr_size);
        this.audio_heap_outputs = this.audio_heap_inputs + (this.numIn * TibetanBowlMultiProcessor.buffer_size * this.sample_size);
        
        // Start of DSP memory : DSP is placed first with index 0
        this.dsp = 0;

        this.pathTable = [];
     
        // Send output values to the AudioNode
        this.update_outputs = function ()
        {
            if (this.outputs_items.length > 0 && this.output_handler && this.outputs_timer-- === 0) {
                this.outputs_timer = 5;
                for (var i = 0; i < this.outputs_items.length; i++) {
                    this.output_handler(this.outputs_items[i], this.HEAPF32[this.pathTable[this.outputs_items[i]] >> 2]);
                }
            }
        }
        
        this.loadFile = function (sound_index, sound_ptr, length, sample_rate, channels, buffers)
        {
            /*
             Soundfile layout:
            
                FAUSTFLOAT** fBuffers;
                int fLength;
                int fSampleRate;
                int fChannels;
             
                ===========
                Soundfile struct
                fBuffers[channels]
                fBuffers0
                fBuffers1
                ...
                Soundfile struct
                fBuffers[channels]
                fBuffers0
                fBuffers1
                ...
                ===========
            */
            
            var size_of_soundfile = this.ptr_size + (this.integer_size * 3);  // fBuffers, fLength, fSampleRate, fChannels
            
            //console.log("sound_ptr " + sound_ptr);
            //console.log("size_of_soundfile " + size_of_soundfile);
            
            // end of sounfile
            var end_of_soundfile_ptr = sound_ptr + size_of_soundfile;
            
            this.HEAP32[sound_ptr >> 2] = end_of_soundfile_ptr;
            this.HEAP32[(sound_ptr + 4) >> 2] = length;      // fLength
            this.HEAP32[(sound_ptr + 8) >> 2] = sample_rate; // fSampleRate
            this.HEAP32[(sound_ptr + 12) >> 2] = channels;   // fChannels
            
            //console.log("end_of_soundfile_ptr " + end_of_soundfile_ptr);
            
            // Setup soundfile pointers
            var start_of_soundfile_data_ptr = end_of_soundfile_ptr + this.ptr_size * channels;
            
            for (var i = 0; i < channels; i++) {
                this.HEAP32[(end_of_soundfile_ptr + (i * this.ptr_size)) >> 2] = start_of_soundfile_data_ptr + (i * length * this.sample_size);
            }
            
            // Setup soundfile buffer
            for (var i = 0; i < channels; i++) {
                
                // start of sound buffer
                var start_of_buffer_ptr = start_of_soundfile_data_ptr + (i * length * this.sample_size);
                
                // generate a 440 Hz signal
                for (var j = 0; j < length; j++) {
                    this.HEAPF32[(start_of_buffer_ptr + (j * this.sample_size)) >> 2] = 0.8 * Math.sin((j/length)*2*Math.PI);
                }
            }
            
            // Setup fSoundfile fields in the DSP structure
            //console.log("sound_index " + sound_index);
            //console.log("this.pathTable[this.soundfile_items[sound_index]] " + this.pathTable[this.soundfile_items[sound_index]]);
            
            this.HEAP32[this.pathTable[this.soundfile_items[sound_index]] >> 2] = sound_ptr;
            
            /*
            console.log("start_of_soundfile_data_ptr " + start_of_soundfile_data_ptr);
            console.log("length " + length);
            console.log("channels " + channels);
            console.log("this.sample_size " + this.sample_size);
            console.log("END " + (start_of_soundfile_data_ptr + (channels * length * this.sample_size)));
            */
            
            // End of buffer data;
            return start_of_soundfile_data_ptr + (channels * length * this.sample_size);
        }
        
        this.initAux = function ()
        {
            var i;
            
            if (this.numIn > 0) {
                this.ins = this.audio_heap_ptr_inputs;
                for (i = 0; i < this.numIn; i++) {
                    this.HEAP32[(this.ins >> 2) + i] = this.audio_heap_inputs + ((TibetanBowlMultiProcessor.buffer_size * this.sample_size) * i);
                }
                
                // Prepare Ins buffer tables
                var dspInChans = this.HEAP32.subarray(this.ins >> 2, (this.ins + this.numIn * this.ptr_size) >> 2);
                for (i = 0; i < this.numIn; i++) {
                    this.dspInChannnels[i] = this.HEAPF32.subarray(dspInChans[i] >> 2, (dspInChans[i] + TibetanBowlMultiProcessor.buffer_size * this.sample_size) >> 2);
                }
            }
            
            if (this.numOut > 0) {
                this.outs = this.audio_heap_ptr_outputs;
                for (i = 0; i < this.numOut; i++) {
                    this.HEAP32[(this.outs >> 2) + i] = this.audio_heap_outputs + ((TibetanBowlMultiProcessor.buffer_size * this.sample_size) * i);
                }
                
                // Prepare Out buffer tables
                var dspOutChans = this.HEAP32.subarray(this.outs >> 2, (this.outs + this.numOut * this.ptr_size) >> 2);
                for (i = 0; i < this.numOut; i++) {
                    this.dspOutChannnels[i] = this.HEAPF32.subarray(dspOutChans[i] >> 2, (dspOutChans[i] + TibetanBowlMultiProcessor.buffer_size * this.sample_size) >> 2);
                }
            }
            
            // Parse UI
            TibetanBowlMultiProcessor.parse_ui(this.json_object.ui, this, TibetanBowlMultiProcessor.parse_item2);
            
            /*
            console.log("soundfile_items.length " + this.soundfile_items.length);
            
            // Setup soundfile offset (after audio data)
            this.soundfile_ptr = this.audio_heap_outputs + (this.numOut * TibetanBowlMultiProcessor.buffer_size * this.sample_size);
            
            var sound_ptr1 = this.soundfile_ptr;
            var sound_ptr2 = this.loadFile(0, sound_ptr1, 44100/700, 44100, 2, null);
            var sound_ptr3 = this.loadFile(1, sound_ptr2, 44100/500, 44100, 2, null);
            */
             
            // Init DSP
            this.factory.init(this.dsp, sampleRate); // 'sampleRate' is defined in AudioWorkletGlobalScope  
        }

        this.setParamValue = function (path, val)
        {
            this.HEAPF32[this.pathTable[path]] = val;
        }

        this.getParamValue = function (path)
        {
            return this.HEAPF32[this.pathTable[path]];
        }

        // Init resulting DSP
        this.initAux();
    }
    
    process(inputs, outputs, parameters) 
    {
        var input = inputs[0];
        var output = outputs[0];
        
        // Check inputs
        if (this.numIn > 0 && ((input === undefined) || (input[0].length === 0))) {
            //console.log("Process input error");
            return true;
        }
        // Check outputs
        if (this.numOut > 0 && ((output === undefined) || (output[0].length === 0))) {
            //console.log("Process output error");
            return true;
        }
        
        // Copy inputs
        if (input !== undefined) {
            for (var chan = 0; chan < Math.min(this.numIn, input.length) ; ++chan) {
                var dspInput = this.dspInChannnels[chan];
                dspInput.set(input[chan]);
            }
        }
        
        // Update controls (possibly needed for sample accurate control)
        var params = Object.entries(parameters);
        for (var i = 0; i < params.length; i++) {
            this.HEAPF32[this.pathTable[params[i][0]] >> 2] = params[i][1][0];
        }
        
        // Compute
        this.factory.compute(this.dsp, TibetanBowlMultiProcessor.buffer_size, this.ins, this.outs);
        
        // Update bargraph
        this.update_outputs();
        
        // Copy outputs
        if (output !== undefined) {
            for (var chan = 0; chan < Math.min(this.numOut, output.length); ++chan) {
                var dspOutput = this.dspOutChannnels[chan];
                output[chan].set(dspOutput);
            }
        }
        
        return true;
    }
}

// Globals

TibetanBowlMultiProcessor.buffer_size = 128;

TibetanBowlMultiProcessor.importObject = {
    env: {
        memoryBase: 0,
        tableBase: 0,
            
        // Integer version
        _abs: Math.abs,
        
        // Float version
        _acosf: Math.acos,
        _asinf: Math.asin,
        _atanf: Math.atan,
        _atan2f: Math.atan2,
        _ceilf: Math.ceil,
        _cosf: Math.cos,
        _expf: Math.exp,
        _floorf: Math.floor,
        _fmodf: function(x, y) { return x % y; },
        _logf: Math.log,
        _log10f: Math.log10,
        _max_f: Math.max,
        _min_f: Math.min,
        _remainderf: function(x, y) { return x - Math.round(x/y) * y; },
        _powf: Math.pow,
        _roundf: Math.fround,
        _sinf: Math.sin,
        _sqrtf: Math.sqrt,
        _tanf: Math.tan,
           
        // Double version
        _acos: Math.acos,
        _asin: Math.asin,
        _atan: Math.atan,
        _atan2: Math.atan2,
        _ceil: Math.ceil,
        _cos: Math.cos,
        _exp: Math.exp,
        _floor: Math.floor,
        _fmod: function(x, y) { return x % y; },
        _log: Math.log,
        _log10: Math.log10,
        _max_: Math.max,
        _min_: Math.min,
        _remainder:function(x, y) { return x - Math.round(x/y) * y; },
        _pow: Math.pow,
        _round: Math.fround,
        _sin: Math.sin,
        _sqrt: Math.sqrt,
        _tan: Math.tan,
        
        table: new WebAssembly.Table({ initial: 0, element: 'anyfunc' })
    }
};

// Synchronously compile and instantiate the WASM module
try {
    if (TibetanBowlMultiProcessor.wasm_module == undefined) {
        TibetanBowlMultiProcessor.wasm_module = new WebAssembly.Module(TibetanBowlMultiProcessor.atob(getBase64CodeTibetanBowlMulti()));
        registerProcessor('TibetanBowlMulti', TibetanBowlMultiProcessor);
    }
} catch (e) {
    console.log(e); console.log("Faust TibetanBowlMulti cannot be loaded or compiled");
}

