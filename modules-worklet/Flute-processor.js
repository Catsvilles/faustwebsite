
/*
Code generated with Faust version 2.5.19
Compilation options: wasm-ib, -scal -ftz 2
*/

function getJSONFlute() {
	return "{\"name\":\"Flute\",\"version\":\"2.5.19\",\"options\":\"wasm-ib, -scal -ftz 2\",\"size\":\"910164\",\"inputs\":\"0\",\"outputs\":\"2\",\"meta\":[{\"author\":\"Romain Michon (rmichon@ccrma.stanford.edu)\"},{\"basics.lib/name\":\"Faust Basic Element Library\"},{\"basics.lib/version\":\"0.0\"},{\"copyright\":\"Romain Michon\"},{\"delays.lib/name\":\"Faust Delay Library\"},{\"delays.lib/version\":\"0.0\"},{\"description\":\"Nonlinear WaveGuide Flute\"},{\"envelopes.lib/author\":\"GRAME\"},{\"envelopes.lib/copyright\":\"GRAME\"},{\"envelopes.lib/license\":\"LGPL with exception\"},{\"envelopes.lib/name\":\"Faust Envelope Library\"},{\"envelopes.lib/version\":\"0.0\"},{\"filters.lib/name\":\"Faust Filters Library\"},{\"filters.lib/version\":\"0.0\"},{\"instruments.lib/author\":\"Romain Michon (rmichon@ccrma.stanford.edu)\"},{\"instruments.lib/copyright\":\"Romain Michon\"},{\"instruments.lib/licence\":\"STK-4.3\"},{\"instruments.lib/name\":\"Faust-STK Tools Library\"},{\"instruments.lib/version\":\"1.0\"},{\"licence\":\"STK-4.3\"},{\"maths.lib/author\":\"GRAME\"},{\"maths.lib/copyright\":\"GRAME\"},{\"maths.lib/license\":\"LGPL with exception\"},{\"maths.lib/name\":\"Faust Math Library\"},{\"maths.lib/version\":\"2.1\"},{\"name\":\"Flute\"},{\"noises.lib/name\":\"Faust Noise Generator Library\"},{\"noises.lib/version\":\"0.0\"},{\"oscillators.lib/name\":\"Faust Oscillator Library\"},{\"oscillators.lib/version\":\"0.0\"},{\"reverbs.lib/name\":\"Faust Reverb Library\"},{\"reverbs.lib/version\":\"0.0\"},{\"routes.lib/name\":\"Faust Signal Routing Library\"},{\"routes.lib/version\":\"0.0\"},{\"signals.lib/name\":\"Faust Signal Routing Library\"},{\"signals.lib/version\":\"0.0\"},{\"version\":\"1.0\"}],\"ui\":[{\"type\":\"vgroup\",\"label\":\"Flute\",\"items\":[{\"type\":\"hslider\",\"label\":\"ON/OFF (ASR Envelope)\",\"address\":\"/Flute/ON/OFF_(ASR_Envelope)\",\"index\":\"131156\",\"meta\":[{\"0\":\"\"}],\"init\":\"0\",\"min\":\"0\",\"max\":\"1\",\"step\":\"1\"},{\"type\":\"hslider\",\"label\":\"Frequency\",\"address\":\"/Flute/Frequency\",\"index\":\"131212\",\"meta\":[{\"1\":\"\"},{\"acc\":\"1 1 -10 0 10\"}],\"init\":\"440\",\"min\":\"247\",\"max\":\"1200\",\"step\":\"1\"},{\"type\":\"hslider\",\"label\":\"Pressure\",\"address\":\"/Flute/Pressure\",\"index\":\"131244\",\"meta\":[{\"2\":\"\"},{\"acc\":\"1 0 -10 0 10\"},{\"style\":\"knob\"}],\"init\":\"0.96\",\"min\":\"0.2\",\"max\":\"0.99\",\"step\":\"0.01\"},{\"type\":\"hslider\",\"label\":\"Breath Noise\",\"address\":\"/Flute/Breath_Noise\",\"index\":\"131232\",\"meta\":[{\"3\":\"\"},{\"acc\":\"2 0 -10 0 10\"},{\"style\":\"knob\"}],\"init\":\"0.02\",\"min\":\"0.01\",\"max\":\"0.2\",\"step\":\"0.01\"},{\"type\":\"hslider\",\"label\":\"Vibrato Freq (Vibrato Envelope)\",\"address\":\"/Flute/Vibrato_Freq_(Vibrato_Envelope)\",\"index\":\"131296\",\"meta\":[{\"4\":\"\"},{\"acc\":\"0 1 -10 0 10\"},{\"style\":\"knob\"},{\"unit\":\"Hz\"}],\"init\":\"4\",\"min\":\"0.5\",\"max\":\"8\",\"step\":\"0.1\"},{\"type\":\"hgroup\",\"label\":\"Reverb\",\"meta\":[{\"5\":\"\"}],\"items\":[{\"type\":\"hslider\",\"label\":\"Reverberation Volume (InstrReverb)\",\"address\":\"/Flute/Reverb/Reverberation_Volume_(InstrReverb)\",\"index\":\"196972\",\"meta\":[{\"1\":\"\"},{\"acc\":\"1 1 -30 0 13\"},{\"style\":\"knob\"}],\"init\":\"0.2\",\"min\":\"0.05\",\"max\":\"1\",\"step\":\"0.01\"},{\"type\":\"hslider\",\"label\":\"Reverberation Room Size (InstrReverb)\",\"address\":\"/Flute/Reverb/Reverberation_Room_Size_(InstrReverb)\",\"index\":\"32\",\"meta\":[{\"2\":\"\"},{\"acc\":\"1 1 -30 0 13\"},{\"style\":\"knob\"}],\"init\":\"0.72\",\"min\":\"0.05\",\"max\":\"1.7\",\"step\":\"0.01\"}]}]}]}";
}
function getBase64CodeFlute() { return "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dGlvbiI6Ik5vbmxpbmVhciBXYXZlR3VpZGUgRmx1dGUifSx7ImVudmVsb3Blcy5saWIvYXV0aG9yIjoiR1JBTUUifSx7ImVudmVsb3Blcy5saWIvY29weXJpZ2h0IjoiR1JBTUUifSx7ImVudmVsb3Blcy5saWIvbGljZW5zZSI6IkxHUEwgd2l0aCBleGNlcHRpb24ifSx7ImVudmVsb3Blcy5saWIvbmFtZSI6IkZhdXN0IEVudmVsb3BlIExpYnJhcnkifSx7ImVudmVsb3Blcy5saWIvdmVyc2lvbiI6IjAuMCJ9LHsiZmlsdGVycy5saWIvbmFtZSI6IkZhdXN0IEZpbHRlcnMgTGlicmFyeSJ9LHsiZmlsdGVycy5saWIvdmVyc2lvbiI6IjAuMCJ9LHsiaW5zdHJ1bWVudHMubGliL2F1dGhvciI6IlJvbWFpbiBNaWNob24gKHJtaWNob25AY2NybWEuc3RhbmZvcmQuZWR1KSJ9LHsiaW5zdHJ1bWVudHMubGliL2NvcHlyaWdodCI6IlJvbWFpbiBNaWNob24ifSx7Imluc3RydW1lbnRzLmxpYi9saWNlbmNlIjoiU1RLLTQuMyJ9LHsiaW5zdHJ1bWVudHMubGliL25hbWUiOiJGYXVzdC1TVEsgVG9vbHMgTGlicmFyeSJ9LHsiaW5zdHJ1bWVudHMubGliL3ZlcnNpb24iOiIxLjAifSx7ImxpY2VuY2UiOiJTVEstNC4zIn0seyJtYXRocy5saWIvYXV0aG9yIjoiR1JBTUUifSx7Im1hdGhzLmxpYi9jb3B5cmlnaHQiOiJHUkFNRSJ9LHsibWF0aHMubGliL2xpY2Vuc2UiOiJMR1BMIHdpdGggZXhjZXB0aW9uIn0seyJtYXRocy5saWIvbmFtZSI6IkZhdXN0IE1hdGggTGlicmFyeSJ9LHsibWF0aHMubGliL3ZlcnNpb24iOiIyLjEifSx7Im5hbWUiOiJGbHV0ZSJ9LHsibm9pc2VzLmxpYi9uYW1lIjoiRmF1c3QgTm9pc2UgR2VuZXJhdG9yIExpYnJhcnkifSx7Im5vaXNlcy5saWIvdmVyc2lvbiI6IjAuMCJ9LHsib3NjaWxsYXRvcnMubGliL25hbWUiOiJGYXVzdCBPc2NpbGxhdG9yIExpYnJhcnkifSx7Im9zY2lsbGF0b3JzLmxpYi92ZXJzaW9uIjoiMC4wIn0seyJyZXZlcmJzLmxpYi9uYW1lIjoiRmF1c3QgUmV2ZXJiIExpYnJhcnkifSx7InJldmVyYnMubGliL3ZlcnNpb24iOiIwLjAifSx7InJvdXRlcy5saWIvbmFtZSI6IkZhdXN0IFNpZ25hbCBSb3V0aW5nIExpYnJhcnkifSx7InJvdXRlcy5saWIvdmVyc2lvbiI6IjAuMCJ9LHsic2lnbmFscy5saWIvbmFtZSI6IkZhdXN0IFNpZ25hbCBSb3V0aW5nIExpYnJhcnkifSx7InNpZ25hbHMubGliL3ZlcnNpb24iOiIwLjAifSx7InZlcnNpb24iOiIxLjAifV0sInVpIjpbeyJ0eXBlIjoidmdyb3VwIiwibGFiZWwiOiJGbHV0ZSIsIml0ZW1zIjpbeyJ0eXBlIjoiaHNsaWRlciIsImxhYmVsIjoiT04vT0ZGIChBU1IgRW52ZWxvcGUpIiwiYWRkcmVzcyI6Ii9GbHV0ZS9PTi9PRkZfKEFTUl9FbnZlbG9wZSkiLCJpbmRleCI6IjEzMTE1NiIsIm1ldGEiOlt7IjAiOiIifV0sImluaXQiOiIwIiwibWluIjoiMCIsIm1heCI6IjEiLCJzdGVwIjoiMSJ9LHsidHlwZSI6ImhzbGlkZXIiLCJsYWJlbCI6IkZyZXF1ZW5jeSIsImFkZHJlc3MiOiIvRmx1dGUvRnJlcXVlbmN5IiwiaW5kZXgiOiIxMzEyMTIiLCJtZXRhIjpbeyIxIjoiIn0seyJhY2MiOiIxIDEgLTEwIDAgMTAifV0sImluaXQiOiI0NDAiLCJtaW4iOiIyNDciLCJtYXgiOiIxMjAwIiwic3RlcCI6IjEifSx7InR5cGUiOiJoc2xpZGVyIiwibGFiZWwiOiJQcmVzc3VyZSIsImFkZHJlc3MiOiIvRmx1dGUvUHJlc3N1cmUiLCJpbmRleCI6IjEzMTI0NCIsIm1ldGEiOlt7IjIiOiIifSx7ImFjYyI6IjEgMCAtMTAgMCAxMCJ9LHsic3R5bGUiOiJrbm9iIn1dLCJpbml0IjoiMC45NiIsIm1pbiI6IjAuMiIsIm1heCI6IjAuOTkiLCJzdGVwIjoiMC4wMSJ9LHsidHlwZSI6ImhzbGlkZXIiLCJsYWJlbCI6IkJyZWF0aCBOb2lzZSIsImFkZHJlc3MiOiIvRmx1dGUvQnJlYXRoX05vaXNlIiwiaW5kZXgiOiIxMzEyMzIiLCJtZXRhIjpbeyIzIjoiIn0seyJhY2MiOiIyIDAgLTEwIDAgMTAifSx7InN0eWxlIjoia25vYiJ9XSwiaW5pdCI6IjAuMDIiLCJtaW4iOiIwLjAxIiwibWF4IjoiMC4yIiwic3RlcCI6IjAuMDEifSx7InR5cGUiOiJoc2xpZGVyIiwibGFiZWwiOiJWaWJyYXRvIEZyZXEgKFZpYnJhdG8gRW52ZWxvcGUpIiwiYWRkcmVzcyI6Ii9GbHV0ZS9WaWJyYXRvX0ZyZXFfKFZpYnJhdG9fRW52ZWxvcGUpIiwiaW5kZXgiOiIxMzEyOTYiLCJtZXRhIjpbeyI0IjoiIn0seyJhY2MiOiIwIDEgLTEwIDAgMTAifSx7InN0eWxlIjoia25vYiJ9LHsidW5pdCI6Ikh6In1dLCJpbml0IjoiNCIsIm1pbiI6IjAuNSIsIm1heCI6IjgiLCJzdGVwIjoiMC4xIn0seyJ0eXBlIjoiaGdyb3VwIiwibGFiZWwiOiJSZXZlcmIiLCJtZXRhIjpbeyI1IjoiIn1dLCJpdGVtcyI6W3sidHlwZSI6ImhzbGlkZXIiLCJsYWJlbCI6IlJldmVyYmVyYXRpb24gVm9sdW1lIChJbnN0clJldmVyYikiLCJhZGRyZXNzIjoiL0ZsdXRlL1JldmVyYi9SZXZlcmJlcmF0aW9uX1ZvbHVtZV8oSW5zdHJSZXZlcmIpIiwiaW5kZXgiOiIxOTY5NzIiLCJtZXRhIjpbeyIxIjoiIn0seyJhY2MiOiIxIDEgLTMwIDAgMTMifSx7InN0eWxlIjoia25vYiJ9XSwiaW5pdCI6IjAuMiIsIm1pbiI6IjAuMDUiLCJtYXgiOiIxIiwic3RlcCI6IjAuMDEifSx7InR5cGUiOiJoc2xpZGVyIiwibGFiZWwiOiJSZXZlcmJlcmF0aW9uIFJvb20gU2l6ZSAoSW5zdHJSZXZlcmIpIiwiYWRkcmVzcyI6Ii9GbHV0ZS9SZXZlcmIvUmV2ZXJiZXJhdGlvbl9Sb29tX1NpemVfKEluc3RyUmV2ZXJiKSIsImluZGV4IjoiMzIiLCJtZXRhIjpbeyIyIjoiIn0seyJhY2MiOiIxIDEgLTMwIDAgMTMifSx7InN0eWxlIjoia25vYiJ9XSwiaW5pdCI6IjAuNzIiLCJtaW4iOiIwLjA1IiwibWF4IjoiMS43Iiwic3RlcCI6IjAuMDEifV19XX1dfTA="; }

/*
 faust2wasm
 Additional code: GRAME 2017
*/
 
'use strict';

// Monophonic Faust DSP
class FluteProcessor extends AudioWorkletProcessor {
    
    // JSON parsing functions
    static parse_ui(ui, obj, callback)
    {
        for (var i = 0; i < ui.length; i++) {
            FluteProcessor.parse_group(ui[i], obj, callback);
        }
    }
    
    static parse_group(group, obj, callback)
    {
        if (group.items) {
            FluteProcessor.parse_items(group.items, obj, callback);
        }
    }
    
    static parse_items(items, obj, callback)
    {
        for (var i = 0; i < items.length; i++) {
            callback(items[i], obj, callback);
        }
    }
    
    static parse_item1(item, obj, callback)
    {
        if (item.type === "vgroup"
            || item.type === "hgroup"
            || item.type === "tgroup") {
            FluteProcessor.parse_items(item.items, obj, callback);
        } else if (item.type === "hbargraph"
                   || item.type === "vbargraph") {
            // Nothing
        } else if (item.type === "vslider"
                   || item.type === "hslider"
                   || item.type === "button"
                   || item.type === "checkbox"
                   || item.type === "nentry") {
            obj.push({ name: item.address,
                     defaultValue: item.init,
                     minValue: item.min,
                     maxValue: item.max });
        }
    }
    
    static parse_item2(item, obj, callback)
    {
        if (item.type === "vgroup"
            || item.type === "hgroup"
            || item.type === "tgroup") {
            FluteProcessor.parse_items(item.items, obj, callback);
        } else if (item.type === "hbargraph"
                   || item.type === "vbargraph") {
            // Keep bargraph adresses
            obj.outputs_items.push(item.address);
            obj.pathTable[item.address] = parseInt(item.index);
        } else if (item.type === "vslider"
                   || item.type === "hslider"
                   || item.type === "button"
                   || item.type === "checkbox"
                   || item.type === "nentry") {
            // Keep inputs adresses
            obj.inputs_items.push(item.address);
            obj.pathTable[item.address] = parseInt(item.index);
            if (item.meta !== undefined) {
                for (var i = 0; i < item.meta.length; i++) {
                    if (item.meta[i].midi !== undefined) {
                        if (item.meta[i].midi.trim() === "pitchwheel") {
                            obj.fPitchwheelLabel.push(item.address);
                        } else if (item.meta[i].midi.trim().split(" ")[0] === "ctrl") {
                            obj.fCtrlLabel[parseInt(item.meta[i].midi.trim().split(" ")[1])]
                                .push({ path:item.address,
                                      min:parseFloat(item.min),
                                      max:parseFloat(item.max) });
                        }
                    }
                }
            }
        }
    }
    
    static b64ToUint6(nChr)
    {
        return nChr > 64 && nChr < 91 ?
        nChr - 65
        : nChr > 96 && nChr < 123 ?
        nChr - 71
        : nChr > 47 && nChr < 58 ?
        nChr + 4
        : nChr === 43 ?
        62
        : nChr === 47 ?
        63
        :
        0;
    }
    
    static atob(sBase64, nBlocksSize)
    {
        if (typeof atob === 'function') {
            return atob(sBase64);
        } else {
            
            var sB64Enc = sBase64.replace(/[^A-Za-z0-9\+\/]/g, "");
            var nInLen = sB64Enc.length;
            var nOutLen = nBlocksSize ? Math.ceil((nInLen * 3 + 1 >> 2) / nBlocksSize) * nBlocksSize : nInLen * 3 + 1 >> 2;
            var taBytes = new Uint8Array(nOutLen);
            
            for (var nMod3, nMod4, nUint24 = 0, nOutIdx = 0, nInIdx = 0; nInIdx < nInLen; nInIdx++) {
                nMod4 = nInIdx & 3;
                nUint24 |= FluteProcessor.b64ToUint6(sB64Enc.charCodeAt(nInIdx)) << 18 - 6 * nMod4;
                if (nMod4 === 3 || nInLen - nInIdx === 1) {
                    for (nMod3 = 0; nMod3 < 3 && nOutIdx < nOutLen; nMod3++, nOutIdx++) {
                        taBytes[nOutIdx] = nUint24 >>> (16 >>> nMod3 & 24) & 255;
                    }
                    nUint24 = 0;
                }
            }
            return taBytes.buffer;
        }
    }
    
    static remap(v, mn0, mx0, mn1, mx1)
    {
        return (1.0 * (v - mn0) / (mx0 - mn0)) * (mx1 - mn1) + mn1;
    }
   
    static get parameterDescriptors () 
    {
        // Analyse JSON to generate AudioParam parameters
        var params = [];
        FluteProcessor.parse_ui(JSON.parse(getJSONFlute()).ui, params, FluteProcessor.parse_item1);
        return params;
    }
    
    constructor(options)
    {
        super(options);
      
        this.json_object = JSON.parse(getJSONFlute());

        this.output_handler = function(path, value) { this.port.postMessage({ path: path, value: value }); };
        
        this.ins = null;
        this.outs = null;

        this.dspInChannnels = [];
        this.dspOutChannnels = [];

        this.fPitchwheelLabel = [];
        this.fCtrlLabel = new Array(128);
        for (var i = 0; i < this.fCtrlLabel.length; i++) { this.fCtrlLabel[i] = []; }

        this.numIn = parseInt(this.json_object.inputs);
        this.numOut = parseInt(this.json_object.outputs);

        // Memory allocator
        this.ptr_size = 4;
        this.sample_size = 4;
        
        this.factory = FluteProcessor.Flute_instance.exports;
        this.HEAP = FluteProcessor.Flute_instance.exports.memory.buffer;
        this.HEAP32 = new Int32Array(this.HEAP);
        this.HEAPF32 = new Float32Array(this.HEAP);

        console.log(this.HEAP);
        console.log(this.HEAP32);
        console.log(this.HEAPF32);

        // bargraph
        this.outputs_timer = 5;
        this.outputs_items = [];

        // input items
        this.inputs_items = [];

        // Start of HEAP index

        // DSP is placed first with index 0. Audio buffer start at the end of DSP.
        this.audio_heap_ptr = parseInt(this.json_object.size);

        // Setup pointers offset
        this.audio_heap_ptr_inputs = this.audio_heap_ptr;
        this.audio_heap_ptr_outputs = this.audio_heap_ptr_inputs + (this.numIn * this.ptr_size);

        // Setup buffer offset
        this.audio_heap_inputs = this.audio_heap_ptr_outputs + (this.numOut * this.ptr_size);
        this.audio_heap_outputs = this.audio_heap_inputs + (this.numIn * FluteProcessor.buffer_size * this.sample_size);

        // Start of DSP memory : DSP is placed first with index 0
        this.dsp = 0;

        this.pathTable = [];

        // Send output values to the AudioNode
        this.update_outputs = function ()
        {
            if (this.outputs_items.length > 0 && this.output_handler && this.outputs_timer-- === 0) {
                this.outputs_timer = 5;
                for (var i = 0; i < this.outputs_items.length; i++) {
                    this.output_handler(this.outputs_items[i], this.HEAPF32[this.pathTable[this.outputs_items[i]] >> 2]);
                }
            }
        }
        
        this.initAux = function ()
        {
            var i;
            
            if (this.numIn > 0) {
                this.ins = this.audio_heap_ptr_inputs;
                for (i = 0; i < this.numIn; i++) {
                    this.HEAP32[(this.ins >> 2) + i] = this.audio_heap_inputs + ((FluteProcessor.buffer_size * this.sample_size) * i);
                }
                
                // Prepare Ins buffer tables
                var dspInChans = this.HEAP32.subarray(this.ins >> 2, (this.ins + this.numIn * this.ptr_size) >> 2);
                for (i = 0; i < this.numIn; i++) {
                    this.dspInChannnels[i] = this.HEAPF32.subarray(dspInChans[i] >> 2, (dspInChans[i] + FluteProcessor.buffer_size * this.sample_size) >> 2);
                }
            }
            
            if (this.numOut > 0) {
                this.outs = this.audio_heap_ptr_outputs;
                for (i = 0; i < this.numOut; i++) {
                    this.HEAP32[(this.outs >> 2) + i] = this.audio_heap_outputs + ((FluteProcessor.buffer_size * this.sample_size) * i);
                }
                
                // Prepare Out buffer tables
                var dspOutChans = this.HEAP32.subarray(this.outs >> 2, (this.outs + this.numOut * this.ptr_size) >> 2);
                for (i = 0; i < this.numOut; i++) {
                    this.dspOutChannnels[i] = this.HEAPF32.subarray(dspOutChans[i] >> 2, (dspOutChans[i] + FluteProcessor.buffer_size * this.sample_size) >> 2);
                }
            }
            
            // Parse UI
            FluteProcessor.parse_ui(this.json_object.ui, this, FluteProcessor.parse_item2);
            
            // Init DSP
            this.factory.init(this.dsp, sampleRate); // 'sampleRate' is defined in AudioWorkletGlobalScope  
        }

        this.ctrlChange = function (channel, ctrl, value)
        {
            if (this.fCtrlLabel[ctrl] !== []) {
                for (var i = 0; i < this.fCtrlLabel[ctrl].length; i++) {
                    var path = this.fCtrlLabel[ctrl][i].path;
                    this.setParamValue(path, FluteProcessor.remap(value, 0, 127, this.fCtrlLabel[ctrl][i].min, this.fCtrlLabel[ctrl][i].max));
                    if (this.output_handler) {
                   		this.output_handler(path, this.getParamValue(path));
                   	}
                }
            }
        }

        this.pitchWheel = function (channel, wheel)
        {
            for (var i = 0; i < this.fPitchwheelLabel.length; i++) {
                var path = this.fPitchwheelLabel[i];
                this.setParamValue(path, Math.pow(2.0, wheel/12.0));
                if (this.output_handler) {
                   	this.output_handler(path, this.getParamValue(path));
                }
            }
        }

        this.setParamValue = function (path, val)
        {
            this.HEAPF32[this.pathTable[path]] = val;
        }

        this.getParamValue = function (path)
        {
            return this.HEAPF32[this.pathTable[path]];
        }

        // Init resulting DSP
        this.initAux();

        // Set message handler
        this.port.onmessage = this.handleMessage.bind(this);
    }
    
    handleMessage(event) 
    {
        var msg = event.data;
        switch (msg.type) {
            // Generic MIDI message
            case "midi": this.midiMessage(msg.data); break;
            // Typed MIDI message
            case "keyOn": this.keyOn(msg.data[0], msg.data[1], msg.data[2]); break;
            case "keyOff": this.keyOff(msg.data[0], msg.data[1], msg.data[2]); break;
            case "ctrlChange": this.ctrlChange(msg.data[0], msg.data[1], msg.data[2]); break;
            case "pitchWheel": this.pitchWheel(msg.data[0], msg.data[1]); break;
            // Generic data message
            case "param": this.setParamValue(msg.key, msg.value); break;
            //case "patch": this.onpatch(msg.data); break;
        }
    }
    
    midiMessage(data)
    {
        var cmd = data[0] >> 4;
        var channel = data[0] & 0xf;
        var data1 = data[1];
        var data2 = data[2];
        
        if (channel === 9) {
            return;
        } else if (cmd === 8 || ((cmd === 9) && (data2 === 0))) {
            //this.keyOff(channel, data1, data2);
        } else if (cmd === 9) {
            //this.keyOn(channel, data1, data2);
        } else if (cmd === 11) {
            //this.ctrlChange(channel, data1, data2);
        } else if (cmd === 14) {
            //this.pitchWheel(channel, ((data2 * 128.0 + data1)-8192)/8192.0);
        }
    }
    
    process(inputs, outputs, parameters) 
    {
        var input = inputs[0];
        var output = outputs[0];
        
        // Copy inputs
        if (input !== undefined) {
            for (var chan = 0; chan < Math.min(this.numIn, input.length) ; ++chan) {
                var dspInput = this.dspInChannnels[chan];
                dspInput.set(input[chan]);
            }
        }
        
        // Update controls (possibly needed for sample accurate control)
        var params = Object.entries(parameters);
        for (var i = 0; i < params.length; i++) {
            this.HEAPF32[this.pathTable[params[i][0]] >> 2] = params[i][1][0];
        }
        
        // Compute
        this.factory.compute(this.dsp, FluteProcessor.buffer_size, this.ins, this.outs);
        
        // Update bargraph
        this.update_outputs();
        
        // Copy outputs
        if (output !== undefined) {
            //console.log("output.length " + output.length);
            for (var chan = 0; chan < Math.min(this.numOut, output.length); ++chan) {
                var dspOutput = this.dspOutChannnels[chan];
                output[chan].set(dspOutput);
            }
        }
        
        return true;
    }
}

// Globals

FluteProcessor.buffer_size = 128;

FluteProcessor.importObject = {
    env: {
        memoryBase: 0,
        tableBase: 0,
            
        // Integer version
        _abs: Math.abs,
        
        // Float version
        _acosf: Math.acos,
        _asinf: Math.asin,
        _atanf: Math.atan,
        _atan2f: Math.atan2,
        _ceilf: Math.ceil,
        _cosf: Math.cos,
        _expf: Math.exp,
        _floorf: Math.floor,
        _fmodf: function(x, y) { return x % y; },
        _logf: Math.log,
        _log10f: Math.log10,
        _max_f: Math.max,
        _min_f: Math.min,
        _remainderf: function(x, y) { return x - Math.round(x/y) * y; },
        _powf: Math.pow,
        _roundf: Math.fround,
        _sinf: Math.sin,
        _sqrtf: Math.sqrt,
        _tanf: Math.tan,
           
        // Double version
        _acos: Math.acos,
        _asin: Math.asin,
        _atan: Math.atan,
        _atan2: Math.atan2,
        _ceil: Math.ceil,
        _cos: Math.cos,
        _exp: Math.exp,
        _floor: Math.floor,
        _fmod: function(x, y) { return x % y; },
        _log: Math.log,
        _log10: Math.log10,
        _max_: Math.max,
        _min_: Math.min,
        _remainder:function(x, y) { return x - Math.round(x/y) * y; },
        _pow: Math.pow,
        _round: Math.fround,
        _sin: Math.sin,
        _sqrt: Math.sqrt,
        _tan: Math.tan,
        
        table: new WebAssembly.Table({ initial: 0, element: 'anyfunc' })
    }
};

// Synchronously compile and instantiate the WASM module
try {
    let wasm_module = new WebAssembly.Module(FluteProcessor.atob(getBase64CodeFlute()));
    FluteProcessor.Flute_instance = new WebAssembly.Instance(wasm_module, FluteProcessor.importObject);
    registerProcessor('Flute', FluteProcessor);
} catch (e) {
    console.log(e); console.log("Faust Flute cannot be loaded or compiled");
}

