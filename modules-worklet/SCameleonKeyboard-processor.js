
/*
Code generated with Faust version 2.5.12
Compilation options: wasm-ib, -scal -ftz 2
*/

function getJSONSCameleonKeyboard() {
	return "{\"name\":\"Cameleon Keyboard\",\"version\":\"2.5.12\",\"options\":\"wasm-ib, -scal -ftz 2\",\"size\":\"428\",\"inputs\":\"0\",\"outputs\":\"1\",\"meta\":[{\"author\":\"ER\"},{\"basics.lib/name\":\"Faust Basic Element Library\"},{\"basics.lib/version\":\"0.0\"},{\"filters.lib/name\":\"Faust Filters Library\"},{\"filters.lib/version\":\"0.0\"},{\"maths.lib/author\":\"GRAME\"},{\"maths.lib/copyright\":\"GRAME\"},{\"maths.lib/license\":\"LGPL with exception\"},{\"maths.lib/name\":\"Faust Math Library\"},{\"maths.lib/version\":\"2.1\"},{\"name\":\"Cameleon Keyboard\"},{\"oscillators.lib/name\":\"Faust Oscillator Library\"},{\"oscillators.lib/version\":\"0.0\"},{\"signals.lib/name\":\"Faust Signal Routing Library\"},{\"signals.lib/version\":\"0.0\"}],\"ui\":[{\"type\":\"vgroup\",\"label\":\"Cameleon Keyboard\",\"items\":[{\"type\":\"hslider\",\"label\":\"Instrument Hand\",\"address\":\"/Cameleon_Keyboard/Instrument_Hand\",\"index\":\"68\",\"meta\":[{\"1\":\"\"},{\"acc\":\"1 0 -10 0 10\"}],\"init\":\"5\",\"min\":\"0\",\"max\":\"10\",\"step\":\"1\"},{\"type\":\"hslider\",\"label\":\"Hight\",\"address\":\"/Cameleon_Keyboard/Hight\",\"index\":\"20\",\"meta\":[{\"2\":\"\"},{\"acc\":\"0 1 -10 0 30\"}],\"init\":\"5\",\"min\":\"1\",\"max\":\"10\",\"step\":\"0.3\"},{\"type\":\"hslider\",\"label\":\"Note Duration (BPF Envelope)\",\"address\":\"/Cameleon_Keyboard/Note_Duration_(BPF_Envelope)\",\"index\":\"92\",\"meta\":[{\"3\":\"\"},{\"acc\":\"2 0 -10 0 10\"},{\"unit\":\"s\"}],\"init\":\"0.2\",\"min\":\"0.1\",\"max\":\"0.5\",\"step\":\"0.01\"},{\"type\":\"vslider\",\"label\":\"Envelope Type (BPF Envelope)\",\"address\":\"/Cameleon_Keyboard/Envelope_Type_(BPF_Envelope)\",\"index\":\"64\",\"meta\":[{\"4\":\"\"},{\"style\":\"radio{'f9':0;'f11':1;'f15':2;'f17':3}\"}],\"init\":\"0\",\"min\":\"0\",\"max\":\"3\",\"step\":\"1\"}]}]}";
}
function getBase64CodeSCameleonKeyboard() { return "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aiACOAIACwuqjICAAAEAQQALowx7Im5hbWUiOiJDYW1lbGVvbiBLZXlib2FyZCIsInZlcnNpb24iOiIyLjUuMTIiLCJvcHRpb25zIjoid2FzbS1pYiwgLXNjYWwgLWZ0eiAyIiwic2l6ZSI6IjQyOCIsImlucHV0cyI6IjAiLCJvdXRwdXRzIjoiMSIsIm1ldGEiOlt7ImF1dGhvciI6IkVSIn0seyJiYXNpY3MubGliL25hbWUiOiJGYXVzdCBCYXNpYyBFbGVtZW50IExpYnJhcnkifSx7ImJhc2ljcy5saWIvdmVyc2lvbiI6IjAuMCJ9LHsiZmlsdGVycy5saWIvbmFtZSI6IkZhdXN0IEZpbHRlcnMgTGlicmFyeSJ9LHsiZmlsdGVycy5saWIvdmVyc2lvbiI6IjAuMCJ9LHsibWF0aHMubGliL2F1dGhvciI6IkdSQU1FIn0seyJtYXRocy5saWIvY29weXJpZ2h0IjoiR1JBTUUifSx7Im1hdGhzLmxpYi9saWNlbnNlIjoiTEdQTCB3aXRoIGV4Y2VwdGlvbiJ9LHsibWF0aHMubGliL25hbWUiOiJGYXVzdCBNYXRoIExpYnJhcnkifSx7Im1hdGhzLmxpYi92ZXJzaW9uIjoiMi4xIn0seyJuYW1lIjoiQ2FtZWxlb24gS2V5Ym9hcmQifSx7Im9zY2lsbGF0b3JzLmxpYi9uYW1lIjoiRmF1c3QgT3NjaWxsYXRvciBMaWJyYXJ5In0seyJvc2NpbGxhdG9ycy5saWIvdmVyc2lvbiI6IjAuMCJ9LHsic2lnbmFscy5saWIvbmFtZSI6IkZhdXN0IFNpZ25hbCBSb3V0aW5nIExpYnJhcnkifSx7InNpZ25hbHMubGliL3ZlcnNpb24iOiIwLjAifV0sInVpIjpbeyJ0eXBlIjoidmdyb3VwIiwibGFiZWwiOiJDYW1lbGVvbiBLZXlib2FyZCIsIml0ZW1zIjpbeyJ0eXBlIjoiaHNsaWRlciIsImxhYmVsIjoiSW5zdHJ1bWVudCBIYW5kIiwiYWRkcmVzcyI6Ii9DYW1lbGVvbl9LZXlib2FyZC9JbnN0cnVtZW50X0hhbmQiLCJpbmRleCI6IjY4IiwibWV0YSI6W3siMSI6IiJ9LHsiYWNjIjoiMSAwIC0xMCAwIDEwIn1dLCJpbml0IjoiNSIsIm1pbiI6IjAiLCJtYXgiOiIxMCIsInN0ZXAiOiIxIn0seyJ0eXBlIjoiaHNsaWRlciIsImxhYmVsIjoiSGlnaHQiLCJhZGRyZXNzIjoiL0NhbWVsZW9uX0tleWJvYXJkL0hpZ2h0IiwiaW5kZXgiOiIyMCIsIm1ldGEiOlt7IjIiOiIifSx7ImFjYyI6IjAgMSAtMTAgMCAzMCJ9XSwiaW5pdCI6IjUiLCJtaW4iOiIxIiwibWF4IjoiMTAiLCJzdGVwIjoiMC4zIn0seyJ0eXBlIjoiaHNsaWRlciIsImxhYmVsIjoiTm90ZSBEdXJhdGlvbiAoQlBGIEVudmVsb3BlKSIsImFkZHJlc3MiOiIvQ2FtZWxlb25fS2V5Ym9hcmQvTm90ZV9EdXJhdGlvbl8oQlBGX0VudmVsb3BlKSIsImluZGV4IjoiOTIiLCJtZXRhIjpbeyIzIjoiIn0seyJhY2MiOiIyIDAgLTEwIDAgMTAifSx7InVuaXQiOiJzIn1dLCJpbml0IjoiMC4yIiwibWluIjoiMC4xIiwibWF4IjoiMC41Iiwic3RlcCI6IjAuMDEifSx7InR5cGUiOiJ2c2xpZGVyIiwibGFiZWwiOiJFbnZlbG9wZSBUeXBlIChCUEYgRW52ZWxvcGUpIiwiYWRkcmVzcyI6Ii9DYW1lbGVvbl9LZXlib2FyZC9FbnZlbG9wZV9UeXBlXyhCUEZfRW52ZWxvcGUpIiwiaW5kZXgiOiI2NCIsIm1ldGEiOlt7IjQiOiIifSx7InN0eWxlIjoicmFkaW97J2Y5JzowOydmMTEnOjE7J2YxNSc6MjsnZjE3JzozfSJ9XSwiaW5pdCI6IjAiLCJtaW4iOiIwIiwibWF4IjoiMyIsInN0ZXAiOiIxIn1dfV19MA=="; }

/*
 faust2wasm
 Additional code: GRAME 2017
*/
 
'use strict';

// Monophonic Faust DSP
class SCameleonKeyboardProcessor extends AudioWorkletProcessor {
    
    // JSON parsing functions
    static parse_ui(ui, obj, callback)
    {
        for (var i = 0; i < ui.length; i++) {
            SCameleonKeyboardProcessor.parse_group(ui[i], obj, callback);
        }
    }
    
    static parse_group(group, obj, callback)
    {
        if (group.items) {
            SCameleonKeyboardProcessor.parse_items(group.items, obj, callback);
        }
    }
    
    static parse_items(items, obj, callback)
    {
        for (var i = 0; i < items.length; i++) {
            callback(items[i], obj, callback);
        }
    }
    
    static parse_item1(item, obj, callback)
    {
        if (item.type === "vgroup"
            || item.type === "hgroup"
            || item.type === "tgroup") {
            SCameleonKeyboardProcessor.parse_items(item.items, obj, callback);
        } else if (item.type === "hbargraph"
                   || item.type === "vbargraph") {
            // Nothing
        } else if (item.type === "vslider"
                   || item.type === "hslider"
                   || item.type === "button"
                   || item.type === "checkbox"
                   || item.type === "nentry") {
            obj.push({ name: item.address,
                     defaultValue: item.init,
                     minValue: item.min,
                     maxValue: item.max });
        }
    }
    
    static parse_item2(item, obj, callback)
    {
        if (item.type === "vgroup"
            || item.type === "hgroup"
            || item.type === "tgroup") {
            SCameleonKeyboardProcessor.parse_items(item.items, obj, callback);
        } else if (item.type === "hbargraph"
                   || item.type === "vbargraph") {
            // Keep bargraph adresses
            obj.outputs_items.push(item.address);
            obj.pathTable[item.address] = parseInt(item.index);
        } else if (item.type === "vslider"
                   || item.type === "hslider"
                   || item.type === "button"
                   || item.type === "checkbox"
                   || item.type === "nentry") {
            // Keep inputs adresses
            obj.inputs_items.push(item.address);
            obj.pathTable[item.address] = parseInt(item.index);
            if (item.meta !== undefined) {
                for (var i = 0; i < item.meta.length; i++) {
                    if (item.meta[i].midi !== undefined) {
                        if (item.meta[i].midi.trim() === "pitchwheel") {
                            obj.fPitchwheelLabel.push(item.address);
                        } else if (item.meta[i].midi.trim().split(" ")[0] === "ctrl") {
                            obj.fCtrlLabel[parseInt(item.meta[i].midi.trim().split(" ")[1])]
                                .push({ path:item.address,
                                      min:parseFloat(item.min),
                                      max:parseFloat(item.max) });
                        }
                    }
                }
            }
        }
    }
    
    static b64ToUint6(nChr)
    {
        return nChr > 64 && nChr < 91 ?
        nChr - 65
        : nChr > 96 && nChr < 123 ?
        nChr - 71
        : nChr > 47 && nChr < 58 ?
        nChr + 4
        : nChr === 43 ?
        62
        : nChr === 47 ?
        63
        :
        0;
    }
    
    static atob(sBase64, nBlocksSize)
    {
        if (typeof atob === 'function') {
            return atob(sBase64);
        } else {
            
            var sB64Enc = sBase64.replace(/[^A-Za-z0-9\+\/]/g, "");
            var nInLen = sB64Enc.length;
            var nOutLen = nBlocksSize ? Math.ceil((nInLen * 3 + 1 >> 2) / nBlocksSize) * nBlocksSize : nInLen * 3 + 1 >> 2;
            var taBytes = new Uint8Array(nOutLen);
            
            for (var nMod3, nMod4, nUint24 = 0, nOutIdx = 0, nInIdx = 0; nInIdx < nInLen; nInIdx++) {
                nMod4 = nInIdx & 3;
                nUint24 |= SCameleonKeyboardProcessor.b64ToUint6(sB64Enc.charCodeAt(nInIdx)) << 18 - 6 * nMod4;
                if (nMod4 === 3 || nInLen - nInIdx === 1) {
                    for (nMod3 = 0; nMod3 < 3 && nOutIdx < nOutLen; nMod3++, nOutIdx++) {
                        taBytes[nOutIdx] = nUint24 >>> (16 >>> nMod3 & 24) & 255;
                    }
                    nUint24 = 0;
                }
            }
            return taBytes.buffer;
        }
    }
    
    static remap(v, mn0, mx0, mn1, mx1)
    {
        return (1.0 * (v - mn0) / (mx0 - mn0)) * (mx1 - mn1) + mn1;
    }
   
    static get parameterDescriptors () 
    {
        // Analyse JSON to generate AudioParam parameters
        var params = [];
        SCameleonKeyboardProcessor.parse_ui(JSON.parse(getJSONSCameleonKeyboard()).ui, params, SCameleonKeyboardProcessor.parse_item1);
        return params;
    }
    
    constructor(options)
    {
        super(options);
      
        this.json_object = JSON.parse(getJSONSCameleonKeyboard());

        this.output_handler = function(path, value) { this.port.postMessage({ path: path, value: value }); };
        
        this.ins = null;
        this.outs = null;

        this.dspInChannnels = [];
        this.dspOutChannnels = [];

        this.fPitchwheelLabel = [];
        this.fCtrlLabel = new Array(128);
        for (var i = 0; i < this.fCtrlLabel.length; i++) { this.fCtrlLabel[i] = []; }

        this.numIn = parseInt(this.json_object.inputs);
        this.numOut = parseInt(this.json_object.outputs);

        // Memory allocator
        this.ptr_size = 4;
        this.sample_size = 4;
        
        this.factory = SCameleonKeyboardProcessor.SCameleonKeyboard_instance.exports;
        this.HEAP = SCameleonKeyboardProcessor.SCameleonKeyboard_instance.exports.memory.buffer;
        this.HEAP32 = new Int32Array(this.HEAP);
        this.HEAPF32 = new Float32Array(this.HEAP);

        console.log(this.HEAP);
        console.log(this.HEAP32);
        console.log(this.HEAPF32);

        // bargraph
        this.outputs_timer = 5;
        this.outputs_items = [];

        // input items
        this.inputs_items = [];

        // Start of HEAP index

        // DSP is placed first with index 0. Audio buffer start at the end of DSP.
        this.audio_heap_ptr = parseInt(this.json_object.size);

        // Setup pointers offset
        this.audio_heap_ptr_inputs = this.audio_heap_ptr;
        this.audio_heap_ptr_outputs = this.audio_heap_ptr_inputs + (this.numIn * this.ptr_size);

        // Setup buffer offset
        this.audio_heap_inputs = this.audio_heap_ptr_outputs + (this.numOut * this.ptr_size);
        this.audio_heap_outputs = this.audio_heap_inputs + (this.numIn * SCameleonKeyboardProcessor.buffer_size * this.sample_size);

        // Start of DSP memory : DSP is placed first with index 0
        this.dsp = 0;

        this.pathTable = [];

        // Send output values to the AudioNode
        this.update_outputs = function ()
        {
            if (this.outputs_items.length > 0 && this.output_handler && this.outputs_timer-- === 0) {
                this.outputs_timer = 5;
                for (var i = 0; i < this.outputs_items.length; i++) {
                    this.output_handler(this.outputs_items[i], this.HEAPF32[this.pathTable[this.outputs_items[i]] >> 2]);
                }
            }
        }
        
        this.initAux = function ()
        {
            var i;
            
            if (this.numIn > 0) {
                this.ins = this.audio_heap_ptr_inputs;
                for (i = 0; i < this.numIn; i++) {
                    this.HEAP32[(this.ins >> 2) + i] = this.audio_heap_inputs + ((SCameleonKeyboardProcessor.buffer_size * this.sample_size) * i);
                }
                
                // Prepare Ins buffer tables
                var dspInChans = this.HEAP32.subarray(this.ins >> 2, (this.ins + this.numIn * this.ptr_size) >> 2);
                for (i = 0; i < this.numIn; i++) {
                    this.dspInChannnels[i] = this.HEAPF32.subarray(dspInChans[i] >> 2, (dspInChans[i] + SCameleonKeyboardProcessor.buffer_size * this.sample_size) >> 2);
                }
            }
            
            if (this.numOut > 0) {
                this.outs = this.audio_heap_ptr_outputs;
                for (i = 0; i < this.numOut; i++) {
                    this.HEAP32[(this.outs >> 2) + i] = this.audio_heap_outputs + ((SCameleonKeyboardProcessor.buffer_size * this.sample_size) * i);
                }
                
                // Prepare Out buffer tables
                var dspOutChans = this.HEAP32.subarray(this.outs >> 2, (this.outs + this.numOut * this.ptr_size) >> 2);
                for (i = 0; i < this.numOut; i++) {
                    this.dspOutChannnels[i] = this.HEAPF32.subarray(dspOutChans[i] >> 2, (dspOutChans[i] + SCameleonKeyboardProcessor.buffer_size * this.sample_size) >> 2);
                }
            }
            
            // Parse UI
            SCameleonKeyboardProcessor.parse_ui(this.json_object.ui, this, SCameleonKeyboardProcessor.parse_item2);
            
            // Init DSP
            this.factory.init(this.dsp, sampleRate); // 'sampleRate' is defined in AudioWorkletGlobalScope  
        }

        this.ctrlChange = function (channel, ctrl, value)
        {
            if (this.fCtrlLabel[ctrl] !== []) {
                for (var i = 0; i < this.fCtrlLabel[ctrl].length; i++) {
                    var path = this.fCtrlLabel[ctrl][i].path;
                    this.setParamValue(path, SCameleonKeyboardProcessor.remap(value, 0, 127, this.fCtrlLabel[ctrl][i].min, this.fCtrlLabel[ctrl][i].max));
                    if (this.output_handler) {
                   		this.output_handler(path, this.getParamValue(path));
                   	}
                }
            }
        }

        this.pitchWheel = function (channel, wheel)
        {
            for (var i = 0; i < this.fPitchwheelLabel.length; i++) {
                var path = this.fPitchwheelLabel[i];
                this.setParamValue(path, Math.pow(2.0, wheel/12.0));
                if (this.output_handler) {
                   	this.output_handler(path, this.getParamValue(path));
                }
            }
        }

        this.setParamValue = function (path, val)
        {
            this.HEAPF32[this.pathTable[path]] = val;
        }

        this.getParamValue = function (path)
        {
            return this.HEAPF32[this.pathTable[path]];
        }

        // Init resulting DSP
        this.initAux();

        // Set message handler
        this.port.onmessage = this.handleMessage.bind(this);
    }
    
    handleMessage(event) 
    {
        var msg = event.data;
        switch (msg.type) {
            // Generic MIDI message
            case "midi": this.midiMessage(msg.data); break;
            // Typed MIDI message
            case "keyOn": this.keyOn(msg.data[0], msg.data[1], msg.data[2]); break;
            case "keyOff": this.keyOff(msg.data[0], msg.data[1], msg.data[2]); break;
            case "ctrlChange": this.ctrlChange(msg.data[0], msg.data[1], msg.data[2]); break;
            case "pitchWheel": this.pitchWheel(msg.data[0], msg.data[1]); break;
            // Generic data message
            case "param": this.setParamValue(msg.key, msg.value); break;
            //case "patch": this.onpatch(msg.data); break;
        }
    }
    
    midiMessage(data)
    {
        var cmd = data[0] >> 4;
        var channel = data[0] & 0xf;
        var data1 = data[1];
        var data2 = data[2];
        
        if (channel === 9) {
            return;
        } else if (cmd === 8 || ((cmd === 9) && (data2 === 0))) {
            //this.keyOff(channel, data1, data2);
        } else if (cmd === 9) {
            //this.keyOn(channel, data1, data2);
        } else if (cmd === 11) {
            //this.ctrlChange(channel, data1, data2);
        } else if (cmd === 14) {
            //this.pitchWheel(channel, ((data2 * 128.0 + data1)-8192)/8192.0);
        }
    }
    
    process(inputs, outputs, parameters) 
    {
        var input = inputs[0];
        var output = outputs[0];
        
        // Copy inputs
        if (input !== undefined) {
            for (var chan = 0; chan < Math.min(this.numIn, input.length) ; ++chan) {
                var dspInput = this.dspInChannnels[chan];
                dspInput.set(input[chan]);
            }
        }
        
        // Update controls (possibly needed for sample accurate control)
        var params = Object.entries(parameters);
        for (var i = 0; i < params.length; i++) {
            this.HEAPF32[this.pathTable[params[i][0]] >> 2] = params[i][1][0];
        }
        
        // Compute
        this.factory.compute(this.dsp, SCameleonKeyboardProcessor.buffer_size, this.ins, this.outs);
        
        // Update bargraph
        this.update_outputs();
        
        // Copy outputs
        if (output !== undefined) {
            //console.log("output.length " + output.length);
            for (var chan = 0; chan < Math.min(this.numOut, output.length); ++chan) {
                var dspOutput = this.dspOutChannnels[chan];
                output[chan].set(dspOutput);
            }
        }
        
        return true;
    }
}

// Globals

SCameleonKeyboardProcessor.buffer_size = 128;

SCameleonKeyboardProcessor.importObject = {
    env: {
        memoryBase: 0,
        tableBase: 0,
            
        // Integer version
        _abs: Math.abs,
        
        // Float version
        _acosf: Math.acos,
        _asinf: Math.asin,
        _atanf: Math.atan,
        _atan2f: Math.atan2,
        _ceilf: Math.ceil,
        _cosf: Math.cos,
        _expf: Math.exp,
        _floorf: Math.floor,
        _fmodf: function(x, y) { return x % y; },
        _logf: Math.log,
        _log10f: Math.log10,
        _max_f: Math.max,
        _min_f: Math.min,
        _remainderf: function(x, y) { return x - Math.round(x/y) * y; },
        _powf: Math.pow,
        _roundf: Math.fround,
        _sinf: Math.sin,
        _sqrtf: Math.sqrt,
        _tanf: Math.tan,
           
        // Double version
        _acos: Math.acos,
        _asin: Math.asin,
        _atan: Math.atan,
        _atan2: Math.atan2,
        _ceil: Math.ceil,
        _cos: Math.cos,
        _exp: Math.exp,
        _floor: Math.floor,
        _fmod: function(x, y) { return x % y; },
        _log: Math.log,
        _log10: Math.log10,
        _max_: Math.max,
        _min_: Math.min,
        _remainder:function(x, y) { return x - Math.round(x/y) * y; },
        _pow: Math.pow,
        _round: Math.fround,
        _sin: Math.sin,
        _sqrt: Math.sqrt,
        _tan: Math.tan,
        
        table: new WebAssembly.Table({ initial: 0, element: 'anyfunc' })
    }
};

// Synchronously compile and instantiate the WASM module
try {
    let wasm_module = new WebAssembly.Module(SCameleonKeyboardProcessor.atob(getBase64CodeSCameleonKeyboard()));
    SCameleonKeyboardProcessor.SCameleonKeyboard_instance = new WebAssembly.Instance(wasm_module, SCameleonKeyboardProcessor.importObject);
    registerProcessor('SCameleonKeyboard', SCameleonKeyboardProcessor);
} catch (e) {
    console.log(e); console.log("Faust SCameleonKeyboard cannot be loaded or compiled");
}

