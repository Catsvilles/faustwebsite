
/*
Code generated with Faust version 2.11.5
Compilation options: wasm-ib, -scal -ftz 2
*/

function getJSONFlute() {
	return "{\"name\":\"Flute\",\"filename\":\"Flute\",\"version\":\"2.11.5\",\"compile_options\":\"-scal -ftz 2\",\"library_list\":[\"/usr/local/share/faust/stdfaust.lib\",\"/usr/local/share/faust/envelopes.lib\",\"/usr/local/share/faust/basics.lib\",\"/usr/local/share/faust/maths.lib\",\"/usr/local/share/faust/signals.lib\",\"/usr/local/share/faust/noises.lib\",\"/usr/local/share/faust/oscillators.lib\",\"/usr/local/share/faust/instruments.lib\",\"/usr/local/share/faust/delays.lib\",\"/usr/local/share/faust/filters.lib\",\"/usr/local/share/faust/reverbs.lib\",\"/usr/local/share/faust/routes.lib\"],\"include_pathnames\":[\".\",\"/usr/local/share/faust\",\"/usr/share/faust\"],\"size\":\"1172280\",\"inputs\":\"0\",\"outputs\":\"2\",\"meta\":[{\"author\":\"Romain Michon (rmichon@ccrma.stanford.edu)\"},{\"basics.lib/name\":\"Faust Basic Element Library\"},{\"basics.lib/version\":\"0.0\"},{\"copyright\":\"Romain Michon\"},{\"delays.lib/name\":\"Faust Delay Library\"},{\"delays.lib/version\":\"0.0\"},{\"description\":\"Nonlinear WaveGuide Flute\"},{\"envelopes.lib/author\":\"GRAME\"},{\"envelopes.lib/copyright\":\"GRAME\"},{\"envelopes.lib/license\":\"LGPL with exception\"},{\"envelopes.lib/name\":\"Faust Envelope Library\"},{\"envelopes.lib/version\":\"0.0\"},{\"filename\":\"Flute\"},{\"filters.lib/name\":\"Faust Filters Library\"},{\"filters.lib/version\":\"0.0\"},{\"instruments.lib/author\":\"Romain Michon (rmichon@ccrma.stanford.edu)\"},{\"instruments.lib/copyright\":\"Romain Michon\"},{\"instruments.lib/licence\":\"STK-4.3\"},{\"instruments.lib/name\":\"Faust-STK Tools Library\"},{\"instruments.lib/version\":\"1.0\"},{\"licence\":\"STK-4.3\"},{\"maths.lib/author\":\"GRAME\"},{\"maths.lib/copyright\":\"GRAME\"},{\"maths.lib/license\":\"LGPL with exception\"},{\"maths.lib/name\":\"Faust Math Library\"},{\"maths.lib/version\":\"2.1\"},{\"name\":\"Flute\"},{\"noises.lib/name\":\"Faust Noise Generator Library\"},{\"noises.lib/version\":\"0.0\"},{\"oscillators.lib/name\":\"Faust Oscillator Library\"},{\"oscillators.lib/version\":\"0.0\"},{\"reverbs.lib/name\":\"Faust Reverb Library\"},{\"reverbs.lib/version\":\"0.0\"},{\"routes.lib/name\":\"Faust Signal Routing Library\"},{\"routes.lib/version\":\"0.0\"},{\"signals.lib/name\":\"Faust Signal Routing Library\"},{\"signals.lib/version\":\"0.0\"},{\"version\":\"1.0\"}],\"ui\":[{\"type\":\"vgroup\",\"label\":\"Flute\",\"items\":[{\"type\":\"hslider\",\"label\":\"ON/OFF (ASR Envelope)\",\"address\":\"/Flute/ON/OFF_(ASR_Envelope)\",\"index\":\"393300\",\"meta\":[{\"0\":\"\"}],\"init\":\"0\",\"min\":\"0\",\"max\":\"1\",\"step\":\"1\"},{\"type\":\"hslider\",\"label\":\"Frequency\",\"address\":\"/Flute/Frequency\",\"index\":\"393352\",\"meta\":[{\"1\":\"\"},{\"acc\":\"1 1 -10 0 10\"}],\"init\":\"440\",\"min\":\"247\",\"max\":\"1200\",\"step\":\"1\"},{\"type\":\"hslider\",\"label\":\"Pressure\",\"address\":\"/Flute/Pressure\",\"index\":\"393364\",\"meta\":[{\"2\":\"\"},{\"acc\":\"1 0 -10 0 10\"},{\"style\":\"knob\"}],\"init\":\"0.96\",\"min\":\"0.2\",\"max\":\"0.99\",\"step\":\"0.01\"},{\"type\":\"hslider\",\"label\":\"Breath Noise\",\"address\":\"/Flute/Breath_Noise\",\"index\":\"393416\",\"meta\":[{\"3\":\"\"},{\"acc\":\"2 0 -10 0 10\"},{\"style\":\"knob\"}],\"init\":\"0.02\",\"min\":\"0.01\",\"max\":\"0.2\",\"step\":\"0.01\"},{\"type\":\"hslider\",\"label\":\"Vibrato Freq (Vibrato Envelope)\",\"address\":\"/Flute/Vibrato_Freq_(Vibrato_Envelope)\",\"index\":\"393472\",\"meta\":[{\"4\":\"\"},{\"acc\":\"0 1 -10 0 10\"},{\"style\":\"knob\"},{\"unit\":\"Hz\"}],\"init\":\"4\",\"min\":\"0.5\",\"max\":\"8\",\"step\":\"0.1\"},{\"type\":\"hgroup\",\"label\":\"Reverb\",\"meta\":[{\"5\":\"\"}],\"items\":[{\"type\":\"hslider\",\"label\":\"Reverberation Volume (InstrReverb)\",\"address\":\"/Flute/Reverb/Reverberation_Volume_(InstrReverb)\",\"index\":\"393288\",\"meta\":[{\"1\":\"\"},{\"acc\":\"1 1 -30 0 13\"},{\"style\":\"knob\"}],\"init\":\"0.2\",\"min\":\"0.05\",\"max\":\"1\",\"step\":\"0.01\"},{\"type\":\"hslider\",\"label\":\"Reverberation Room Size (InstrReverb)\",\"address\":\"/Flute/Reverb/Reverberation_Room_Size_(InstrReverb)\",\"index\":\"262168\",\"meta\":[{\"2\":\"\"},{\"acc\":\"1 1 -30 0 13\"},{\"style\":\"knob\"}],\"init\":\"0.72\",\"min\":\"0.05\",\"max\":\"1.7\",\"step\":\"0.01\"}]}]}]}";
}
function getBase64CodeFlute() { return "AGFzbQEAAAAB5YCAgAATYAJ/fwBgBH9/f38AYAF9AX1gAX0BfWABfwF/YAF/AX9gAn9/AX1gAX8Bf2ACf38AYAF/AGACf38AYAJ/fwBgAX8AYAJ/fwF/YAJ/fwF/YAJ9fQF9YAN/f30AYAF9AX1gAX0BfQK9gICAAAUDZW52BV9jb3NmAAIDZW52BV9leHBmAAMDZW52BV9wb3dmAA8DZW52BV9zaW5mABEDZW52BV90YW5mABIDj4CAgAAOAAEEBQYHCAkKCwwNDhAFh4CAgAABAKCAgIAAB7qBgIAADAdjb21wdXRlAAYMZ2V0TnVtSW5wdXRzAAcNZ2V0TnVtT3V0cHV0cwAIDWdldFBhcmFtVmFsdWUACQ1nZXRTYW1wbGVSYXRlAAoEaW5pdAALDWluc3RhbmNlQ2xlYXIADBFpbnN0YW5jZUNvbnN0YW50cwANDGluc3RhbmNlSW5pdAAOGmluc3RhbmNlUmVzZXRVc2VySW50ZXJmYWNlAA8Nc2V0UGFyYW1WYWx1ZQASBm1lbW9yeQIACrSAgYAADpWBgIAAAQJ/QQAhA0EAIQJBACECA0ACQEGwxscAIAJBAnRqQQA2AgAgAkEBaiECIAJBAkgEQAwCDAELCwtBACEDA0ACQEEAQQAoArTGR0EBajYCsMZHQQAgA0ECdGpD2w/JOEEAKAKwxkdBf2qylBADOAIAQQBBACgCsMZHNgK0xkcgA0EBaiEDIANBgIAESARADAIMAQsLCwuSz4CAAAIRf8ABfUEAIQRBACEFQwAAAAAhFUMAAAAAIRZDAAAAACEXQwAAAAAhGEMAAAAAIRlDAAAAACEaQwAAAAAhG0MAAAAAIRxDAAAAACEdQwAAAAAhHkMAAAAAIR9DAAAAACEgQQAhBkEAIQdDAAAAACEhQQAhCEMAAAAAISJDAAAAACEjQwAAAAAhJEMAAAAAISVDAAAAACEmQwAAAAAhJ0EAIQlDAAAAACEoQwAAAAAhKUMAAAAAISpDAAAAACErQwAAAAAhLEMAAAAAIS1DAAAAACEuQwAAAAAhL0MAAAAAITBDAAAAACExQwAAAAAhMkMAAAAAITNDAAAAACE0QwAAAAAhNUMAAAAAITZDAAAAACE3QwAAAAAhOEMAAAAAITlDAAAAACE6QwAAAAAhO0MAAAAAITxDAAAAACE9QwAAAAAhPkMAAAAAIT9DAAAAACFAQwAAAAAhQUMAAAAAIUJDAAAAACFDQwAAAAAhREMAAAAAIUVDAAAAACFGQwAAAAAhR0MAAAAAIUhDAAAAACFJQwAAAAAhSkMAAAAAIUtDAAAAACFMQwAAAAAhTUMAAAAAIU5DAAAAACFPQwAAAAAhUEMAAAAAIVFDAAAAACFSQwAAAAAhU0MAAAAAIVRDAAAAACFVQwAAAAAhVkMAAAAAIVdDAAAAACFYQwAAAAAhWUMAAAAAIVpDAAAAACFbQwAAAAAhXEMAAAAAIV1DAAAAACFeQwAAAAAhX0MAAAAAIWBDAAAAACFhQwAAAAAhYkMAAAAAIWNDAAAAACFkQwAAAAAhZUMAAAAAIWZDAAAAACFnQQAhCkMAAAAAIWhDAAAAACFpQwAAAAAhakMAAAAAIWtDAAAAACFsQwAAAAAhbUMAAAAAIW5DAAAAACFvQwAAAAAhcEMAAAAAIXFDAAAAACFyQwAAAAAhc0MAAAAAIXRDAAAAACF1QwAAAAAhdkEAIQtDAAAAACF3QwAAAAAheEEAIQxDAAAAACF5QwAAAAAhekMAAAAAIXtDAAAAACF8QwAAAAAhfUEAIQ1DAAAAACF+QQAhDkEAIQ9BACEQQwAAAAAhf0MAAAAAIYABQQAhEUEAIRJBACETQwAAAAAhgQFBACEUQwAAAAAhggFDAAAAACGDAUMAAAAAIYQBQwAAAAAhhQFDAAAAACGGAUMAAAAAIYcBQwAAAAAhiAFDAAAAACGJAUMAAAAAIYoBQwAAAAAhiwFDAAAAACGMAUMAAAAAIY0BQwAAAAAhjgFDAAAAACGPAUMAAAAAIZABQwAAAAAhkQFDAAAAACGSAUMAAAAAIZMBQwAAAAAhlAFDAAAAACGVAUMAAAAAIZYBQwAAAAAhlwFDAAAAACGYAUMAAAAAIZkBQwAAAAAhmgFDAAAAACGbAUMAAAAAIZwBQwAAAAAhnQFDAAAAACGeAUMAAAAAIZ8BQwAAAAAhoAFDAAAAACGhAUMAAAAAIaIBQwAAAAAhowFDAAAAACGkAUMAAAAAIaUBQwAAAAAhpgFDAAAAACGnAUMAAAAAIagBQwAAAAAhqQFDAAAAACGqAUMAAAAAIasBQwAAAAAhrAFDAAAAACGtAUMAAAAAIa4BQwAAAAAhrwFDAAAAACGwAUMAAAAAIbEBQwAAAAAhsgFDAAAAACGzAUMAAAAAIbQBQwAAAAAhtQFDAAAAACG2AUMAAAAAIbcBQwAAAAAhuAFDAAAAACG5AUMAAAAAIboBQwAAAAAhuwFDAAAAACG8AUMAAAAAIb0BQwAAAAAhvgFDAAAAACG/AUMAAAAAIcABQwAAAAAhwQFDAAAAACHCAUMAAAAAIcMBQwAAAAAhxAFDAAAAACHFAUMAAAAAIcYBQwAAAAAhxwFDAAAAACHIAUMAAAAAIckBQwAAAAAhygFDAAAAACHLAUMAAAAAIcwBQwAAAAAhzQFDAAAAACHOAUMAAAAAIc8BQwAAAAAh0AFDAAAAACHRAUMAAAAAIdIBQwAAAAAh0wFDAAAAACHUASADQQBqKAIAIQQgA0EEaigCACEFQ83MTD1DmpnZP0EAKgKYgBCWlyEVQQAqApSAECAVlRABIRYgFkMAAABAEAIhF0MAAIA/QQAqAoiAECAXlJMhGEMAAIA/IBeTIRkgGCAZlSEaQwAAAAAgGEMAAABAEAIgGUMAAABAEAKVQwAAgL+Sl5EhGyAaIBuTIRwgFiAbQwAAgD8gGpOSlCEdQQAqApyAECAVlRABIBaVQwAAgL+SIR5DbxKDOkEAKgLIgBiUIR9BACoC1IAYISAgIEMAAAAAXiEGIAZBAEohByAGsiEhICBDAAAAAFtBAEohCEEAKgLsgBggIJQhIkNvEoM6QQAqAoiBGJQhI0NvEoM6QQAqApSBGJQhJENmZmY/ICCUISVBACoCuIEYICVDAACAv5KUISZDbxKDOkEAKgLIgRiUIScgIEMAAAAAXyEJQQAqAvyBGEEAKgKAghiUIShBACoC7MIdIBWVEAEhKSApQwAAAEAQAiEqQwAAgD9BACoCiIAQICqUkyErQwAAgD8gKpMhLCArICyVIS1DAAAAACArQwAAAEAQAiAsQwAAAEAQApVDAACAv5KXkSEuIC0gLpMhLyApIC5DAACAPyAtk5KUITBBACoC8MIdIBWVEAEgKZVDAACAv5IhMUEAKgKgwyYgFZUQASEyIDJDAAAAQBACITNDAACAP0EAKgKIgBAgM5STITRDAACAPyAzkyE1IDQgNZUhNkMAAAAAIDRDAAAAQBACIDVDAAAAQBAClUMAAIC/kpeRITcgNiA3kyE4IDIgN0MAAIA/IDaTkpQhOUEAKgKkwyYgFZUQASAylUMAAIC/kiE6QQAqAtTDKyAVlRABITsgO0MAAABAEAIhPEMAAIA/QQAqAoiAECA8lJMhPUMAAIA/IDyTIT4gPSA+lSE/QwAAAAAgPUMAAABAEAIgPkMAAABAEAKVQwAAgL+Sl5EhQCA/IECTIUEgOyBAQwAAgD8gP5OSlCFCQQAqAtjDKyAVlRABIDuVQwAAgL+SIUNBACoCiMQ0IBWVEAEhRCBEQwAAAEAQAiFFQwAAgD9BACoCiIAQIEWUkyFGQwAAgD8gRZMhRyBGIEeVIUhDAAAAACBGQwAAAEAQAiBHQwAAAEAQApVDAACAv5KXkSFJIEggSZMhSiBEIElDAACAPyBIk5KUIUtBACoCjMQ0IBWVEAEgRJVDAACAv5IhTEEAKgK8hDkgFZUQASFNIE1DAAAAQBACIU5DAACAP0EAKgKIgBAgTpSTIU9DAACAPyBOkyFQIE8gUJUhUUMAAAAAIE9DAAAAQBACIFBDAAAAQBAClUMAAIC/kpeRIVIgUSBSkyFTIE0gUkMAAIA/IFGTkpQhVEEAKgLAhDkgFZUQASBNlUMAAIC/kiFVQQAqAvCEPiAVlRABIVYgVkMAAABAEAIhV0MAAIA/QQAqAoiAECBXlJMhWEMAAIA/IFeTIVkgWCBZlSFaQwAAAAAgWEMAAABAEAIgWUMAAABAEAKVQwAAgL+Sl5EhWyBaIFuTIVwgViBbQwAAgD8gWpOSlCFdQQAqAvSEPiAVlRABIFaVQwAAgL+SIV5BACoCpIVDIBWVEAEhXyBfQwAAAEAQAiFgQwAAgD9BACoCiIAQIGCUkyFhQwAAgD8gYJMhYiBhIGKVIWNDAAAAACBhQwAAAEAQAiBiQwAAAEAQApVDAACAv5KXkSFkIGMgZJMhZSBfIGRDAACAPyBjk5KUIWZBACoCqIVDIBWVEAEgX5VDAACAv5IhZ0EAIQoDQAJAQwAAAABBACoCpIAQQQAqAqiAEEEAKgKwgBCUQQAqAqjGR0EAKgKsxkeSk5STIWhBACBoQwAAAAAgaLxBgICA/AdxGzgCrIAQIBxBACoCuIAQlCAdQQAqAqjGRyAeQQAqAqyAEJSSlJIhaUEAIGlDAAAAACBpvEGAgID8B3EbOAK0gBBBwIAQQQAoAryAEEH//wFxQQJ0akPzBLU+QQAqArSAEJRDCOU8HpI4AgAgH0N3vn8/QQAqAtCAGJSSIWpBACBqQwAAAAAgarxBgICA/AdxGzgCzIAYQ83MTD1DAACAP0EAKgLMgBiWlyFrQwAAAABBACoC2IAYQQAqAuCAGEMAAIA/kpYgBxshbEEAIGxDAAAAACBsvEGAgID8B3EbOALcgBhDAAAAAEEAKgLYgBhBACoC6IAYQwAAgD+SliAIGyFtQQAgbUMAAAAAIG28QYCAgPwHcRs4AuSAGCAhQwAAAAAgIkEAKgLkgBiUICBBACoC5IAYQQAqAtiAGF0bQQAqAuSAGEMAAAAAXRuUQQAqAvSAGCAGGyFuQQAgbkMAAAAAIG68QYCAgPwHcRs4AvCAGEEAKgLwgBhBACoC8IAYQQAqAuyAGEMAAAAAQQAqAtyAGEEAKgLwgBiUk5SSQwAAAABBACoC3IAYQQAqAtiAGF0bQQAqAtyAGEMAAAAAXRshbyAjQ3e+fz9BACoCkIEYlJIhcEEAIHBDAAAAACBwvEGAgID8B3EbOAKMgRhBACoChIEYQQAqAoyBGJUhcSBxQwAAAMCSIXIgco4hcyAkQ3e+fz9BACoCnIEYlJIhdEEAIHRDAAAAACB0vEGAgID8B3EbOAKYgRhDAAAAAEEAKgKggRhBACoCqIEYQwAAgD+SliAHGyF1QQAgdUMAAAAAIHW8QYCAgPwHcRs4AqSBGEMAAAAAQQAqAqyBGEEAKgK0gRhDAACAP5KWIAgbIXZBACB2QwAAAAAgdrxBgICA/AdxGzgCsIEYQQAqArCBGEEAKgLYgBhdIQsgIUMAAAAAQQAqAuyAGEEAKgKwgRiUQwAAgD8gCxtBACoCsIEYQwAAAABdGyAmQQAqArCBGEEAKgLYgBiTlEMAAIA/kiAlQQAqArCBGEEAKgKsgRhdGyALG5RBACoCwIEYIAYbIXdBACB3QwAAAAAgd7xBgICA/AdxGzgCvIEYICdDd75/P0EAKgLQgRiUkiF4QQAgeEMAAAAAIHi8QYCAgPwHcRs4AsyBGEEAQe2cmY4EQQAoAtiBGGxBueAAajYC1IEYQQAgBkEAKALggRhBACoC+IEYQwAAgD9gcnE2AtyBGEEAIAZBACgC6IEYQQFqbDYC5IEYIAlBACoC+IEYQwAAAABecSEMQQAoAuiBGLIheSAMQQBGQQAqAviBGEO9N4Y1YHKyQQAqAuyBGEEAKALggRhBAEYgBnFBACoC+IEYQwAAgD9dcSB5QQAqAtiAGF5xQQEgeUEAKgLYgBhda2yylEEAKgL4gRhDAACAP0EAKgLwgRggDLKUk5SSlCF6QQAgekMAAAAAIHq8QYCAgPwHcRs4AvSBGCAoQQAqAoiCGCAoQQAqAoiCGJKOk5Ihe0EAIHtDAAAAACB7vEGAgID8B3EbOAKEghhBACoChIAQQQAqAoyBGJUhfCB8QwAAAMCSIX0gfaghDSB9jiF+IA1BAWohDiANQQBBACANSBshDyAOQQBBACAOSBshEEPNzMw+QZyCGkEAKAK8gBBBgSAgD0GBICAPSBtBAWprQf8/cUECdGoqAgAgfkMAAEBAIHyTkpQgfEMAAADAIH6TkkGcghpBACgCvIAQQYEgIBBBgSAgEEgbQQFqa0H/P3FBAnRqKgIAlJKUIX9DzcxMPkOkcH0/QQAqApiBGJaXQQAqAryBGEEAKgK8gRhBACoCxIEYQwAAAABBACoCpIEYQQAqAryBGJSTlJJDAAAAAEEAKgKkgRhBACoCoIEYXRtBACoCpIEYQwAAAABdG5RDzcwMMEMK1yM8Q83MTD5BACoCzIEYlpdBACgC1IEYspSUQ83MjD+SlEPNzEw9QQAqAvSBGEEAQwAAgEdBACoChIIYlKhBAnRqKgIAlJSSIH+SIYABQYyCGEEAKAK8gBBB/z9xQQJ0aiCAATgCACByqCERIBFBAWohEiASQQBBACASSBshEyBxQwAAAMAgc5OSQYyCGEEAKAK8gBBBgSAgE0GBICATSBtrQf8/cUECdGoqAgCUIYEBIBFBAEEAIBFIGyEUQYyCGEEAKAK8gBBBgSAgFEGBICAUSBtrQf8/cUECdGoqAgAgc0MAAEBAIHGTkpQhggEggQEgfyCCAZKSIIIBIIEBkkMAAEBAEAKTIYMBQQAggwE4AoyCGkMAAAAAQQAqAvyAGEEAKgKAgRhBACoCmIIalCCDAUEAKgKQghqSk5STIYQBQQAghAFDAAAAACCEAbxBgICA/AdxGzgClIIaQQAqApSCGiGFAUGcghpBACgCvIAQQf8/cUECdGoghQFDAAAAACCFAbxBgICA/AdxGzgCAEN3vn8/QQAqAqCCHJQhhgFBACCGAUMAAAAAIIYBvEGAgID8B3EbOAKcghxD2w9JQEGcghpBACgCvIAQQQBrQf8/cUECdGoqAgBBACoCnIIclCBvlJQhhwEghwEQAyGIASCHARAAIYkBQZyCGkEAKAK8gBBBAGtB/z9xQQJ0aioCACCJAZQgiAFBACoC0IIclJMhigEgiQEgigGUIIgBQQAqAsiCHJSTIYsBIIkBIIsBlCCIAUEAKgLAghyUkyGMASCJASCMAZQgiAFBACoCuIIclJMhjQEgiQEgjQGUIIgBQQAqArCCHJSTIY4BIIkBII4BlCCIAUEAKgKoghyUkyGPAUEAII8BQwAAAAAgjwG8QYCAgPwHcRs4AqSCHCCIASCOAZQgiQFBACoCqIIclJIhkAFBACCQAUMAAAAAIJABvEGAgID8B3EbOAKsghwgiAEgjQGUIIkBQQAqArCCHJSSIZEBQQAgkQFDAAAAACCRAbxBgICA/AdxGzgCtIIcIIgBIIwBlCCJAUEAKgK4ghyUkiGSAUEAIJIBQwAAAAAgkgG8QYCAgPwHcRs4AryCHCCIASCLAZQgiQFBACoCwIIclJIhkwFBACCTAUMAAAAAIJMBvEGAgID8B3EbOALEghwgiAEgigGUIIkBQQAqAsiCHJSSIZQBQQAglAFDAAAAACCUAbxBgICA/AdxGzgCzIIcQZyCGkEAKAK8gBBBAGtB/z9xQQJ0aioCAEMAAIA/QQAqApyCHJOUQQAqApyCHEGcghpBACgCvIAQQQBrQf8/cUECdGoqAgAgiAGUQQAqAtCCHCCJAZSSlJIhlQFB1IIcQQAoAryAEEH/H3FBAnRqIGsgb5QglQGUOAIAQ5qZGT5B1IIcQQAoAryAEEEAKALUgh1rQf8fcUECdGoqAgCUIZYBQ5qZGT9BACoC4MIdlEHAgBBBACgCvIAQQQAoAsSAGGtB//8BcUECdGoqAgCSIJYBkyGXAUHYgh1BACgCvIAQQf8PcUECdGoglwE4AgBB2IIdQQAoAryAEEEAKALYwh1rQf8PcUECdGoqAgAhmAFBACCYAUMAAAAAIJgBvEGAgID8B3EbOALcwh1DAAAAAEOamRk/IJcBlJMhmQEgmQFDAAAAACCZAbxBgICA/AdxGyGaAUMAAAAAQQAqAqSAEEEAKgKogBBBACoC+MIdlEEAKgL4xUdBACoC/MVHkpOUkyGbAUEAIJsBQwAAAAAgmwG8QYCAgPwHcRs4AvTCHSAvQQAqAoDDHZQgMEEAKgL4xUcgMUEAKgL0wh2UkpSSIZwBQQAgnAFDAAAAACCcAbxBgICA/AdxGzgC/MIdQYTDHUEAKAK8gBBB//8BcUECdGpD8wS1PkEAKgL8wh2UQwjlPB6SOAIAQ5qZGT9BACoClMMmlEGEwx1BACgCvIAQQQAoAojDJWtB//8BcUECdGoqAgCSIJYBkyGdAUGMwyVBACgCvIAQQf8fcUECdGognQE4AgBBjMMlQQAoAryAEEEAKAKMwyZrQf8fcUECdGoqAgAhngFBACCeAUMAAAAAIJ4BvEGAgID8B3EbOAKQwyZDAAAAAEOamRk/IJ0BlJMhnwEgnwFDAAAAACCfAbxBgICA/AdxGyGgAUMAAAAAQQAqAqSAEEEAKgKogBBBACoCrMMmlEEAKgKQxkdBACoClMZHkpOUkyGhAUEAIKEBQwAAAAAgoQG8QYCAgPwHcRs4AqjDJiA4QQAqArTDJpQgOUEAKgKQxkcgOkEAKgKowyaUkpSSIaIBQQAgogFDAAAAACCiAbxBgICA/AdxGzgCsMMmQbjDJkEAKAK8gBBB//8AcUECdGpD8wS1PkEAKgKwwyaUQwjlPB6SOAIAQbjDJkEAKAK8gBBBACgCvMMqa0H//wBxQQJ0aioCACCWAUOamRk/QQAqAsjDK5SSkiGjAUHAwypBACgCvIAQQf8fcUECdGogowE4AgBBwMMqQQAoAryAEEEAKALAwytrQf8fcUECdGoqAgAhpAFBACCkAUMAAAAAIKQBvEGAgID8B3EbOALEwytDAAAAAEOamRk/IKMBlJMhpQEgpQFDAAAAACClAbxBgICA/AdxGyGmAUMAAAAAQQAqAqSAEEEAKgKogBBBACoC4MMrlEEAKgLgxUdBACoC5MVHkpOUkyGnAUEAIKcBQwAAAAAgpwG8QYCAgPwHcRs4AtzDKyBBQQAqAujDK5QgQkEAKgLgxUcgQ0EAKgLcwyuUkpSSIagBQQAgqAFDAAAAACCoAbxBgICA/AdxGzgC5MMrQezDK0EAKAK8gBBB//8BcUECdGpD8wS1PkEAKgLkwyuUQwjlPB6SOAIAQezDK0EAKAK8gBBBACgC8MMza0H//wFxQQJ0aioCACCWAUOamRk/QQAqAvzDNJSSkiGpAUH0wzNBACgCvIAQQf8fcUECdGogqQE4AgBB9MMzQQAoAryAEEEAKAL0wzRrQf8fcUECdGoqAgAhqgFBACCqAUMAAAAAIKoBvEGAgID8B3EbOAL4wzRDAAAAAEOamRk/IKkBlJMhqwEgqwFDAAAAACCrAbxBgICA/AdxGyGsAUMAAAAAQQAqAqSAEEEAKgKogBBBACoClMQ0lEEAKgKcxkdBACoCoMZHkpOUkyGtAUEAIK0BQwAAAAAgrQG8QYCAgPwHcRs4ApDENCBKQQAqApzENJQgS0EAKgKcxkcgTEEAKgKQxDSUkpSSIa4BQQAgrgFDAAAAACCuAbxBgICA/AdxGzgCmMQ0QaDENEEAKAK8gBBB//8AcUECdGpD8wS1PkEAKgKYxDSUQwjlPB6SOAIAQaDENEEAKAK8gBBBACgCpMQ4a0H//wBxQQJ0aioCACCWAUOamRk/QQAqArCEOZSSkyGvAUGoxDhBACgCvIAQQf8PcUECdGogrwE4AgBBqMQ4QQAoAryAEEEAKAKohDlrQf8PcUECdGoqAgAhsAFBACCwAUMAAAAAILABvEGAgID8B3EbOAKshDlDmpkZPyCvAZQhsQEgsQFDAAAAACCxAbxBgICA/AdxGyGyAUMAAAAAQQAqAqSAEEEAKgKogBBBACoCyIQ5lEEAKgLsxUdBACoC8MVHkpOUkyGzAUEAILMBQwAAAAAgswG8QYCAgPwHcRs4AsSEOSBTQQAqAtCEOZQgVEEAKgLsxUcgVUEAKgLEhDmUkpSSIbQBQQAgtAFDAAAAACC0AbxBgICA/AdxGzgCzIQ5QdSEOUEAKAK8gBBB//8AcUECdGpD8wS1PkEAKgLMhDmUQwjlPB6SOAIAQdSEOUEAKAK8gBBBACgC2IQ9a0H//wBxQQJ0aioCACCWAUOamRk/QQAqAuSEPpSSkyG1AUHchD1BACgCvIAQQf8fcUECdGogtQE4AgBB3IQ9QQAoAryAEEEAKALchD5rQf8fcUECdGoqAgAhtgFBACC2AUMAAAAAILYBvEGAgID8B3EbOALghD5DmpkZPyC1AZQhtwEgtwFDAAAAACC3AbxBgICA/AdxGyG4AUMAAAAAQQAqAqSAEEEAKgKogBBBACoC/IQ+lEEAKgKExkdBACoCiMZHkpOUkyG5AUEAILkBQwAAAAAguQG8QYCAgPwHcRs4AviEPiBcQQAqAoSFPpQgXUEAKgKExkcgXkEAKgL4hD6UkpSSIboBQQAgugFDAAAAACC6AbxBgICA/AdxGzgCgIU+QYiFPkEAKAK8gBBB//8AcUECdGpD8wS1PkEAKgKAhT6UQwjlPB6SOAIAIJYBQYiFPkEAKAK8gBBBACgCjIVCa0H//wBxQQJ0aioCAJJDmpkZP0EAKgKYhUOUkyG7AUGQhcIAQQAoAryAEEH/H3FBAnRqILsBOAIAQZCFwgBBACgCvIAQQQAoApCFQ2tB/x9xQQJ0aioCACG8AUEAILwBQwAAAAAgvAG8QYCAgPwHcRs4ApSFQ0OamRk/ILsBlCG9ASC9AUMAAAAAIL0BvEGAgID8B3EbIb4BQwAAAABBACoCpIAQQQAqAqiAEEEAKgKwhUOUQQAqAtTFR0EAKgLYxUeSk5STIb8BQQAgvwFDAAAAACC/AbxBgICA/AdxGzgCrIVDIGVBACoCuIVDlCBmQQAqAtTFRyBnQQAqAqyFQ5SSlJIhwAFBACDAAUMAAAAAIMABvEGAgID8B3EbOAK0hUNBvIXDAEEAKAK8gBBB//8AcUECdGpD8wS1PkEAKgK0hUOUQwjlPB6SOAIAQbyFwwBBACgCvIAQQQAoAsCFR2tB//8AcUECdGoqAgAglgGSQ5qZGT9BACoCzMVHlJMhwQFBxIXHAEEAKAK8gBBB/w9xQQJ0aiDBATgCAEHEhccAQQAoAryAEEEAKALExUdrQf8PcUECdGoqAgAhwgFBACDCAUMAAAAAIMIBvEGAgID8B3EbOALIxUdDmpkZPyDBAZQhwwEgwwFDAAAAACDDAbxBgICA/AdxGyHEASDEASC+AZIhxQEgsgEguAEgxQGSkiHGAUEAKgLgwh1BACoClMMmQQAqAsjDK0EAKgL8wzRBACoCsIQ5QQAqAuSEPkEAKgKYhUNBACoCzMVHIJoBIKABIKYBIKwBIMYBkpKSkpKSkpKSkpKSIccBQQAgxwFDAAAAACDHAbxBgICA/AdxGzgC0MVHQQAqArCEOUEAKgLkhD5BACoCmIVDQQAqAszFRyDGAZKSkpJBACoC4MIdQQAqApTDJkEAKgLIwytBACoC/MM0IJoBIKABIKwBIKYBkpKSkpKSkpMhyAFBACDIAUMAAAAAIMgBvEGAgID8B3EbOALcxUcguAEgsgGSIckBQQAqAsjDK0EAKgL8wzRBACoCmIVDQQAqAszFRyCmASCsASDFAZKSkpKSkkEAKgLgwh1BACoClMMmQQAqArCEOUEAKgLkhD4gmgEgoAEgyQGSkpKSkpKTIcoBQQAgygFDAAAAACDKAbxBgICA/AdxGzgC6MVHQQAqAuDCHUEAKgKUwyZBACoCmIVDQQAqAszFRyCaASCgASDFAZKSkpKSkkEAKgLIwytBACoC/MM0QQAqArCEOUEAKgLkhD4gpgEgrAEgyQGSkpKSkpKTIcsBQQAgywFDAAAAACDLAbxBgICA/AdxGzgC9MVHIMQBILgBkiHMASC+ASCyAZIhzQFBACoClMMmQQAqAvzDNEEAKgLkhD5BACoCzMVHIKABIKwBIMwBkpKSkpKSQQAqAuDCHUEAKgLIwytBACoCsIQ5QQAqApiFQyCaASCmASDNAZKSkpKSkpMhzgFBACDOAUMAAAAAIM4BvEGAgID8B3EbOAKAxkdBACoC4MIdQQAqAsjDK0EAKgLkhD5BACoCzMVHIJoBIKYBIMwBkpKSkpKSQQAqApTDJkEAKgL8wzRBACoCsIQ5QQAqApiFQyCgASCsASDNAZKSkpKSkpMhzwFBACDPAUMAAAAAIM8BvEGAgID8B3EbOAKMxkcgxAEgsgGSIdABIL4BILgBkiHRAUEAKgLgwh1BACoC/MM0QQAqArCEOUEAKgLMxUcgmgEgrAEg0AGSkpKSkpJBACoClMMmQQAqAsjDK0EAKgLkhD5BACoCmIVDIKABIKYBINEBkpKSkpKSkyHSAUEAINIBQwAAAAAg0gG8QYCAgPwHcRs4ApjGR0EAKgKUwyZBACoCyMMrQQAqArCEOUEAKgLMxUcgoAEgpgEg0AGSkpKSkpJBACoC4MIdQQAqAvzDNEEAKgLkhD5BACoCmIVDIJoBIKwBINEBkpKSkpKSkyHTAUEAINMBQwAAAAAg0wG8QYCAgPwHcRs4AqTGR0MAAAA/QwAAgD8ga5Mgb5QglQGUlCHUASAEIApqQ6RwvT5BACoC3MVHQQAqAujFR5KUINQBkjgCACAFIApqINQBQ6RwvT5BACoC3MVHQQAqAujFR5OUkjgCAEEAQQAqAqyAEDgCsIAQQQBBACoCtIAQOAK4gBBBAEEAKAK8gBBBAWo2AryAEEEAQQAqAsyAGDgC0IAYQQBBACoC3IAYOALggBhBAEEAKgLkgBg4AuiAGEEAQQAqAvCAGDgC9IAYQQBBACoCjIEYOAKQgRhBAEEAKgKYgRg4ApyBGEEAQQAqAqSBGDgCqIEYQQBBACoCsIEYOAK0gRhBAEEAKgK8gRg4AsCBGEEAQQAqAsyBGDgC0IEYQQBBACgC1IEYNgLYgRhBAEEAKALcgRg2AuCBGEEAQQAoAuSBGDYC6IEYQQBBACoC9IEYOAL4gRhBAEEAKgKEghg4AoiCGEEAQQAqAoyCGjgCkIIaQQBBACoClIIaOAKYghpBAEEAKgKcghw4AqCCHEEAQQAqAqSCHDgCqIIcQQBBACoCrIIcOAKwghxBAEEAKgK0ghw4AriCHEEAQQAqAryCHDgCwIIcQQBBACoCxIIcOALIghxBAEEAKgLMghw4AtCCHEEAQQAqAtzCHTgC4MIdQQBBACoC9MIdOAL4wh1BAEEAKgL8wh04AoDDHUEAQQAqApDDJjgClMMmQQBBACoCqMMmOAKswyZBAEEAKgKwwyY4ArTDJkEAQQAqAsTDKzgCyMMrQQBBACoC3MMrOALgwytBAEEAKgLkwys4AujDK0EAQQAqAvjDNDgC/MM0QQBBACoCkMQ0OAKUxDRBAEEAKgKYxDQ4ApzENEEAQQAqAqyEOTgCsIQ5QQBBACoCxIQ5OALIhDlBAEEAKgLMhDk4AtCEOUEAQQAqAuCEPjgC5IQ+QQBBACoC+IQ+OAL8hD5BAEEAKgKAhT44AoSFPkEAQQAqApSFQzgCmIVDQQBBACoCrIVDOAKwhUNBAEEAKgK0hUM4AriFQ0EAQQAqAsjFRzgCzMVHQQBBACoC1MVHOALYxUdBAEEAKgLQxUc4AtTFR0EAQQAqAuDFRzgC5MVHQQBBACoC3MVHOALgxUdBAEEAKgLsxUc4AvDFR0EAQQAqAujFRzgC7MVHQQBBACoC+MVHOAL8xUdBAEEAKgL0xUc4AvjFR0EAQQAqAoTGRzgCiMZHQQBBACoCgMZHOAKExkdBAEEAKgKQxkc4ApTGR0EAQQAqAozGRzgCkMZHQQBBACoCnMZHOAKgxkdBAEEAKgKYxkc4ApzGR0EAQQAqAqjGRzgCrMZHQQBBACoCpMZHOAKoxkcgCkEEaiEKIApBBCABbEgEQAwCDAELCwsLhYCAgAAAQQAPC4WAgIAAAEECDwuLgICAAAAgACABaioCAA8LioCAgAAAQQAoAoCAEA8LjoCAgAAAIAAgARAFIAAgARAOC6GegIAAAUt/QQAhAUEAIQJBACEDQQAhBEEAIQVBACEGQQAhB0EAIQhBACEJQQAhCkEAIQtBACEMQQAhDUEAIQ5BACEPQQAhEEEAIRFBACESQQAhE0EAIRRBACEVQQAhFkEAIRdBACEYQQAhGUEAIRpBACEbQQAhHEEAIR1BACEeQQAhH0EAISBBACEhQQAhIkEAISNBACEkQQAhJUEAISZBACEnQQAhKEEAISlBACEqQQAhK0EAISxBACEtQQAhLkEAIS9BACEwQQAhMUEAITJBACEzQQAhNEEAITVBACE2QQAhN0EAIThBACE5QQAhOkEAITtBACE8QQAhPUEAIT5BACE/QQAhQEEAIUFBACFCQQAhQ0EAIURBACFFQQAhRkEAIUdBACFIQQAhSUEAIUpBACFLQQAhAQNAAkBBrIAQIAFBAnRqQwAAAAA4AgAgAUEBaiEBIAFBAkgEQAwCDAELCwtBACECA0ACQEG0gBAgAkECdGpDAAAAADgCACACQQFqIQIgAkECSARADAIMAQsLC0EAQQA2AryAEEEAIQMDQAJAQcCAECADQQJ0akMAAAAAOAIAIANBAWohAyADQYCAAkgEQAwCDAELCwtBACEEA0ACQEHMgBggBEECdGpDAAAAADgCACAEQQFqIQQgBEECSARADAIMAQsLC0EAIQUDQAJAQdyAGCAFQQJ0akMAAAAAOAIAIAVBAWohBSAFQQJIBEAMAgwBCwsLQQAhBgNAAkBB5IAYIAZBAnRqQwAAAAA4AgAgBkEBaiEGIAZBAkgEQAwCDAELCwtBACEHA0ACQEHwgBggB0ECdGpDAAAAADgCACAHQQFqIQcgB0ECSARADAIMAQsLC0EAIQgDQAJAQYyBGCAIQQJ0akMAAAAAOAIAIAhBAWohCCAIQQJIBEAMAgwBCwsLQQAhCQNAAkBBmIEYIAlBAnRqQwAAAAA4AgAgCUEBaiEJIAlBAkgEQAwCDAELCwtBACEKA0ACQEGkgRggCkECdGpDAAAAADgCACAKQQFqIQogCkECSARADAIMAQsLC0EAIQsDQAJAQbCBGCALQQJ0akMAAAAAOAIAIAtBAWohCyALQQJIBEAMAgwBCwsLQQAhDANAAkBBvIEYIAxBAnRqQwAAAAA4AgAgDEEBaiEMIAxBAkgEQAwCDAELCwtBACENA0ACQEHMgRggDUECdGpDAAAAADgCACANQQFqIQ0gDUECSARADAIMAQsLC0EAIQ4DQAJAQdSBGCAOQQJ0akEANgIAIA5BAWohDiAOQQJIBEAMAgwBCwsLQQAhDwNAAkBB3IEYIA9BAnRqQQA2AgAgD0EBaiEPIA9BAkgEQAwCDAELCwtBACEQA0ACQEHkgRggEEECdGpBADYCACAQQQFqIRAgEEECSARADAIMAQsLC0EAIREDQAJAQfSBGCARQQJ0akMAAAAAOAIAIBFBAWohESARQQJIBEAMAgwBCwsLQQAhEgNAAkBBhIIYIBJBAnRqQwAAAAA4AgAgEkEBaiESIBJBAkgEQAwCDAELCwtBACETA0ACQEGMghggE0ECdGpDAAAAADgCACATQQFqIRMgE0GAwABIBEAMAgwBCwsLQQAhFANAAkBBjIIaIBRBAnRqQwAAAAA4AgAgFEEBaiEUIBRBAkgEQAwCDAELCwtBACEVA0ACQEGUghogFUECdGpDAAAAADgCACAVQQFqIRUgFUECSARADAIMAQsLC0EAIRYDQAJAQZyCGiAWQQJ0akMAAAAAOAIAIBZBAWohFiAWQYDAAEgEQAwCDAELCwtBACEXA0ACQEGcghwgF0ECdGpDAAAAADgCACAXQQFqIRcgF0ECSARADAIMAQsLC0EAIRgDQAJAQaSCHCAYQQJ0akMAAAAAOAIAIBhBAWohGCAYQQJIBEAMAgwBCwsLQQAhGQNAAkBBrIIcIBlBAnRqQwAAAAA4AgAgGUEBaiEZIBlBAkgEQAwCDAELCwtBACEaA0ACQEG0ghwgGkECdGpDAAAAADgCACAaQQFqIRogGkECSARADAIMAQsLC0EAIRsDQAJAQbyCHCAbQQJ0akMAAAAAOAIAIBtBAWohGyAbQQJIBEAMAgwBCwsLQQAhHANAAkBBxIIcIBxBAnRqQwAAAAA4AgAgHEEBaiEcIBxBAkgEQAwCDAELCwtBACEdA0ACQEHMghwgHUECdGpDAAAAADgCACAdQQFqIR0gHUECSARADAIMAQsLC0EAIR4DQAJAQdSCHCAeQQJ0akMAAAAAOAIAIB5BAWohHiAeQYAgSARADAIMAQsLC0EAIR8DQAJAQdiCHSAfQQJ0akMAAAAAOAIAIB9BAWohHyAfQYAQSARADAIMAQsLC0EAISADQAJAQdzCHSAgQQJ0akMAAAAAOAIAICBBAWohICAgQQJIBEAMAgwBCwsLQQAhIQNAAkBB9MIdICFBAnRqQwAAAAA4AgAgIUEBaiEhICFBAkgEQAwCDAELCwtBACEiA0ACQEH8wh0gIkECdGpDAAAAADgCACAiQQFqISIgIkECSARADAIMAQsLC0EAISMDQAJAQYTDHSAjQQJ0akMAAAAAOAIAICNBAWohIyAjQYCAAkgEQAwCDAELCwtBACEkA0ACQEGMwyUgJEECdGpDAAAAADgCACAkQQFqISQgJEGAIEgEQAwCDAELCwtBACElA0ACQEGQwyYgJUECdGpDAAAAADgCACAlQQFqISUgJUECSARADAIMAQsLC0EAISYDQAJAQajDJiAmQQJ0akMAAAAAOAIAICZBAWohJiAmQQJIBEAMAgwBCwsLQQAhJwNAAkBBsMMmICdBAnRqQwAAAAA4AgAgJ0EBaiEnICdBAkgEQAwCDAELCwtBACEoA0ACQEG4wyYgKEECdGpDAAAAADgCACAoQQFqISggKEGAgAFIBEAMAgwBCwsLQQAhKQNAAkBBwMMqIClBAnRqQwAAAAA4AgAgKUEBaiEpIClBgCBIBEAMAgwBCwsLQQAhKgNAAkBBxMMrICpBAnRqQwAAAAA4AgAgKkEBaiEqICpBAkgEQAwCDAELCwtBACErA0ACQEHcwysgK0ECdGpDAAAAADgCACArQQFqISsgK0ECSARADAIMAQsLC0EAISwDQAJAQeTDKyAsQQJ0akMAAAAAOAIAICxBAWohLCAsQQJIBEAMAgwBCwsLQQAhLQNAAkBB7MMrIC1BAnRqQwAAAAA4AgAgLUEBaiEtIC1BgIACSARADAIMAQsLC0EAIS4DQAJAQfTDMyAuQQJ0akMAAAAAOAIAIC5BAWohLiAuQYAgSARADAIMAQsLC0EAIS8DQAJAQfjDNCAvQQJ0akMAAAAAOAIAIC9BAWohLyAvQQJIBEAMAgwBCwsLQQAhMANAAkBBkMQ0IDBBAnRqQwAAAAA4AgAgMEEBaiEwIDBBAkgEQAwCDAELCwtBACExA0ACQEGYxDQgMUECdGpDAAAAADgCACAxQQFqITEgMUECSARADAIMAQsLC0EAITIDQAJAQaDENCAyQQJ0akMAAAAAOAIAIDJBAWohMiAyQYCAAUgEQAwCDAELCwtBACEzA0ACQEGoxDggM0ECdGpDAAAAADgCACAzQQFqITMgM0GAEEgEQAwCDAELCwtBACE0A0ACQEGshDkgNEECdGpDAAAAADgCACA0QQFqITQgNEECSARADAIMAQsLC0EAITUDQAJAQcSEOSA1QQJ0akMAAAAAOAIAIDVBAWohNSA1QQJIBEAMAgwBCwsLQQAhNgNAAkBBzIQ5IDZBAnRqQwAAAAA4AgAgNkEBaiE2IDZBAkgEQAwCDAELCwtBACE3A0ACQEHUhDkgN0ECdGpDAAAAADgCACA3QQFqITcgN0GAgAFIBEAMAgwBCwsLQQAhOANAAkBB3IQ9IDhBAnRqQwAAAAA4AgAgOEEBaiE4IDhBgCBIBEAMAgwBCwsLQQAhOQNAAkBB4IQ+IDlBAnRqQwAAAAA4AgAgOUEBaiE5IDlBAkgEQAwCDAELCwtBACE6A0ACQEH4hD4gOkECdGpDAAAAADgCACA6QQFqITogOkECSARADAIMAQsLC0EAITsDQAJAQYCFPiA7QQJ0akMAAAAAOAIAIDtBAWohOyA7QQJIBEAMAgwBCwsLQQAhPANAAkBBiIU+IDxBAnRqQwAAAAA4AgAgPEEBaiE8IDxBgIABSARADAIMAQsLC0EAIT0DQAJAQZCFwgAgPUECdGpDAAAAADgCACA9QQFqIT0gPUGAIEgEQAwCDAELCwtBACE+A0ACQEGUhcMAID5BAnRqQwAAAAA4AgAgPkEBaiE+ID5BAkgEQAwCDAELCwtBACE/A0ACQEGshcMAID9BAnRqQwAAAAA4AgAgP0EBaiE/ID9BAkgEQAwCDAELCwtBACFAA0ACQEG0hcMAIEBBAnRqQwAAAAA4AgAgQEEBaiFAIEBBAkgEQAwCDAELCwtBACFBA0ACQEG8hcMAIEFBAnRqQwAAAAA4AgAgQUEBaiFBIEFBgIABSARADAIMAQsLC0EAIUIDQAJAQcSFxwAgQkECdGpDAAAAADgCACBCQQFqIUIgQkGAEEgEQAwCDAELCwtBACFDA0ACQEHIxccAIENBAnRqQwAAAAA4AgAgQ0EBaiFDIENBAkgEQAwCDAELCwtBACFEA0ACQEHQxccAIERBAnRqQwAAAAA4AgAgREEBaiFEIERBA0gEQAwCDAELCwtBACFFA0ACQEHcxccAIEVBAnRqQwAAAAA4AgAgRUEBaiFFIEVBA0gEQAwCDAELCwtBACFGA0ACQEHoxccAIEZBAnRqQwAAAAA4AgAgRkEBaiFGIEZBA0gEQAwCDAELCwtBACFHA0ACQEH0xccAIEdBAnRqQwAAAAA4AgAgR0EBaiFHIEdBA0gEQAwCDAELCwtBACFIA0ACQEGAxscAIEhBAnRqQwAAAAA4AgAgSEEBaiFIIEhBA0gEQAwCDAELCwtBACFJA0ACQEGMxscAIElBAnRqQwAAAAA4AgAgSUEBaiFJIElBA0gEQAwCDAELCwtBACFKA0ACQEGYxscAIEpBAnRqQwAAAAA4AgAgSkEBaiFKIEpBA0gEQAwCDAELCwtBACFLA0ACQEGkxscAIEtBAnRqQwAAAAA4AgAgS0EBaiFLIEtBA0gEQAwCDAELCwsL7I+AgAAAQQAgATYCgIAQQQBDAIA7SEMAAIA/QQAoAoCAELKXljgChIAQQQBDHUMTR0EAKgKEgBCVEAA4AoiAEEEAQ1JFYT5BACoChIAQlEMAAAA/ko44AoyAEEEAQwAAAABDVQzdQEEAKgKMgBCUk0EAKgKEgBCVOAKQgBBBAEMAAAA/QQAqApCAEJQ4ApSAEEEAQ6uqqj5BACoCkIAQlDgCnIAQQQBDAACAP0NjFB1EQQAqAoSAEJUQBJU4AqCAEEEAQwAAgD9BACoCoIAQQwAAgD+SlTgCpIAQQQBDAACAP0EAKgKggBCTOAKogBBBAEPWp5w8QQAqAoSAEJRDAAAAP5KOOALAgBhBAEMAAIBGQwAAAABBACoCjIAQQQAqAsCAGJOXlqg2AsSAGEEAQ83MzD1BACoChIAQlDgC2IAYQQBDAAAgQUEAKgKEgBCVOALsgBhBAEMAAIA/Q3xZxEVBACoChIAQlRAElTgC+IAYQQBDAACAP0EAKgL4gBhDAACAP5KVOAL8gBhBAEMAAIA/QQAqAviAGJM4AoCBGEEAQwAAAD9BACoChIAQlDgChIEYQQBDbxKDOkEAKgKEgRiXOAKggRhBAEOamZk+QQAqAoSAEJQ4AqyBGEEAQwAAoEBBACoChIAQlTgCuIEYQQBDAACAP0EAKgKggRiVOALEgRhBAEMAAABAQQAqAoSAEJU4AuyBGEEAQwAAgD9DAACAP0MAUMNHQwAAoEBBACoChIAQlRAClZM4AvCBGEEAQwAAgD9BACoChIAQlTgC/IEYQQBDAAAARkMAAAAAQwrXozxBACoChIAQlJeWqDYC1IIdQQBDAACAREMAAAAAQQAqAsCAGEMAAIC/kpeWqDYC2MIdQQBDOIeDPkEAKgKEgBCUQwAAAD+SjjgC5MIdQQBDAAAAAENVDN1AQQAqAuTCHZSTQQAqAoSAEJU4AujCHUEAQwAAAD9BACoC6MIdlDgC7MIdQQBDq6qqPkEAKgLowh2UOALwwh1BAEN16d88QQAqAoSAEJRDAAAAP5KOOAKEwyVBAEMAAIBGQwAAAABBACoC5MIdQQAqAoTDJZOXlqg2AojDJUEAQwAAAEVDAAAAAEEAKgKEwyVDAACAv5KXlqg2AozDJkEAQxTrRD5BACoChIAQlEMAAAA/ko44ApjDJkEAQwAAAABDVQzdQEEAKgKYwyaUk0EAKgKEgBCVOAKcwyZBAEMAAAA/QQAqApzDJpQ4AqDDJkEAQ6uqqj5BACoCnMMmlDgCpMMmQQBDrvPvPEEAKgKEgBCUQwAAAD+SjjgCuMMqQQBDAAAARkMAAAAAQQAqApjDJkEAKgK4wyqTl5aoNgK8wypBAEMAAABFQwAAAABBACoCuMMqQwAAgL+Sl5aoNgLAwytBAEM3cFc+QQAqAoSAEJRDAAAAP5KOOALMwytBAEMAAAAAQ1UM3UBBACoCzMMrlJNBACoChIAQlTgC0MMrQQBDAAAAP0EAKgLQwyuUOALUwytBAEOrqqo+QQAqAtDDK5Q4AtjDK0EAQ40OyDxBACoChIAQlEMAAAA/ko44AuzDM0EAQwAAgEZDAAAAAEEAKgLMwytBACoC7MMzk5eWqDYC8MMzQQBDAAAARUMAAAAAQQAqAuzDM0MAAIC/kpeWqDYC9MM0QQBDAAAAPkEAKgKEgBCUQwAAAD+SjjgCgMQ0QQBDAAAAAENVDN1AQQAqAoDENJSTQQAqAoSAEJU4AoTENEEAQwAAAD9BACoChMQ0lDgCiMQ0QQBDq6qqPkEAKgKExDSUOAKMxDRBAEPxflw8QQAqAoSAEJRDAAAAP5KOOAKgxDhBAEMAAABGQwAAAABBACoCgMQ0QQAqAqDEOJOXlqg2AqTEOEEAQwAAgERDAAAAAEEAKgKgxDhDAACAv5KXlqg2AqiEOUEAQ7TnAj5BACoChIAQlEMAAAA/ko44ArSEOUEAQwAAAABDVQzdQEEAKgK0hDmUk0EAKgKEgBCVOAK4hDlBAEMAAAA/QQAqAriEOZQ4AryEOUEAQ6uqqj5BACoCuIQ5lDgCwIQ5QQBDMnMBPUEAKgKEgBCUQwAAAD+SjjgC1IQ9QQBDAAAARkMAAAAAQQAqArSEOUEAKgLUhD2Tl5aoNgLYhD1BAEMAAABFQwAAAABBACoC1IQ9QwAAgL+Sl5aoNgLchD5BAEP35zI+QQAqAoSAEJRDAAAAP5KOOALohD5BAEMAAAAAQ1UM3UBBACoC6IQ+lJNBACoChIAQlTgC7IQ+QQBDAAAAP0EAKgLshD6UOALwhD5BAEOrqqo+QQAqAuyEPpQ4AvSEPkEAQyuhuzxBACoChIAQlEMAAAA/ko44AoiFQkEAQwAAAEZDAAAAAEEAKgLohD5BACoCiIVCk5eWqDYCjIVCQQBDAAAARUMAAAAAQQAqAoiFQkMAAIC/kpeWqDYCkIVDQQBD2c0cPkEAKgKEgBCUQwAAAD+SjjgCnIVDQQBDAAAAAENVDN1AQQAqApyFQ5STQQAqAoSAEJU4AqCFQ0EAQwAAAD9BACoCoIVDlDgCpIVDQQBDq6qqPkEAKgKghUOUOAKohUNBAEOorKY8QQAqAoSAEJRDAAAAP5KOOAK8hUdBAEMAAABGQwAAAABBACoCnIVDQQAqAryFR5OXlqg2AsCFR0EAQwAAgERDAAAAAEEAKgK8hUdDAACAv5KXlqg2AsTFRwuQgICAAAAgACABEA0gABAPIAAQDAvWgICAAABBAEPsUTg/OAKYgBBBAEPNzEw+OALIgBhBAEMAAAAAOALUgBhBAEMAANxDOAKIgRhBAEOPwnU/OAKUgRhBAEMK16M8OALIgRhBAEMAAIBAOAKAghgLjYCAgAAAIAEgACAAIAFIGw8LjYCAgAAAIAAgASAAIAFIGw8LjICAgAAAIAAgAWogAjgCAAsLnJ2AgAABAEEAC5UdeyJuYW1lIjoiRmx1dGUiLCJmaWxlbmFtZSI6IkZsdXRlIiwidmVyc2lvbiI6IjIuMTEuNSIsImNvbXBpbGVfb3B0aW9ucyI6Ii1zY2FsIC1mdHogMiIsImxpYnJhcnlfbGlzdCI6WyIvdXNyL2xvY2FsL3NoYXJlL2ZhdXN0L3N0ZGZhdXN0LmxpYiIsIi91c3IvbG9jYWwvc2hhcmUvZmF1c3QvZW52ZWxvcGVzLmxpYiIsIi91c3IvbG9jYWwvc2hhcmUvZmF1c3QvYmFzaWNzLmxpYiIsIi91c3IvbG9jYWwvc2hhcmUvZmF1c3QvbWF0aHMubGliIiwiL3Vzci9sb2NhbC9zaGFyZS9mYXVzdC9zaWduYWxzLmxpYiIsIi91c3IvbG9jYWwvc2hhcmUvZmF1c3Qvbm9pc2VzLmxpYiIsIi91c3IvbG9jYWwvc2hhcmUvZmF1c3Qvb3NjaWxsYXRvcnMubGliIiwiL3Vzci9sb2NhbC9zaGFyZS9mYXVzdC9pbnN0cnVtZW50cy5saWIiLCIvdXNyL2xvY2FsL3NoYXJlL2ZhdXN0L2RlbGF5cy5saWIiLCIvdXNyL2xvY2FsL3NoYXJlL2ZhdXN0L2ZpbHRlcnMubGliIiwiL3Vzci9sb2NhbC9zaGFyZS9mYXVzdC9yZXZlcmJzLmxpYiIsIi91c3IvbG9jYWwvc2hhcmUvZmF1c3Qvcm91dGVzLmxpYiJdLCJpbmNsdWRlX3BhdGhuYW1lcyI6WyIuIiwiL3Vzci9sb2NhbC9zaGFyZS9mYXVzdCIsIi91c3Ivc2hhcmUvZmF1c3QiXSwic2l6ZSI6IjExNzIyODAiLCJpbnB1dHMiOiIwIiwib3V0cHV0cyI6IjIiLCJtZXRhIjpbeyJhdXRob3IiOiJSb21haW4gTWljaG9uIChybWljaG9uQGNjcm1hLnN0YW5mb3JkLmVkdSkifSx7ImJhc2ljcy5saWIvbmFtZSI6IkZhdXN0IEJhc2ljIEVsZW1lbnQgTGlicmFyeSJ9LHsiYmFzaWNzLmxpYi92ZXJzaW9uIjoiMC4wIn0seyJjb3B5cmlnaHQiOiJSb21haW4gTWljaG9uIn0seyJkZWxheXMubGliL25hbWUiOiJGYXVzdCBEZWxheSBMaWJyYXJ5In0seyJkZWxheXMubGliL3ZlcnNpb24iOiIwLjAifSx7ImRlc2NyaXB0aW9uIjoiTm9ubGluZWFyIFdhdmVHdWlkZSBGbHV0ZSJ9LHsiZW52ZWxvcGVzLmxpYi9hdXRob3IiOiJHUkFNRSJ9LHsiZW52ZWxvcGVzLmxpYi9jb3B5cmlnaHQiOiJHUkFNRSJ9LHsiZW52ZWxvcGVzLmxpYi9saWNlbnNlIjoiTEdQTCB3aXRoIGV4Y2VwdGlvbiJ9LHsiZW52ZWxvcGVzLmxpYi9uYW1lIjoiRmF1c3QgRW52ZWxvcGUgTGlicmFyeSJ9LHsiZW52ZWxvcGVzLmxpYi92ZXJzaW9uIjoiMC4wIn0seyJmaWxlbmFtZSI6IkZsdXRlIn0seyJmaWx0ZXJzLmxpYi9uYW1lIjoiRmF1c3QgRmlsdGVycyBMaWJyYXJ5In0seyJmaWx0ZXJzLmxpYi92ZXJzaW9uIjoiMC4wIn0seyJpbnN0cnVtZW50cy5saWIvYXV0aG9yIjoiUm9tYWluIE1pY2hvbiAocm1pY2hvbkBjY3JtYS5zdGFuZm9yZC5lZHUpIn0seyJpbnN0cnVtZW50cy5saWIvY29weXJpZ2h0IjoiUm9tYWluIE1pY2hvbiJ9LHsiaW5zdHJ1bWVudHMubGliL2xpY2VuY2UiOiJTVEstNC4zIn0seyJpbnN0cnVtZW50cy5saWIvbmFtZSI6IkZhdXN0LVNUSyBUb29scyBMaWJyYXJ5In0seyJpbnN0cnVtZW50cy5saWIvdmVyc2lvbiI6IjEuMCJ9LHsibGljZW5jZSI6IlNUSy00LjMifSx7Im1hdGhzLmxpYi9hdXRob3IiOiJHUkFNRSJ9LHsibWF0aHMubGliL2NvcHlyaWdodCI6IkdSQU1FIn0seyJtYXRocy5saWIvbGljZW5zZSI6IkxHUEwgd2l0aCBleGNlcHRpb24ifSx7Im1hdGhzLmxpYi9uYW1lIjoiRmF1c3QgTWF0aCBMaWJyYXJ5In0seyJtYXRocy5saWIvdmVyc2lvbiI6IjIuMSJ9LHsibmFtZSI6IkZsdXRlIn0seyJub2lzZXMubGliL25hbWUiOiJGYXVzdCBOb2lzZSBHZW5lcmF0b3IgTGlicmFyeSJ9LHsibm9pc2VzLmxpYi92ZXJzaW9uIjoiMC4wIn0seyJvc2NpbGxhdG9ycy5saWIvbmFtZSI6IkZhdXN0IE9zY2lsbGF0b3IgTGlicmFyeSJ9LHsib3NjaWxsYXRvcnMubGliL3ZlcnNpb24iOiIwLjAifSx7InJldmVyYnMubGliL25hbWUiOiJGYXVzdCBSZXZlcmIgTGlicmFyeSJ9LHsicmV2ZXJicy5saWIvdmVyc2lvbiI6IjAuMCJ9LHsicm91dGVzLmxpYi9uYW1lIjoiRmF1c3QgU2lnbmFsIFJvdXRpbmcgTGlicmFyeSJ9LHsicm91dGVzLmxpYi92ZXJzaW9uIjoiMC4wIn0seyJzaWduYWxzLmxpYi9uYW1lIjoiRmF1c3QgU2lnbmFsIFJvdXRpbmcgTGlicmFyeSJ9LHsic2lnbmFscy5saWIvdmVyc2lvbiI6IjAuMCJ9LHsidmVyc2lvbiI6IjEuMCJ9XSwidWkiOlt7InR5cGUiOiJ2Z3JvdXAiLCJsYWJlbCI6IkZsdXRlIiwiaXRlbXMiOlt7InR5cGUiOiJoc2xpZGVyIiwibGFiZWwiOiJPTi9PRkYgKEFTUiBFbnZlbG9wZSkiLCJhZGRyZXNzIjoiL0ZsdXRlL09OL09GRl8oQVNSX0VudmVsb3BlKSIsImluZGV4IjoiMzkzMzAwIiwibWV0YSI6W3siMCI6IiJ9XSwiaW5pdCI6IjAiLCJtaW4iOiIwIiwibWF4IjoiMSIsInN0ZXAiOiIxIn0seyJ0eXBlIjoiaHNsaWRlciIsImxhYmVsIjoiRnJlcXVlbmN5IiwiYWRkcmVzcyI6Ii9GbHV0ZS9GcmVxdWVuY3kiLCJpbmRleCI6IjM5MzM1MiIsIm1ldGEiOlt7IjEiOiIifSx7ImFjYyI6IjEgMSAtMTAgMCAxMCJ9XSwiaW5pdCI6IjQ0MCIsIm1pbiI6IjI0NyIsIm1heCI6IjEyMDAiLCJzdGVwIjoiMSJ9LHsidHlwZSI6ImhzbGlkZXIiLCJsYWJlbCI6IlByZXNzdXJlIiwiYWRkcmVzcyI6Ii9GbHV0ZS9QcmVzc3VyZSIsImluZGV4IjoiMzkzMzY0IiwibWV0YSI6W3siMiI6IiJ9LHsiYWNjIjoiMSAwIC0xMCAwIDEwIn0seyJzdHlsZSI6Imtub2IifV0sImluaXQiOiIwLjk2IiwibWluIjoiMC4yIiwibWF4IjoiMC45OSIsInN0ZXAiOiIwLjAxIn0seyJ0eXBlIjoiaHNsaWRlciIsImxhYmVsIjoiQnJlYXRoIE5vaXNlIiwiYWRkcmVzcyI6Ii9GbHV0ZS9CcmVhdGhfTm9pc2UiLCJpbmRleCI6IjM5MzQxNiIsIm1ldGEiOlt7IjMiOiIifSx7ImFjYyI6IjIgMCAtMTAgMCAxMCJ9LHsic3R5bGUiOiJrbm9iIn1dLCJpbml0IjoiMC4wMiIsIm1pbiI6IjAuMDEiLCJtYXgiOiIwLjIiLCJzdGVwIjoiMC4wMSJ9LHsidHlwZSI6ImhzbGlkZXIiLCJsYWJlbCI6IlZpYnJhdG8gRnJlcSAoVmlicmF0byBFbnZlbG9wZSkiLCJhZGRyZXNzIjoiL0ZsdXRlL1ZpYnJhdG9fRnJlcV8oVmlicmF0b19FbnZlbG9wZSkiLCJpbmRleCI6IjM5MzQ3MiIsIm1ldGEiOlt7IjQiOiIifSx7ImFjYyI6IjAgMSAtMTAgMCAxMCJ9LHsic3R5bGUiOiJrbm9iIn0seyJ1bml0IjoiSHoifV0sImluaXQiOiI0IiwibWluIjoiMC41IiwibWF4IjoiOCIsInN0ZXAiOiIwLjEifSx7InR5cGUiOiJoZ3JvdXAiLCJsYWJlbCI6IlJldmVyYiIsIm1ldGEiOlt7IjUiOiIifV0sIml0ZW1zIjpbeyJ0eXBlIjoiaHNsaWRlciIsImxhYmVsIjoiUmV2ZXJiZXJhdGlvbiBWb2x1bWUgKEluc3RyUmV2ZXJiKSIsImFkZHJlc3MiOiIvRmx1dGUvUmV2ZXJiL1JldmVyYmVyYXRpb25fVm9sdW1lXyhJbnN0clJldmVyYikiLCJpbmRleCI6IjM5MzI4OCIsIm1ldGEiOlt7IjEiOiIifSx7ImFjYyI6IjEgMSAtMzAgMCAxMyJ9LHsic3R5bGUiOiJrbm9iIn1dLCJpbml0IjoiMC4yIiwibWluIjoiMC4wNSIsIm1heCI6IjEiLCJzdGVwIjoiMC4wMSJ9LHsidHlwZSI6ImhzbGlkZXIiLCJsYWJlbCI6IlJldmVyYmVyYXRpb24gUm9vbSBTaXplIChJbnN0clJldmVyYikiLCJhZGRyZXNzIjoiL0ZsdXRlL1JldmVyYi9SZXZlcmJlcmF0aW9uX1Jvb21fU2l6ZV8oSW5zdHJSZXZlcmIpIiwiaW5kZXgiOiIyNjIxNjgiLCJtZXRhIjpbeyIyIjoiIn0seyJhY2MiOiIxIDEgLTMwIDAgMTMifSx7InN0eWxlIjoia25vYiJ9XSwiaW5pdCI6IjAuNzIiLCJtaW4iOiIwLjA1IiwibWF4IjoiMS43Iiwic3RlcCI6IjAuMDEifV19XX1dfQ=="; }

/*
 faust2wasm: GRAME 2017-2018
*/
 
'use strict';

// Monophonic Faust DSP
class FluteProcessor extends AudioWorkletProcessor {
    
    // JSON parsing functions
    static parse_ui(ui, obj, callback)
    {
        for (var i = 0; i < ui.length; i++) {
            FluteProcessor.parse_group(ui[i], obj, callback);
        }
    }
    
    static parse_group(group, obj, callback)
    {
        if (group.items) {
            FluteProcessor.parse_items(group.items, obj, callback);
        }
    }
    
    static parse_items(items, obj, callback)
    {
        for (var i = 0; i < items.length; i++) {
            callback(items[i], obj, callback);
        }
    }
    
    static parse_item1(item, obj, callback)
    {
        if (item.type === "vgroup"
            || item.type === "hgroup"
            || item.type === "tgroup") {
            FluteProcessor.parse_items(item.items, obj, callback);
        } else if (item.type === "hbargraph"
                   || item.type === "vbargraph") {
            // Nothing
        } else if (item.type === "vslider"
                   || item.type === "hslider"
                   || item.type === "button"
                   || item.type === "checkbox"
                   || item.type === "nentry") {
            obj.push({ name: item.address,
                     defaultValue: item.init,
                     minValue: item.min,
                     maxValue: item.max });
        }
    }
    
    static parse_item2(item, obj, callback)
    {
        if (item.type === "vgroup"
            || item.type === "hgroup"
            || item.type === "tgroup") {
            FluteProcessor.parse_items(item.items, obj, callback);
        } else if (item.type === "hbargraph"
                   || item.type === "vbargraph") {
            // Keep bargraph adresses
            obj.outputs_items.push(item.address);
            obj.pathTable[item.address] = parseInt(item.index);
        } else if (item.type === "soundfile") {
            // Keep soundfile adresses
            obj.soundfile_items.push(item.address);
            obj.pathTable[item.address] = parseInt(item.index);
        } else if (item.type === "vslider"
                   || item.type === "hslider"
                   || item.type === "button"
                   || item.type === "checkbox"
                   || item.type === "nentry") {
            // Keep inputs adresses
            obj.inputs_items.push(item.address);
            obj.pathTable[item.address] = parseInt(item.index);
        }
    }
    
    static b64ToUint6(nChr)
    {
        return nChr > 64 && nChr < 91 ?
        nChr - 65
        : nChr > 96 && nChr < 123 ?
        nChr - 71
        : nChr > 47 && nChr < 58 ?
        nChr + 4
        : nChr === 43 ?
        62
        : nChr === 47 ?
        63
        :
        0;
    }
    
    static atob(sBase64, nBlocksSize)
    {
        if (typeof atob === 'function') {
            return atob(sBase64);
        } else {
            
            var sB64Enc = sBase64.replace(/[^A-Za-z0-9\+\/]/g, "");
            var nInLen = sB64Enc.length;
            var nOutLen = nBlocksSize ? Math.ceil((nInLen * 3 + 1 >> 2) / nBlocksSize) * nBlocksSize : nInLen * 3 + 1 >> 2;
            var taBytes = new Uint8Array(nOutLen);
            
            for (var nMod3, nMod4, nUint24 = 0, nOutIdx = 0, nInIdx = 0; nInIdx < nInLen; nInIdx++) {
                nMod4 = nInIdx & 3;
                nUint24 |= FluteProcessor.b64ToUint6(sB64Enc.charCodeAt(nInIdx)) << 18 - 6 * nMod4;
                if (nMod4 === 3 || nInLen - nInIdx === 1) {
                    for (nMod3 = 0; nMod3 < 3 && nOutIdx < nOutLen; nMod3++, nOutIdx++) {
                        taBytes[nOutIdx] = nUint24 >>> (16 >>> nMod3 & 24) & 255;
                    }
                    nUint24 = 0;
                }
            }
            return taBytes.buffer;
        }
    }
   
    static get parameterDescriptors () 
    {
        // Analyse JSON to generate AudioParam parameters
        var params = [];
        FluteProcessor.parse_ui(JSON.parse(getJSONFlute()).ui, params, FluteProcessor.parse_item1);
        return params;
    }
    
    constructor(options)
    {
        super(options);
      
        this.json_object = JSON.parse(getJSONFlute());

        this.output_handler = function(path, value) { this.port.postMessage({ path: path, value: value }); };
        
        this.ins = null;
        this.outs = null;

        this.dspInChannnels = [];
        this.dspOutChannnels = [];

        this.numIn = parseInt(this.json_object.inputs);
        this.numOut = parseInt(this.json_object.outputs);

        // Memory allocator
        this.ptr_size = 4;
        this.sample_size = 4;
        this.integer_size = 4;
        
        this.Flute_instance = new WebAssembly.Instance(FluteProcessor.wasm_module, FluteProcessor.importObject);
  	   	this.factory = this.Flute_instance.exports;
        this.HEAP = this.Flute_instance.exports.memory.buffer;
        this.HEAP32 = new Int32Array(this.HEAP);
        this.HEAPF32 = new Float32Array(this.HEAP);

        //console.log(this.HEAP);
        //console.log(this.HEAP32);
        //console.log(this.HEAPF32);

        // bargraph
        this.outputs_timer = 5;
        this.outputs_items = [];

        // input items
        this.inputs_items = [];
        
        // soundfile items
        this.soundfile_items = [];

        // Start of HEAP index

        // DSP is placed first with index 0. Audio buffer start at the end of DSP.
        this.audio_heap_ptr = parseInt(this.json_object.size);

        // Setup pointers offset
        this.audio_heap_ptr_inputs = this.audio_heap_ptr;
        this.audio_heap_ptr_outputs = this.audio_heap_ptr_inputs + (this.numIn * this.ptr_size);

        // Setup buffer offset
        this.audio_heap_inputs = this.audio_heap_ptr_outputs + (this.numOut * this.ptr_size);
        this.audio_heap_outputs = this.audio_heap_inputs + (this.numIn * FluteProcessor.buffer_size * this.sample_size);
        
        // Start of DSP memory : DSP is placed first with index 0
        this.dsp = 0;

        this.pathTable = [];
     
        // Send output values to the AudioNode
        this.update_outputs = function ()
        {
            if (this.outputs_items.length > 0 && this.output_handler && this.outputs_timer-- === 0) {
                this.outputs_timer = 5;
                for (var i = 0; i < this.outputs_items.length; i++) {
                    this.output_handler(this.outputs_items[i], this.HEAPF32[this.pathTable[this.outputs_items[i]] >> 2]);
                }
            }
        }
        
        this.loadFile = function (sound_index, sound_ptr, length, sample_rate, channels, buffers)
        {
            /*
             Soundfile layout:
            
                FAUSTFLOAT** fBuffers;
                int fLength;
                int fSampleRate;
                int fChannels;
             
                ===========
                Soundfile struct
                fBuffers[channels]
                fBuffers0
                fBuffers1
                ...
                Soundfile struct
                fBuffers[channels]
                fBuffers0
                fBuffers1
                ...
                ===========
            */
            
            var size_of_soundfile = this.ptr_size + (this.integer_size * 3);  // fBuffers, fLength, fSampleRate, fChannels
            
            //console.log("sound_ptr " + sound_ptr);
            //console.log("size_of_soundfile " + size_of_soundfile);
            
            // end of sounfile
            var end_of_soundfile_ptr = sound_ptr + size_of_soundfile;
            
            this.HEAP32[sound_ptr >> 2] = end_of_soundfile_ptr;
            this.HEAP32[(sound_ptr + 4) >> 2] = length;      // fLength
            this.HEAP32[(sound_ptr + 8) >> 2] = sample_rate; // fSampleRate
            this.HEAP32[(sound_ptr + 12) >> 2] = channels;   // fChannels
            
            //console.log("end_of_soundfile_ptr " + end_of_soundfile_ptr);
            
            // Setup soundfile pointers
            var start_of_soundfile_data_ptr = end_of_soundfile_ptr + this.ptr_size * channels;
            
            for (var i = 0; i < channels; i++) {
                this.HEAP32[(end_of_soundfile_ptr + (i * this.ptr_size)) >> 2] = start_of_soundfile_data_ptr + (i * length * this.sample_size);
            }
            
            // Setup soundfile buffer
            for (var i = 0; i < channels; i++) {
                
                // start of sound buffer
                var start_of_buffer_ptr = start_of_soundfile_data_ptr + (i * length * this.sample_size);
                
                // generate a 440 Hz signal
                for (var j = 0; j < length; j++) {
                    this.HEAPF32[(start_of_buffer_ptr + (j * this.sample_size)) >> 2] = 0.8 * Math.sin((j/length)*2*Math.PI);
                }
            }
            
            // Setup fSoundfile fields in the DSP structure
            //console.log("sound_index " + sound_index);
            //console.log("this.pathTable[this.soundfile_items[sound_index]] " + this.pathTable[this.soundfile_items[sound_index]]);
            
            this.HEAP32[this.pathTable[this.soundfile_items[sound_index]] >> 2] = sound_ptr;
            
            /*
            console.log("start_of_soundfile_data_ptr " + start_of_soundfile_data_ptr);
            console.log("length " + length);
            console.log("channels " + channels);
            console.log("this.sample_size " + this.sample_size);
            console.log("END " + (start_of_soundfile_data_ptr + (channels * length * this.sample_size)));
            */
            
            // End of buffer data;
            return start_of_soundfile_data_ptr + (channels * length * this.sample_size);
        }
        
        this.initAux = function ()
        {
            var i;
            
            if (this.numIn > 0) {
                this.ins = this.audio_heap_ptr_inputs;
                for (i = 0; i < this.numIn; i++) {
                    this.HEAP32[(this.ins >> 2) + i] = this.audio_heap_inputs + ((FluteProcessor.buffer_size * this.sample_size) * i);
                }
                
                // Prepare Ins buffer tables
                var dspInChans = this.HEAP32.subarray(this.ins >> 2, (this.ins + this.numIn * this.ptr_size) >> 2);
                for (i = 0; i < this.numIn; i++) {
                    this.dspInChannnels[i] = this.HEAPF32.subarray(dspInChans[i] >> 2, (dspInChans[i] + FluteProcessor.buffer_size * this.sample_size) >> 2);
                }
            }
            
            if (this.numOut > 0) {
                this.outs = this.audio_heap_ptr_outputs;
                for (i = 0; i < this.numOut; i++) {
                    this.HEAP32[(this.outs >> 2) + i] = this.audio_heap_outputs + ((FluteProcessor.buffer_size * this.sample_size) * i);
                }
                
                // Prepare Out buffer tables
                var dspOutChans = this.HEAP32.subarray(this.outs >> 2, (this.outs + this.numOut * this.ptr_size) >> 2);
                for (i = 0; i < this.numOut; i++) {
                    this.dspOutChannnels[i] = this.HEAPF32.subarray(dspOutChans[i] >> 2, (dspOutChans[i] + FluteProcessor.buffer_size * this.sample_size) >> 2);
                }
            }
            
            // Parse UI
            FluteProcessor.parse_ui(this.json_object.ui, this, FluteProcessor.parse_item2);
            
            /*
            console.log("soundfile_items.length " + this.soundfile_items.length);
            
            // Setup soundfile offset (after audio data)
            this.soundfile_ptr = this.audio_heap_outputs + (this.numOut * FluteProcessor.buffer_size * this.sample_size);
            
            var sound_ptr1 = this.soundfile_ptr;
            var sound_ptr2 = this.loadFile(0, sound_ptr1, 44100/700, 44100, 2, null);
            var sound_ptr3 = this.loadFile(1, sound_ptr2, 44100/500, 44100, 2, null);
            */
             
            // Init DSP
            this.factory.init(this.dsp, sampleRate); // 'sampleRate' is defined in AudioWorkletGlobalScope  
        }

        this.setParamValue = function (path, val)
        {
            this.HEAPF32[this.pathTable[path]] = val;
        }

        this.getParamValue = function (path)
        {
            return this.HEAPF32[this.pathTable[path]];
        }

        // Init resulting DSP
        this.initAux();
    }
    
    process(inputs, outputs, parameters) 
    {
        var input = inputs[0];
        var output = outputs[0];
        
        // Check inputs
        if (this.numIn > 0 && ((input === undefined) || (input[0].length === 0))) {
            //console.log("Process input error");
            return true;
        }
        // Check outputs
        if (this.numOut > 0 && ((output === undefined) || (output[0].length === 0))) {
            //console.log("Process output error");
            return true;
        }
        
        // Copy inputs
        if (input !== undefined) {
            for (var chan = 0; chan < Math.min(this.numIn, input.length) ; ++chan) {
                var dspInput = this.dspInChannnels[chan];
                dspInput.set(input[chan]);
            }
        }
        
        // Update controls (possibly needed for sample accurate control)
        var params = Object.entries(parameters);
        for (var i = 0; i < params.length; i++) {
            this.HEAPF32[this.pathTable[params[i][0]] >> 2] = params[i][1][0];
        }
        
        // Compute
        this.factory.compute(this.dsp, FluteProcessor.buffer_size, this.ins, this.outs);
        
        // Update bargraph
        this.update_outputs();
        
        // Copy outputs
        if (output !== undefined) {
            for (var chan = 0; chan < Math.min(this.numOut, output.length); ++chan) {
                var dspOutput = this.dspOutChannnels[chan];
                output[chan].set(dspOutput);
            }
        }
        
        return true;
    }
}

// Globals

FluteProcessor.buffer_size = 128;

FluteProcessor.importObject = {
    env: {
        memoryBase: 0,
        tableBase: 0,
            
        // Integer version
        _abs: Math.abs,
        
        // Float version
        _acosf: Math.acos,
        _asinf: Math.asin,
        _atanf: Math.atan,
        _atan2f: Math.atan2,
        _ceilf: Math.ceil,
        _cosf: Math.cos,
        _expf: Math.exp,
        _floorf: Math.floor,
        _fmodf: function(x, y) { return x % y; },
        _logf: Math.log,
        _log10f: Math.log10,
        _max_f: Math.max,
        _min_f: Math.min,
        _remainderf: function(x, y) { return x - Math.round(x/y) * y; },
        _powf: Math.pow,
        _roundf: Math.fround,
        _sinf: Math.sin,
        _sqrtf: Math.sqrt,
        _tanf: Math.tan,
           
        // Double version
        _acos: Math.acos,
        _asin: Math.asin,
        _atan: Math.atan,
        _atan2: Math.atan2,
        _ceil: Math.ceil,
        _cos: Math.cos,
        _exp: Math.exp,
        _floor: Math.floor,
        _fmod: function(x, y) { return x % y; },
        _log: Math.log,
        _log10: Math.log10,
        _max_: Math.max,
        _min_: Math.min,
        _remainder:function(x, y) { return x - Math.round(x/y) * y; },
        _pow: Math.pow,
        _round: Math.fround,
        _sin: Math.sin,
        _sqrt: Math.sqrt,
        _tan: Math.tan,
        
        table: new WebAssembly.Table({ initial: 0, element: 'anyfunc' })
    }
};

// Synchronously compile and instantiate the WASM module
try {
    if (FluteProcessor.wasm_module == undefined) {
        FluteProcessor.wasm_module = new WebAssembly.Module(FluteProcessor.atob(getBase64CodeFlute()));
        registerProcessor('Flute', FluteProcessor);
    }
} catch (e) {
    console.log(e); console.log("Faust Flute cannot be loaded or compiled");
}

