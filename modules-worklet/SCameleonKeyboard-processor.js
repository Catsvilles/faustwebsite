
/*
Code generated with Faust version 2.5.9
Compilation options: -scal -ftz 2
*/

function getJSONSCameleonKeyboard() {
	return "{\"name\":\"Cameleon Keyboard\",\"version\":\"2.5.9\",\"options\":\"-scal -ftz 2\",\"size\":\"428\",\"inputs\":\"0\",\"outputs\":\"1\",\"meta\":[{\"author\":\"ER\"},{\"basics.lib/name\":\"Faust Basic Element Library\"},{\"basics.lib/version\":\"0.0\"},{\"filters.lib/name\":\"Faust Filters Library\"},{\"filters.lib/version\":\"0.0\"},{\"maths.lib/author\":\"GRAME\"},{\"maths.lib/copyright\":\"GRAME\"},{\"maths.lib/license\":\"LGPL with exception\"},{\"maths.lib/name\":\"Faust Math Library\"},{\"maths.lib/version\":\"2.1\"},{\"name\":\"Cameleon Keyboard\"},{\"oscillators.lib/name\":\"Faust Oscillator Library\"},{\"oscillators.lib/version\":\"0.0\"},{\"signals.lib/name\":\"Faust Signal Routing Library\"},{\"signals.lib/version\":\"0.0\"}],\"ui\":[{\"type\":\"vgroup\",\"label\":\"Cameleon Keyboard\",\"items\":[{\"type\":\"hslider\",\"label\":\"Instrument Hand\",\"address\":\"/Cameleon_Keyboard/Instrument_Hand\",\"index\":\"68\",\"meta\":[{\"1\":\"\"},{\"acc\":\"1 0 -10 0 10\"}],\"init\":\"5\",\"min\":\"0\",\"max\":\"10\",\"step\":\"1\"},{\"type\":\"hslider\",\"label\":\"Hight\",\"address\":\"/Cameleon_Keyboard/Hight\",\"index\":\"20\",\"meta\":[{\"2\":\"\"},{\"acc\":\"0 1 -10 0 30\"}],\"init\":\"5\",\"min\":\"1\",\"max\":\"10\",\"step\":\"0.3\"},{\"type\":\"hslider\",\"label\":\"Note Duration (BPF Envelope)\",\"address\":\"/Cameleon_Keyboard/Note_Duration_(BPF_Envelope)\",\"index\":\"92\",\"meta\":[{\"3\":\"\"},{\"acc\":\"2 0 -10 0 10\"},{\"unit\":\"s\"}],\"init\":\"0.2\",\"min\":\"0.1\",\"max\":\"0.5\",\"step\":\"0.01\"},{\"type\":\"vslider\",\"label\":\"Envelope Type (BPF Envelope)\",\"address\":\"/Cameleon_Keyboard/Envelope_Type_(BPF_Envelope)\",\"index\":\"64\",\"meta\":[{\"4\":\"\"},{\"style\":\"radio{'f9':0;'f11':1;'f15':2;'f17':3}\"}],\"init\":\"0\",\"min\":\"0\",\"max\":\"3\",\"step\":\"1\"}]}]}";
}
function getBase64CodeSCameleonKeyboard() { return "AGFzbQEAAAAB34CAgAASYAF/AX9gAn9/AGAEf39/fwBgAX0BfWABfwF/YAF/AX9gAn9/AX1gAX8Bf2ACf38AYAF/AGACf38AYAJ/fwBgAX8AYAJ/fwF/YAJ/fwF/YAN/f30AYAF9AX1gAX0BfQKpgICAAAQDZW52A2FicwAAA2VudgNjb3MAAwNlbnYDc2luABADZW52A3RhbgARA4+AgIAADgECBAUGBwgJCgsMDQ4PBYeAgIAAAQCBgICAAAe6gYCAAAwHY29tcHV0ZQAFDGdldE51bUlucHV0cwAGDWdldE51bU91dHB1dHMABw1nZXRQYXJhbVZhbHVlAAgNZ2V0U2FtcGxlUmF0ZQAJBGluaXQACg1pbnN0YW5jZUNsZWFyAAsRaW5zdGFuY2VDb25zdGFudHMADAxpbnN0YW5jZUluaXQADRppbnN0YW5jZVJlc2V0VXNlckludGVyZmFjZQAODXNldFBhcmFtVmFsdWUAEQZtZW1vcnkCAArYnoGAAA6CgICAAAAL8YmBgAACoAJ/TH1BACEEQwAAAAAhpAJBACEFQQAhBkMAAAAAIaUCQQAhB0MAAAAAIaYCQQAhCEEAIQlBACEKQQAhC0EAIQxBACENQQAhDkEAIQ9BACEQQQAhEUEAIRJBACETQQAhFEMAAAAAIacCQwAAAAAhqAJDAAAAACGpAkMAAAAAIaoCQwAAAAAhqwJDAAAAACGsAkEAIRVDAAAAACGtAkMAAAAAIa4CQQAhFkEAIRdBACEYQQAhGUEAIRpBACEbQQAhHEEAIR1DAAAAACGvAkEAIR5BACEfQQAhIEMAAAAAIbACQQAhIUEAISJBACEjQQAhJEEAISVBACEmQQAhJ0EAIShBACEpQQAhKkEAIStBACEsQwAAAAAhsQJBACEtQQAhLkEAIS9BACEwQQAhMUEAITJBACEzQQAhNEEAITVBACE2QQAhN0EAIThBACE5QQAhOkEAITtBACE8QQAhPUEAIT5BACE/QQAhQEEAIUFBACFCQQAhQ0EAIURBACFFQQAhRkEAIUdBACFIQQAhSUEAIUpBACFLQQAhTEMAAAAAIbICQQAhTUEAIU5BACFPQQAhUEEAIVFBACFSQQAhU0EAIVRDAAAAACGzAkMAAAAAIbQCQwAAAAAhtQJDAAAAACG2AkMAAAAAIbcCQwAAAAAhuAJDAAAAACG5AkEAIVVBACFWQQAhV0MAAAAAIboCQQAhWEEAIVlDAAAAACG7AkEAIVpBACFbQQAhXEEAIV1BACFeQwAAAAAhvAJBACFfQQAhYEEAIWFBACFiQQAhY0EAIWRBACFlQQAhZkEAIWdBACFoQQAhaUMAAAAAIb0CQQAhakEAIWtDAAAAACG+AkMAAAAAIb8CQQAhbEEAIW1BACFuQwAAAAAhwAJBACFvQQAhcEMAAAAAIcECQQAhcUEAIXJBACFzQQAhdEEAIXVDAAAAACHCAkEAIXZBACF3QQAheEEAIXlBACF6QQAhe0EAIXxBACF9QQAhfkEAIX9BACGAAUMAAAAAIcMCQQAhgQFBACGCAUMAAAAAIcQCQwAAAAAhxQJBACGDAUEAIYQBQQAhhQFDAAAAACHGAkEAIYYBQQAhhwFDAAAAACHHAkEAIYgBQQAhiQFBACGKAUEAIYsBQQAhjAFDAAAAACHIAkEAIY0BQQAhjgFBACGPAUEAIZABQQAhkQFBACGSAUEAIZMBQQAhlAFBACGVAUEAIZYBQQAhlwFDAAAAACHJAkEAIZgBQQAhmQFDAAAAACHKAkMAAAAAIcsCQQAhmgFBACGbAUEAIZwBQwAAAAAhzAJBACGdAUEAIZ4BQwAAAAAhzQJBACGfAUEAIaABQQAhoQFBACGiAUEAIaMBQwAAAAAhzgJBACGkAUEAIaUBQQAhpgFBACGnAUEAIagBQQAhqQFBACGqAUEAIasBQQAhrAFBACGtAUEAIa4BQwAAAAAhzwJBACGvAUEAIbABQwAAAAAh0AJDAAAAACHRAkEAIbEBQQAhsgFBACGzAUMAAAAAIdICQQAhtAFBACG1AUMAAAAAIdMCQQAhtgFBACG3AUEAIbgBQQAhuQFBACG6AUMAAAAAIdQCQQAhuwFBACG8AUEAIb0BQQAhvgFBACG/AUEAIcABQQAhwQFBACHCAUEAIcMBQQAhxAFBACHFAUMAAAAAIdUCQQAhxgFBACHHAUMAAAAAIdYCQwAAAAAh1wJBACHIAUEAIckBQQAhygFDAAAAACHYAkEAIcsBQQAhzAFDAAAAACHZAkEAIc0BQQAhzgFBACHPAUEAIdABQQAh0QFDAAAAACHaAkEAIdIBQQAh0wFBACHUAUEAIdUBQQAh1gFBACHXAUEAIdgBQQAh2QFBACHaAUEAIdsBQQAh3AFDAAAAACHbAkEAId0BQQAh3gFDAAAAACHcAkMAAAAAId0CQQAh3wFBACHgAUEAIeEBQwAAAAAh3gJBACHiAUEAIeMBQwAAAAAh3wJBACHkAUEAIeUBQQAh5gFBACHnAUEAIegBQwAAAAAh4AJBACHpAUEAIeoBQQAh6wFBACHsAUEAIe0BQQAh7gFBACHvAUEAIfABQQAh8QFBACHyAUEAIfMBQwAAAAAh4QJBACH0AUEAIfUBQwAAAAAh4gJDAAAAACHjAkEAIfYBQQAh9wFBACH4AUMAAAAAIeQCQQAh+QFBACH6AUMAAAAAIeUCQQAh+wFBACH8AUEAIf0BQQAh/gFBACH/AUMAAAAAIeYCQQAhgAJBACGBAkEAIYICQQAhgwJBACGEAkEAIYUCQQAhhgJBACGHAkEAIYgCQQAhiQJBACGKAkMAAAAAIecCQQAhiwJBACGMAkMAAAAAIegCQwAAAAAh6QJBACGNAkEAIY4CQQAhjwJDAAAAACHqAkEAIZACQQAhkQJDAAAAACHrAkEAIZICQQAhkwJBACGUAkEAIZUCQQAhlgJDAAAAACHsAkEAIZcCQQAhmAJBACGZAkEAIZoCQQAhmwJBACGcAkEAIZ0CQQAhngJBACGfAkEAIaACQQAhoQJDAAAAACHtAkEAIaICQQAhowJDAAAAACHuAkMAAAAAIe8CIANBAGooAgAhBEMK1yM8QQAqAhSUIaQCQQAqAkCoIQUgBRAAskMAAAA/XSEGQQAqAkQhpQIgpQJDAACAv5KLQwAAAD9dIQdBACoCWEEAKgJclCGmAiAFQX9qEACyQwAAAD9dIQggBUF+ahAAskMAAAA/XSEJIAVBfWoQALJDAAAAP10hCiClAkMAAADAkotDAAAAP10hCyClAkMAAEDAkotDAAAAP10hDCClAkMAAIDAkotDAAAAP10hDSClAkMAAKDAkotDAAAAP10hDiClAkMAAMDAkotDAAAAP10hDyClAkMAAODAkotDAAAAP10hECClAkMAAADBkotDAAAAP10hESClAkMAABDBkotDAAAAP10hEiClAkMAACDBkotDAAAAP10hE0EAIRQDQAJAQQBBATYCACCkAkOkcH0/QQAqAhyUkiGnAkEAIKcCQwAAAAAgpwK8QYCAgPwHcRs4AhhDAACAP0MAAEBBQQAqAhiWlyGoAkEAKgIQIKgClCGpAiCpAhACIaoCIKkCEAEhqwJBACoCLCCqApRBACoCJCCrApSSIawCQQAgrAJDAAAAACCsArxBgICA/AdxGzgCIEEBQQAoAgRrIRVBACoCLCCrApRBACoCJEMAAAAAIKoCk5SSIBWykiGtAkEAIK0CQwAAAAAgrQK8QYCAgPwHcRs4AihBACAHNgJIQQBBACgCVEEBakEBIAdBACgCTEprbDYCUCCmAkN3vn8/QQAqAmSUkiGuAkEAIK4CQwAAAAAgrgK8QYCAgPwHcRs4AmBDANCJRUMARCxHQQAqAmCWl6ghFkMAgD8/IBaylKghF0EAKAJQIBdIIRhBACgCUCAWSCEZIBYgF2shGkMAgP0+IBaylKghG0EAKAJQIBtIIRwgFyAbayEdQwAAAABDzcxMPUEAKAJQIBtrspSTIB2ylSGvAkMAAHg+IBaylKghHkEAKAJQIB5IIR9BACgCUCAeayEgQwAAAABDmpkZPiAgspSTIbACIBsgHmshIUMAACA8IBaylKghIkEAKAJQICJIISMgHiAiayEkQwAAgDsgFrKUqCElQQAoAlAgJUghJkEAKAJQICVrIScgIiAlayEoQwAAADsgFrKUqCEpQQAoAlAgKUghKiAlIClrIStBACgCUEEASCEsQwAAAABDAACAPkEAKAJQsiApspWUQwAAgD4gKhsgLBtDAACAPkEAKAJQIClrsiArspVDAACAP5KUQwAAAD8gJhsgKhshsQJDAEBzPyAWspSoIS1BACgCUCAtSCEuIBYgLWshL0MAQGY/IBaylKghMEEAKAJQIDBIITEgLSAwayEyQwBAWT8gFrKUqCEzQQAoAlAgM0ghNCAwIDNrITVDAIClPiAWspSoITZBACgCUCA2SCE3IDMgNmshOEMAAJY+IBaylKghOUEAKAJQIDlIITogNiA5ayE7IDkgHmshPEMAABE+IBaylKghPUEAKAJQID1IIT4gHiA9ayE/QwAAuj0gFrKUqCFAQQAoAlAgQEghQUEAKAJQIEBrIUIgPSBAayFDIB4gQGshREMAACQ9IBaylKghRUEAKAJQIEVIIUYgQCBFayFHQwAAwDsgFrKUqCFIQQAoAlAgSEghSUEAKAJQIEhrIUogRSBIayFLIEggJWshTCCxAkNI4fo+ICeyIEyylZRDAAAAP5JDpHB9PyBJGyAmGyGyAkMAgMk+IBaylKghTUEAKAJQIE1IIU4gGyBNayFPIE0gHmshUEMAAM49IBaylKghUUEAKAJQIFFIIVIgHiBRayFTIFEgSGshVCAGsiCxAkPNzMw+ICeyICiylZRDAAAAP5JDZmZmPyAjGyAmG0MAAAAAQ2ZmJj9BACgCUCAia7KUkyAkspVDZmZmP5JDAACAPiAfGyAjGyCwAiAhspVDAACAPpJDzczMPSAcGyAfGyCvAkPNzMw9kkPNzEw9IBgbIBwbQwAAAABDzcxMPUEAKAJQIBdrspSTIBqylUPNzEw9kkMAAAAAIBkbIBgblCAIskMAAAAAQwrXozxBACgCULIgQLKVlEMK16M8IEEbICwbQwrXoz0gQrIgQ7KVlEMK16M8kkPNzMw9ID4bIEEbQ83MzD5BACgCUCA9a7IgP7KVlEPNzMw9kkMAAAA/IB8bID4bQ2Zm5j4gILIgPLKVlEMAAAA/kkMzM3M/IDobIB8bQwrXIz1BACgCUCA5a7IgO7KVlEMzM3M/kkOkcH0/IDcbIDobQwAAAABDCtcjPUEAKAJQIDZrspSTIDiylUOkcH0/kkMzM3M/IDQbIDcbQwAAAABDzcxMPUEAKAJQIDNrspSTIDWylUMzM3M/kkNmZmY/IDEbIDQbQwAAAABDmplZP0EAKAJQIDBrspSTIDKylUNmZmY/kkPNzEw9IC4bIDEbQwAAAABDzcxMPUEAKAJQIC1rspSTIC+ylUPNzEw9kkMAAAAAIBkbIC4blJIgCbIgsgJDAAAAAEMK12M/IEqylJMgS7KVQ6RwfT+SQ83MzD0gRhsgSRtDAAAAAEMK16M9QQAoAlAgRWuylJMgR7KVQ83MzD2SQwrXozwgQRsgRhtDAAAAAEMK16M8IEKylJMgRLKVQwrXozySQwAAAAAgHxsgQRtDAAAAACAfG5SSIAqyILICQwAAAABDSOH6PiBKspSTIFSylUOkcH0/kkMAAAA/IFIbIEkbQwAAAABDAACAPkEAKAJQIFFrspSTIFOylUMAAAA/kkMAAIA+IB8bIFIbILACIFCylUMAAIA+kkPNzMw9IE4bIB8bQwAAAABDzcxMPUEAKAJQIE1rspSTIE+ylUPNzMw9kkPNzEw9IBwbIE4bIK8CQ83MTD2SQwAAAAAgGBsgHBtDAAAAACAYG5SSIbMCQQAgswI4AmhBACoCOEEAKgJ0lEEAKgI8ILMCQQAqAmySlJIhtAJBACC0AkMAAAAAILQCvEGAgID8B3EbOAJwQQAqAnggqAKUIbUCILUCEAIhtgIgtQIQASG3AkEAKgKIASC2ApRBACoCgAEgtwKUkiG4AkEAILgCQwAAAAAguAK8QYCAgPwHcRs4AnxBACoCiAEgtwKUQQAqAoABQwAAAAAgtgKTlJIgFbKSIbkCQQAguQJDAAAAACC5ArxBgICA/AdxGzgChAFBACALNgKMAUEAQQAoApgBQQFqQQEgC0EAKAKQAUprbDYClAFBACgClAEgF0ghVUEAKAKUASAWSCFWQQAoApQBIBtIIVdDAAAAAEPNzEw9QQAoApQBIBtrspSTIB2ylSG6AkEAKAKUASAeSCFYQQAoApQBIB5rIVlDAAAAAEOamRk+IFmylJMhuwJBACgClAEgIkghWkEAKAKUASAlSCFbQQAoApQBICVrIVxBACgClAEgKUghXUEAKAKUAUEASCFeQwAAAABDAACAPkEAKAKUAbIgKbKVlEMAAIA+IF0bIF4bQwAAgD5BACgClAEgKWuyICuylUMAAIA/kpRDAAAAPyBbGyBdGyG8AkEAKAKUASAtSCFfQQAoApQBIDBIIWBBACgClAEgM0ghYUEAKAKUASA2SCFiQQAoApQBIDlIIWNBACgClAEgPUghZEEAKAKUASBASCFlQQAoApQBIEBrIWZBACgClAEgRUghZ0EAKAKUASBISCFoQQAoApQBIEhrIWkgvAJDSOH6PiBcsiBMspWUQwAAAD+SQ6RwfT8gaBsgWxshvQJBACgClAEgTUghakEAKAKUASBRSCFrIAayILwCQ83MzD4gXLIgKLKVlEMAAAA/kkNmZmY/IFobIFsbQwAAAABDZmYmP0EAKAKUASAia7KUkyAkspVDZmZmP5JDAACAPiBYGyBaGyC7AiAhspVDAACAPpJDzczMPSBXGyBYGyC6AkPNzMw9kkPNzEw9IFUbIFcbQwAAAABDzcxMPUEAKAKUASAXa7KUkyAaspVDzcxMPZJDAAAAACBWGyBVG5QgCLJDAAAAAEMK16M8QQAoApQBsiBAspWUQwrXozwgZRsgXhtDCtejPSBmsiBDspWUQwrXozySQ83MzD0gZBsgZRtDzczMPkEAKAKUASA9a7IgP7KVlEPNzMw9kkMAAAA/IFgbIGQbQ2Zm5j4gWbIgPLKVlEMAAAA/kkMzM3M/IGMbIFgbQwrXIz1BACgClAEgOWuyIDuylZRDMzNzP5JDpHB9PyBiGyBjG0MAAAAAQwrXIz1BACgClAEgNmuylJMgOLKVQ6RwfT+SQzMzcz8gYRsgYhtDAAAAAEPNzEw9QQAoApQBIDNrspSTIDWylUMzM3M/kkNmZmY/IGAbIGEbQwAAAABDmplZP0EAKAKUASAwa7KUkyAyspVDZmZmP5JDzcxMPSBfGyBgG0MAAAAAQ83MTD1BACgClAEgLWuylJMgL7KVQ83MTD2SQwAAAAAgVhsgXxuUkiAJsiC9AkMAAAAAQwrXYz8gabKUkyBLspVDpHB9P5JDzczMPSBnGyBoG0MAAAAAQwrXoz1BACgClAEgRWuylJMgR7KVQ83MzD2SQwrXozwgZRsgZxtDAAAAAEMK16M8IGaylJMgRLKVQwrXozySQwAAAAAgWBsgZRtDAAAAACBYG5SSIAqyIL0CQwAAAABDSOH6PiBpspSTIFSylUOkcH0/kkMAAAA/IGsbIGgbQwAAAABDAACAPkEAKAKUASBRa7KUkyBTspVDAAAAP5JDAACAPiBYGyBrGyC7AiBQspVDAACAPpJDzczMPSBqGyBYG0MAAAAAQ83MTD1BACgClAEgTWuylJMgT7KVQ83MzD2SQ83MTD0gVxsgahsgugJDzcxMPZJDAAAAACBVGyBXG0MAAAAAIFUblJIhvgJBACC+AjgCnAFBACoCOEEAKgKoAZRBACoCPCC+AkEAKgKgAZKUkiG/AkEAIL8CQwAAAAAgvwK8QYCAgPwHcRs4AqQBQQAgDDYCrAFBAEEAKAK4AUEBakEBIAxBACgCsAFKa2w2ArQBQQAoArQBIBdIIWxBACgCtAEgFkghbUEAKAK0ASAbSCFuQwAAAABDzcxMPUEAKAK0ASAba7KUkyAdspUhwAJBACgCtAEgHkghb0EAKAK0ASAeayFwQwAAAABDmpkZPiBwspSTIcECQQAoArQBICJIIXFBACgCtAEgJUghckEAKAK0ASAlayFzQQAoArQBIClIIXRBACgCtAFBAEghdUMAAAAAQwAAgD5BACgCtAGyICmylZRDAACAPiB0GyB1G0MAAIA+QQAoArQBIClrsiArspVDAACAP5KUQwAAAD8gchsgdBshwgJBACgCtAEgLUghdkEAKAK0ASAwSCF3QQAoArQBIDNIIXhBACgCtAEgNkgheUEAKAK0ASA5SCF6QQAoArQBID1IIXtBACgCtAEgQEghfEEAKAK0ASBAayF9QQAoArQBIEVIIX5BACgCtAEgSEghf0EAKAK0ASBIayGAASDCAkNI4fo+IHOyIEyylZRDAAAAP5JDpHB9PyB/GyByGyHDAkEAKAK0ASBNSCGBAUEAKAK0ASBRSCGCASAGsiDCAkPNzMw+IHOyICiylZRDAAAAP5JDZmZmPyBxGyByG0MAAAAAQ2ZmJj9BACgCtAEgImuylJMgJLKVQ2ZmZj+SQwAAgD4gbxsgcRsgwQIgIbKVQwAAgD6SQ83MzD0gbhsgbxsgwAJDzczMPZJDzcxMPSBsGyBuG0MAAAAAQ83MTD1BACgCtAEgF2uylJMgGrKVQ83MTD2SQwAAAAAgbRsgbBuUIAiyQwAAAABDCtejPEEAKAK0AbIgQLKVlEMK16M8IHwbIHUbQwrXoz0gfbIgQ7KVlEMK16M8kkPNzMw9IHsbIHwbQ83MzD5BACgCtAEgPWuyID+ylZRDzczMPZJDAAAAPyBvGyB7G0NmZuY+IHCyIDyylZRDAAAAP5JDMzNzPyB6GyBvG0MK1yM9QQAoArQBIDlrsiA7spWUQzMzcz+SQ6RwfT8geRsgehtDAAAAAEMK1yM9QQAoArQBIDZrspSTIDiylUOkcH0/kkMzM3M/IHgbIHkbQwAAAABDzcxMPUEAKAK0ASAza7KUkyA1spVDMzNzP5JDZmZmPyB3GyB4G0MAAAAAQ5qZWT9BACgCtAEgMGuylJMgMrKVQ2ZmZj+SQ83MTD0gdhsgdxtDAAAAAEPNzEw9QQAoArQBIC1rspSTIC+ylUPNzEw9kkMAAAAAIG0bIHYblJIgCbIgwwJDAAAAAEMK12M/IIABspSTIEuylUOkcH0/kkPNzMw9IH4bIH8bQwAAAABDCtejPUEAKAK0ASBFa7KUkyBHspVDzczMPZJDCtejPCB8GyB+G0MAAAAAQwrXozwgfbKUkyBEspVDCtejPJJDAAAAACBvGyB8G0MAAAAAIG8blJIgCrIgwwJDAAAAAENI4fo+IIABspSTIFSylUOkcH0/kkMAAAA/IIIBGyB/G0MAAAAAQwAAgD5BACgCtAEgUWuylJMgU7KVQwAAAD+SQwAAgD4gbxsgggEbIMECIFCylUMAAIA+kkPNzMw9IIEBGyBvG0MAAAAAQ83MTD1BACgCtAEgTWuylJMgT7KVQ83MzD2SQ83MTD0gbhsggQEbIMACQ83MTD2SQwAAAAAgbBsgbhtDAAAAACBsG5SSIcQCQQAgxAI4ArwBQQAqAjhBACoCyAGUQQAqAjwgxAJBACoCwAGSlJIhxQJBACDFAkMAAAAAIMUCvEGAgID8B3EbOALEAUEAIA02AswBQQBBACgC2AFBAWpBASANQQAoAtABSmtsNgLUAUEAKALUASAXSCGDAUEAKALUASAWSCGEAUEAKALUASAbSCGFAUMAAAAAQ83MTD1BACgC1AEgG2uylJMgHbKVIcYCQQAoAtQBIB5IIYYBQQAoAtQBIB5rIYcBQwAAAABDmpkZPiCHAbKUkyHHAkEAKALUASAiSCGIAUEAKALUASAlSCGJAUEAKALUASAlayGKAUEAKALUASApSCGLAUEAKALUAUEASCGMAUMAAAAAQwAAgD5BACgC1AGyICmylZRDAACAPiCLARsgjAEbQwAAgD5BACgC1AEgKWuyICuylUMAAIA/kpRDAAAAPyCJARsgiwEbIcgCQQAoAtQBIC1IIY0BQQAoAtQBIDBIIY4BQQAoAtQBIDNIIY8BQQAoAtQBIDZIIZABQQAoAtQBIDlIIZEBQQAoAtQBID1IIZIBQQAoAtQBIEBIIZMBQQAoAtQBIEBrIZQBQQAoAtQBIEVIIZUBQQAoAtQBIEhIIZYBQQAoAtQBIEhrIZcBIMgCQ0jh+j4gigGyIEyylZRDAAAAP5JDpHB9PyCWARsgiQEbIckCQQAoAtQBIE1IIZgBQQAoAtQBIFFIIZkBIAayIMgCQ83MzD4gigGyICiylZRDAAAAP5JDZmZmPyCIARsgiQEbQwAAAABDZmYmP0EAKALUASAia7KUkyAkspVDZmZmP5JDAACAPiCGARsgiAEbIMcCICGylUMAAIA+kkPNzMw9IIUBGyCGARsgxgJDzczMPZJDzcxMPSCDARsghQEbQwAAAABDzcxMPUEAKALUASAXa7KUkyAaspVDzcxMPZJDAAAAACCEARsggwEblCAIskMAAAAAQwrXozxBACgC1AGyIECylZRDCtejPCCTARsgjAEbQwrXoz0glAGyIEOylZRDCtejPJJDzczMPSCSARsgkwEbQ83MzD5BACgC1AEgPWuyID+ylZRDzczMPZJDAAAAPyCGARsgkgEbQ2Zm5j4ghwGyIDyylZRDAAAAP5JDMzNzPyCRARsghgEbQwrXIz1BACgC1AEgOWuyIDuylZRDMzNzP5JDpHB9PyCQARsgkQEbQwAAAABDCtcjPUEAKALUASA2a7KUkyA4spVDpHB9P5JDMzNzPyCPARsgkAEbQwAAAABDzcxMPUEAKALUASAza7KUkyA1spVDMzNzP5JDZmZmPyCOARsgjwEbQwAAAABDmplZP0EAKALUASAwa7KUkyAyspVDZmZmP5JDzcxMPSCNARsgjgEbQwAAAABDzcxMPUEAKALUASAta7KUkyAvspVDzcxMPZJDAAAAACCEARsgjQEblJIgCbIgyQJDAAAAAEMK12M/IJcBspSTIEuylUOkcH0/kkPNzMw9IJUBGyCWARtDAAAAAEMK16M9QQAoAtQBIEVrspSTIEeylUPNzMw9kkMK16M8IJMBGyCVARtDAAAAAEMK16M8IJQBspSTIESylUMK16M8kkMAAAAAIIYBGyCTARtDAAAAACCGARuUkiAKsiDJAkMAAAAAQ0jh+j4glwGylJMgVLKVQ6RwfT+SQwAAAD8gmQEbIJYBG0MAAAAAQwAAgD5BACgC1AEgUWuylJMgU7KVQwAAAD+SQwAAgD4ghgEbIJkBGyDHAiBQspVDAACAPpJDzczMPSCYARsghgEbQwAAAABDzcxMPUEAKALUASBNa7KUkyBPspVDzczMPZJDzcxMPSCFARsgmAEbIMYCQ83MTD2SQwAAAAAggwEbIIUBG0MAAAAAIIMBG5SSIcoCQQAgygI4AtwBQQAqAjhBACoC6AGUQQAqAjwgygJBACoC4AGSlJIhywJBACDLAkMAAAAAIMsCvEGAgID8B3EbOALkAUEAIA42AuwBQQBBACgC+AFBAWpBASAOQQAoAvABSmtsNgL0AUEAKAL0ASAXSCGaAUEAKAL0ASAWSCGbAUEAKAL0ASAbSCGcAUMAAAAAQ83MTD1BACgC9AEgG2uylJMgHbKVIcwCQQAoAvQBIB5IIZ0BQQAoAvQBIB5rIZ4BQwAAAABDmpkZPiCeAbKUkyHNAkEAKAL0ASAiSCGfAUEAKAL0ASAlSCGgAUEAKAL0ASAlayGhAUEAKAL0ASApSCGiAUEAKAL0AUEASCGjAUMAAAAAQwAAgD5BACgC9AGyICmylZRDAACAPiCiARsgowEbQwAAgD5BACgC9AEgKWuyICuylUMAAIA/kpRDAAAAPyCgARsgogEbIc4CQQAoAvQBIC1IIaQBQQAoAvQBIDBIIaUBQQAoAvQBIDNIIaYBQQAoAvQBIDZIIacBQQAoAvQBIDlIIagBQQAoAvQBID1IIakBQQAoAvQBIEBIIaoBQQAoAvQBIEBrIasBQQAoAvQBIEVIIawBQQAoAvQBIEhIIa0BQQAoAvQBIEhrIa4BIM4CQ0jh+j4goQGyIEyylZRDAAAAP5JDpHB9PyCtARsgoAEbIc8CQQAoAvQBIE1IIa8BQQAoAvQBIFFIIbABIAayIM4CQ83MzD4goQGyICiylZRDAAAAP5JDZmZmPyCfARsgoAEbQwAAAABDZmYmP0EAKAL0ASAia7KUkyAkspVDZmZmP5JDAACAPiCdARsgnwEbIM0CICGylUMAAIA+kkPNzMw9IJwBGyCdARsgzAJDzczMPZJDzcxMPSCaARsgnAEbQwAAAABDzcxMPUEAKAL0ASAXa7KUkyAaspVDzcxMPZJDAAAAACCbARsgmgEblCAIskMAAAAAQwrXozxBACgC9AGyIECylZRDCtejPCCqARsgowEbQwrXoz0gqwGyIEOylZRDCtejPJJDzczMPSCpARsgqgEbQ83MzD5BACgC9AEgPWuyID+ylZRDzczMPZJDAAAAPyCdARsgqQEbQ2Zm5j4gngGyIDyylZRDAAAAP5JDMzNzPyCoARsgnQEbQwrXIz1BACgC9AEgOWuyIDuylZRDMzNzP5JDpHB9PyCnARsgqAEbQwAAAABDCtcjPUEAKAL0ASA2a7KUkyA4spVDpHB9P5JDMzNzPyCmARsgpwEbQwAAAABDzcxMPUEAKAL0ASAza7KUkyA1spVDMzNzP5JDZmZmPyClARsgpgEbQwAAAABDmplZP0EAKAL0ASAwa7KUkyAyspVDZmZmP5JDzcxMPSCkARsgpQEbQwAAAABDzcxMPUEAKAL0ASAta7KUkyAvspVDzcxMPZJDAAAAACCbARsgpAEblJIgCbIgzwJDAAAAAEMK12M/IK4BspSTIEuylUOkcH0/kkPNzMw9IKwBGyCtARtDAAAAAEMK16M9QQAoAvQBIEVrspSTIEeylUPNzMw9kkMK16M8IKoBGyCsARtDAAAAAEMK16M8IKsBspSTIESylUMK16M8kkMAAAAAIJ0BGyCqARtDAAAAACCdARuUkiAKsiDPAkMAAAAAQ0jh+j4grgGylJMgVLKVQ6RwfT+SQwAAAD8gsAEbIK0BG0MAAAAAQwAAgD5BACgC9AEgUWuylJMgU7KVQwAAAD+SQwAAgD4gnQEbILABGyDNAiBQspVDAACAPpJDzczMPSCvARsgnQEbQwAAAABDzcxMPUEAKAL0ASBNa7KUkyBPspVDzczMPZJDzcxMPSCcARsgrwEbIMwCQ83MTD2SQwAAAAAgmgEbIJwBG0MAAAAAIJoBG5SSIdACQQAg0AI4AvwBQQAqAjhBACoCiAKUQQAqAjwg0AJBACoCgAKSlJIh0QJBACDRAkMAAAAAINECvEGAgID8B3EbOAKEAkEAIA82AowCQQBBACgCmAJBAWpBASAPQQAoApACSmtsNgKUAkEAKAKUAiAXSCGxAUEAKAKUAiAWSCGyAUEAKAKUAiAbSCGzAUMAAAAAQ83MTD1BACgClAIgG2uylJMgHbKVIdICQQAoApQCIB5IIbQBQQAoApQCIB5rIbUBQwAAAABDmpkZPiC1AbKUkyHTAkEAKAKUAiAiSCG2AUEAKAKUAiAlSCG3AUEAKAKUAiAlayG4AUEAKAKUAiApSCG5AUEAKAKUAkEASCG6AUMAAAAAQwAAgD5BACgClAKyICmylZRDAACAPiC5ARsgugEbQwAAgD5BACgClAIgKWuyICuylUMAAIA/kpRDAAAAPyC3ARsguQEbIdQCQQAoApQCIC1IIbsBQQAoApQCIDBIIbwBQQAoApQCIDNIIb0BQQAoApQCIDZIIb4BQQAoApQCIDlIIb8BQQAoApQCID1IIcABQQAoApQCIEBIIcEBQQAoApQCIEBrIcIBQQAoApQCIEVIIcMBQQAoApQCIEhIIcQBQQAoApQCIEhrIcUBINQCQ0jh+j4guAGyIEyylZRDAAAAP5JDpHB9PyDEARsgtwEbIdUCQQAoApQCIE1IIcYBQQAoApQCIFFIIccBIAayINQCQ83MzD4guAGyICiylZRDAAAAP5JDZmZmPyC2ARsgtwEbQwAAAABDZmYmP0EAKAKUAiAia7KUkyAkspVDZmZmP5JDAACAPiC0ARsgtgEbINMCICGylUMAAIA+kkPNzMw9ILMBGyC0ARsg0gJDzczMPZJDzcxMPSCxARsgswEbQwAAAABDzcxMPUEAKAKUAiAXa7KUkyAaspVDzcxMPZJDAAAAACCyARsgsQEblCAIskMAAAAAQwrXozxBACgClAKyIECylZRDCtejPCDBARsgugEbQwrXoz0gwgGyIEOylZRDCtejPJJDzczMPSDAARsgwQEbQ83MzD5BACgClAIgPWuyID+ylZRDzczMPZJDAAAAPyC0ARsgwAEbQ2Zm5j4gtQGyIDyylZRDAAAAP5JDMzNzPyC/ARsgtAEbQwrXIz1BACgClAIgOWuyIDuylZRDMzNzP5JDpHB9PyC+ARsgvwEbQwAAAABDCtcjPUEAKAKUAiA2a7KUkyA4spVDpHB9P5JDMzNzPyC9ARsgvgEbQwAAAABDzcxMPUEAKAKUAiAza7KUkyA1spVDMzNzP5JDZmZmPyC8ARsgvQEbQwAAAABDmplZP0EAKAKUAiAwa7KUkyAyspVDZmZmP5JDzcxMPSC7ARsgvAEbQwAAAABDzcxMPUEAKAKUAiAta7KUkyAvspVDzcxMPZJDAAAAACCyARsguwEblJIgCbIg1QJDAAAAAEMK12M/IMUBspSTIEuylUOkcH0/kkPNzMw9IMMBGyDEARtDAAAAAEMK16M9QQAoApQCIEVrspSTIEeylUPNzMw9kkMK16M8IMEBGyDDARtDAAAAAEMK16M8IMIBspSTIESylUMK16M8kkMAAAAAILQBGyDBARtDAAAAACC0ARuUkiAKsiDVAkMAAAAAQ0jh+j4gxQGylJMgVLKVQ6RwfT+SQwAAAD8gxwEbIMQBG0MAAAAAQwAAgD5BACgClAIgUWuylJMgU7KVQwAAAD+SQwAAgD4gtAEbIMcBGyDTAiBQspVDAACAPpJDzczMPSDGARsgtAEbQwAAAABDzcxMPUEAKAKUAiBNa7KUkyBPspVDzczMPZJDzcxMPSCzARsgxgEbINICQ83MTD2SQwAAAAAgsQEbILMBG0MAAAAAILEBG5SSIdYCQQAg1gI4ApwCQQAqAjhBACoCqAKUQQAqAjwg1gJBACoCoAKSlJIh1wJBACDXAkMAAAAAINcCvEGAgID8B3EbOAKkAkEAIBA2AqwCQQBBACgCuAJBAWpBASAQQQAoArACSmtsNgK0AkEAKAK0AiAXSCHIAUEAKAK0AiAWSCHJAUEAKAK0AiAbSCHKAUMAAAAAQ83MTD1BACgCtAIgG2uylJMgHbKVIdgCQQAoArQCIB5IIcsBQQAoArQCIB5rIcwBQwAAAABDmpkZPiDMAbKUkyHZAkEAKAK0AiAiSCHNAUEAKAK0AiAlSCHOAUEAKAK0AiAlayHPAUEAKAK0AiApSCHQAUEAKAK0AkEASCHRAUMAAAAAQwAAgD5BACgCtAKyICmylZRDAACAPiDQARsg0QEbQwAAgD5BACgCtAIgKWuyICuylUMAAIA/kpRDAAAAPyDOARsg0AEbIdoCQQAoArQCIC1IIdIBQQAoArQCIDBIIdMBQQAoArQCIDNIIdQBQQAoArQCIDZIIdUBQQAoArQCIDlIIdYBQQAoArQCID1IIdcBQQAoArQCIEBIIdgBQQAoArQCIEBrIdkBQQAoArQCIEVIIdoBQQAoArQCIEhIIdsBQQAoArQCIEhrIdwBINoCQ0jh+j4gzwGyIEyylZRDAAAAP5JDpHB9PyDbARsgzgEbIdsCQQAoArQCIE1IId0BQQAoArQCIFFIId4BIAayINoCQ83MzD4gzwGyICiylZRDAAAAP5JDZmZmPyDNARsgzgEbQwAAAABDZmYmP0EAKAK0AiAia7KUkyAkspVDZmZmP5JDAACAPiDLARsgzQEbINkCICGylUMAAIA+kkPNzMw9IMoBGyDLARsg2AJDzczMPZJDzcxMPSDIARsgygEbQwAAAABDzcxMPUEAKAK0AiAXa7KUkyAaspVDzcxMPZJDAAAAACDJARsgyAEblCAIskMAAAAAQwrXozxBACgCtAKyIECylZRDCtejPCDYARsg0QEbQwrXoz0g2QGyIEOylZRDCtejPJJDzczMPSDXARsg2AEbQ83MzD5BACgCtAIgPWuyID+ylZRDzczMPZJDAAAAPyDLARsg1wEbQ2Zm5j4gzAGyIDyylZRDAAAAP5JDMzNzPyDWARsgywEbQwrXIz1BACgCtAIgOWuyIDuylZRDMzNzP5JDpHB9PyDVARsg1gEbQwAAAABDCtcjPUEAKAK0AiA2a7KUkyA4spVDpHB9P5JDMzNzPyDUARsg1QEbQwAAAABDzcxMPUEAKAK0AiAza7KUkyA1spVDMzNzP5JDZmZmPyDTARsg1AEbQwAAAABDmplZP0EAKAK0AiAwa7KUkyAyspVDZmZmP5JDzcxMPSDSARsg0wEbQwAAAABDzcxMPUEAKAK0AiAta7KUkyAvspVDzcxMPZJDAAAAACDJARsg0gEblJIgCbIg2wJDAAAAAEMK12M/INwBspSTIEuylUOkcH0/kkPNzMw9INoBGyDbARtDAAAAAEMK16M9QQAoArQCIEVrspSTIEeylUPNzMw9kkMK16M8INgBGyDaARtDAAAAAEMK16M8INkBspSTIESylUMK16M8kkMAAAAAIMsBGyDYARtDAAAAACDLARuUkiAKsiDbAkMAAAAAQ0jh+j4g3AGylJMgVLKVQ6RwfT+SQwAAAD8g3gEbINsBG0MAAAAAQwAAgD5BACgCtAIgUWuylJMgU7KVQwAAAD+SQwAAgD4gywEbIN4BGyDZAiBQspVDAACAPpJDzczMPSDdARsgywEbQwAAAABDzcxMPUEAKAK0AiBNa7KUkyBPspVDzczMPZJDzcxMPSDKARsg3QEbINgCQ83MTD2SQwAAAAAgyAEbIMoBG0MAAAAAIMgBG5SSIdwCQQAg3AI4ArwCQQAqAjhBACoCyAKUQQAqAjwg3AJBACoCwAKSlJIh3QJBACDdAkMAAAAAIN0CvEGAgID8B3EbOALEAkEAIBE2AswCQQBBACgC2AJBAWpBASARQQAoAtACSmtsNgLUAkEAKALUAiAXSCHfAUEAKALUAiAWSCHgAUEAKALUAiAbSCHhAUMAAAAAQ83MTD1BACgC1AIgG2uylJMgHbKVId4CQQAoAtQCIB5IIeIBQQAoAtQCIB5rIeMBQwAAAABDmpkZPiDjAbKUkyHfAkEAKALUAiAiSCHkAUEAKALUAiAlSCHlAUEAKALUAiAlayHmAUEAKALUAiApSCHnAUEAKALUAkEASCHoAUMAAAAAQwAAgD5BACgC1AKyICmylZRDAACAPiDnARsg6AEbQwAAgD5BACgC1AIgKWuyICuylUMAAIA/kpRDAAAAPyDlARsg5wEbIeACQQAoAtQCIC1IIekBQQAoAtQCIDBIIeoBQQAoAtQCIDNIIesBQQAoAtQCIDZIIewBQQAoAtQCIDlIIe0BQQAoAtQCID1IIe4BQQAoAtQCIEBIIe8BQQAoAtQCIEBrIfABQQAoAtQCIEVIIfEBQQAoAtQCIEhIIfIBQQAoAtQCIEhrIfMBIOACQ0jh+j4g5gGyIEyylZRDAAAAP5JDpHB9PyDyARsg5QEbIeECQQAoAtQCIE1IIfQBQQAoAtQCIFFIIfUBIAayIOACQ83MzD4g5gGyICiylZRDAAAAP5JDZmZmPyDkARsg5QEbQwAAAABDZmYmP0EAKALUAiAia7KUkyAkspVDZmZmP5JDAACAPiDiARsg5AEbIN8CICGylUMAAIA+kkPNzMw9IOEBGyDiARsg3gJDzczMPZJDzcxMPSDfARsg4QEbQwAAAABDzcxMPUEAKALUAiAXa7KUkyAaspVDzcxMPZJDAAAAACDgARsg3wEblCAIskMAAAAAQwrXozxBACgC1AKyIECylZRDCtejPCDvARsg6AEbQwrXoz0g8AGyIEOylZRDCtejPJJDzczMPSDuARsg7wEbQ83MzD5BACgC1AIgPWuyID+ylZRDzczMPZJDAAAAPyDiARsg7gEbQ2Zm5j4g4wGyIDyylZRDAAAAP5JDMzNzPyDtARsg4gEbQwrXIz1BACgC1AIgOWuyIDuylZRDMzNzP5JDpHB9PyDsARsg7QEbQwAAAABDCtcjPUEAKALUAiA2a7KUkyA4spVDpHB9P5JDMzNzPyDrARsg7AEbQwAAAABDzcxMPUEAKALUAiAza7KUkyA1spVDMzNzP5JDZmZmPyDqARsg6wEbQwAAAABDmplZP0EAKALUAiAwa7KUkyAyspVDZmZmP5JDzcxMPSDpARsg6gEbQwAAAABDzcxMPUEAKALUAiAta7KUkyAvspVDzcxMPZJDAAAAACDgARsg6QEblJIgCbIg4QJDAAAAAEMK12M/IPMBspSTIEuylUOkcH0/kkPNzMw9IPEBGyDyARtDAAAAAEMK16M9QQAoAtQCIEVrspSTIEeylUPNzMw9kkMK16M8IO8BGyDxARtDAAAAAEMK16M8IPABspSTIESylUMK16M8kkMAAAAAIOIBGyDvARtDAAAAACDiARuUkiAKsiDhAkMAAAAAQ0jh+j4g8wGylJMgVLKVQ6RwfT+SQwAAAD8g9QEbIPIBG0MAAAAAQwAAgD5BACgC1AIgUWuylJMgU7KVQwAAAD+SQwAAgD4g4gEbIPUBGyDfAiBQspVDAACAPpJDzczMPSD0ARsg4gEbQwAAAABDzcxMPUEAKALUAiBNa7KUkyBPspVDzczMPZJDzcxMPSDhARsg9AEbIN4CQ83MTD2SQwAAAAAg3wEbIOEBG0MAAAAAIN8BG5SSIeICQQAg4gI4AtwCQQAqAjhBACoC6AKUQQAqAjwg4gJBACoC4AKSlJIh4wJBACDjAkMAAAAAIOMCvEGAgID8B3EbOALkAkEAIBI2AuwCQQBBACgC+AJBAWpBASASQQAoAvACSmtsNgL0AkEAKAL0AiAXSCH2AUEAKAL0AiAWSCH3AUEAKAL0AiAbSCH4AUMAAAAAQ83MTD1BACgC9AIgG2uylJMgHbKVIeQCQQAoAvQCIB5IIfkBQQAoAvQCIB5rIfoBQwAAAABDmpkZPiD6AbKUkyHlAkEAKAL0AiAiSCH7AUEAKAL0AiAlSCH8AUEAKAL0AiAlayH9AUEAKAL0AiApSCH+AUEAKAL0AkEASCH/AUMAAAAAQwAAgD5BACgC9AKyICmylZRDAACAPiD+ARsg/wEbQwAAgD5BACgC9AIgKWuyICuylUMAAIA/kpRDAAAAPyD8ARsg/gEbIeYCQQAoAvQCIC1IIYACQQAoAvQCIDBIIYECQQAoAvQCIDNIIYICQQAoAvQCIDZIIYMCQQAoAvQCIDlIIYQCQQAoAvQCID1IIYUCQQAoAvQCIEBIIYYCQQAoAvQCIEBrIYcCQQAoAvQCIEVIIYgCQQAoAvQCIEhIIYkCQQAoAvQCIEhrIYoCIOYCQ0jh+j4g/QGyIEyylZRDAAAAP5JDpHB9PyCJAhsg/AEbIecCQQAoAvQCIE1IIYsCQQAoAvQCIFFIIYwCIAayIOYCQ83MzD4g/QGyICiylZRDAAAAP5JDZmZmPyD7ARsg/AEbQwAAAABDZmYmP0EAKAL0AiAia7KUkyAkspVDZmZmP5JDAACAPiD5ARsg+wEbIOUCICGylUMAAIA+kkPNzMw9IPgBGyD5ARsg5AJDzczMPZJDzcxMPSD2ARsg+AEbQwAAAABDzcxMPUEAKAL0AiAXa7KUkyAaspVDzcxMPZJDAAAAACD3ARsg9gEblCAIskMAAAAAQwrXozxBACgC9AKyIECylZRDCtejPCCGAhsg/wEbQwrXoz0ghwKyIEOylZRDCtejPJJDzczMPSCFAhsghgIbQ83MzD5BACgC9AIgPWuyID+ylZRDzczMPZJDAAAAPyD5ARsghQIbQ2Zm5j4g+gGyIDyylZRDAAAAP5JDMzNzPyCEAhsg+QEbQwrXIz1BACgC9AIgOWuyIDuylZRDMzNzP5JDpHB9PyCDAhsghAIbQwAAAABDCtcjPUEAKAL0AiA2a7KUkyA4spVDpHB9P5JDMzNzPyCCAhsggwIbQwAAAABDzcxMPUEAKAL0AiAza7KUkyA1spVDMzNzP5JDZmZmPyCBAhsgggIbQwAAAABDmplZP0EAKAL0AiAwa7KUkyAyspVDZmZmP5JDzcxMPSCAAhsggQIbQwAAAABDzcxMPUEAKAL0AiAta7KUkyAvspVDzcxMPZJDAAAAACD3ARsggAIblJIgCbIg5wJDAAAAAEMK12M/IIoCspSTIEuylUOkcH0/kkPNzMw9IIgCGyCJAhtDAAAAAEMK16M9QQAoAvQCIEVrspSTIEeylUPNzMw9kkMK16M8IIYCGyCIAhtDAAAAAEMK16M8IIcCspSTIESylUMK16M8kkMAAAAAIPkBGyCGAhtDAAAAACD5ARuUkiAKsiDnAkMAAAAAQ0jh+j4gigKylJMgVLKVQ6RwfT+SQwAAAD8gjAIbIIkCG0MAAAAAQwAAgD5BACgC9AIgUWuylJMgU7KVQwAAAD+SQwAAgD4g+QEbIIwCGyDlAiBQspVDAACAPpJDzczMPSCLAhsg+QEbQwAAAABDzcxMPUEAKAL0AiBNa7KUkyBPspVDzczMPZJDzcxMPSD4ARsgiwIbIOQCQ83MTD2SQwAAAAAg9gEbIPgBG0MAAAAAIPYBG5SSIegCQQAg6AI4AvwCQQAqAjhBACoCiAOUQQAqAjwg6AJBACoCgAOSlJIh6QJBACDpAkMAAAAAIOkCvEGAgID8B3EbOAKEA0EAIBM2AowDQQBBACgCmANBAWpBASATQQAoApADSmtsNgKUA0EAKAKUAyAXSCGNAkEAKAKUAyAWSCGOAkEAKAKUAyAbSCGPAkMAAAAAQ83MTD1BACgClAMgG2uylJMgHbKVIeoCQQAoApQDIB5IIZACQQAoApQDIB5rIZECQwAAAABDmpkZPiCRArKUkyHrAkEAKAKUAyAiSCGSAkEAKAKUAyAlSCGTAkEAKAKUAyAlayGUAkEAKAKUAyApSCGVAkEAKAKUA0EASCGWAkMAAAAAQwAAgD5BACgClAOyICmylZRDAACAPiCVAhsglgIbQwAAgD5BACgClAMgKWuyICuylUMAAIA/kpRDAAAAPyCTAhsglQIbIewCQQAoApQDIC1IIZcCQQAoApQDIDBIIZgCQQAoApQDIDNIIZkCQQAoApQDIDZIIZoCQQAoApQDIDlIIZsCQQAoApQDID1IIZwCQQAoApQDIEBIIZ0CQQAoApQDIEBrIZ4CQQAoApQDIEVIIZ8CQQAoApQDIEhIIaACQQAoApQDIEhrIaECIOwCQ0jh+j4glAKyIEyylZRDAAAAP5JDpHB9PyCgAhsgkwIbIe0CQQAoApQDIE1IIaICQQAoApQDIFFIIaMCIAayIOwCQ83MzD4glAKyICiylZRDAAAAP5JDZmZmPyCSAhsgkwIbQwAAAABDZmYmP0EAKAKUAyAia7KUkyAkspVDZmZmP5JDAACAPiCQAhsgkgIbIOsCICGylUMAAIA+kkPNzMw9II8CGyCQAhsg6gJDzczMPZJDzcxMPSCNAhsgjwIbQwAAAABDzcxMPUEAKAKUAyAXa7KUkyAaspVDzcxMPZJDAAAAACCOAhsgjQIblCAIskMAAAAAQwrXozxBACgClAOyIECylZRDCtejPCCdAhsglgIbQwrXoz0gngKyIEOylZRDCtejPJJDzczMPSCcAhsgnQIbQ83MzD5BACgClAMgPWuyID+ylZRDzczMPZJDAAAAPyCQAhsgnAIbQ2Zm5j4gkQKyIDyylZRDAAAAP5JDMzNzPyCbAhsgkAIbQwrXIz1BACgClAMgOWuyIDuylZRDMzNzP5JDpHB9PyCaAhsgmwIbQwAAAABDCtcjPUEAKAKUAyA2a7KUkyA4spVDpHB9P5JDMzNzPyCZAhsgmgIbQwAAAABDzcxMPUEAKAKUAyAza7KUkyA1spVDMzNzP5JDZmZmPyCYAhsgmQIbQwAAAABDmplZP0EAKAKUAyAwa7KUkyAyspVDZmZmP5JDzcxMPSCXAhsgmAIbQwAAAABDzcxMPUEAKAKUAyAta7KUkyAvspVDzcxMPZJDAAAAACCOAhsglwIblJIgCbIg7QJDAAAAAEMK12M/IKECspSTIEuylUOkcH0/kkPNzMw9IJ8CGyCgAhtDAAAAAEMK16M9QQAoApQDIEVrspSTIEeylUPNzMw9kkMK16M8IJ0CGyCfAhtDAAAAAEMK16M8IJ4CspSTIESylUMK16M8kkMAAAAAIJACGyCdAhtDAAAAACCQAhuUkiAKsiDtAkMAAAAAQ0jh+j4goQKylJMgVLKVQ6RwfT+SQwAAAD8gowIbIKACG0MAAAAAQwAAgD5BACgClAMgUWuylJMgU7KVQwAAAD+SQwAAgD4gkAIbIKMCGyDrAiBQspVDAACAPpJDzczMPSCiAhsgkAIbQwAAAABDzcxMPUEAKAKUAyBNa7KUkyBPspVDzczMPZJDzcxMPSCPAhsgogIbIOoCQ83MTD2SQwAAAAAgjQIbII8CG0MAAAAAII0CG5SSIe4CQQAg7gI4ApwDQQAqAjhBACoCqAOUQQAqAjwg7gJBACoCoAOSlJIh7wJBACDvAkMAAAAAIO8CvEGAgID8B3EbOAKkAyAEIBRqQ5qZmT5BACoCIEEAKgJwlEEAKgJ8QQAqAqQBlJJBACoCIEEAKgLEAZSSQQAqAnxBACoC5AGUkkEAKgIgQQAqAoQClJJBACoCfEEAKgKkApSSQQAqAiBBACoCxAKUkkEAKgJ8QQAqAuQClJJBACoCIEEAKgKEA5SSQQAqAnxBACoCpAOUkpQ4AgBBAEEAKAIANgIEQQBBACoCGDgCHEEAQQAqAiA4AiRBAEEAKgIoOAIsQQBBACgCSDYCTEEAQQAoAlA2AlRBAEEAKgJgOAJkQQBBACoCaDgCbEEAQQAqAnA4AnRBAEEAKgJ8OAKAAUEAQQAqAoQBOAKIAUEAQQAoAowBNgKQAUEAQQAoApQBNgKYAUEAQQAqApwBOAKgAUEAQQAqAqQBOAKoAUEAQQAoAqwBNgKwAUEAQQAoArQBNgK4AUEAQQAqArwBOALAAUEAQQAqAsQBOALIAUEAQQAoAswBNgLQAUEAQQAoAtQBNgLYAUEAQQAqAtwBOALgAUEAQQAqAuQBOALoAUEAQQAoAuwBNgLwAUEAQQAoAvQBNgL4AUEAQQAqAvwBOAKAAkEAQQAqAoQCOAKIAkEAQQAoAowCNgKQAkEAQQAoApQCNgKYAkEAQQAqApwCOAKgAkEAQQAqAqQCOAKoAkEAQQAoAqwCNgKwAkEAQQAoArQCNgK4AkEAQQAqArwCOALAAkEAQQAqAsQCOALIAkEAQQAoAswCNgLQAkEAQQAoAtQCNgLYAkEAQQAqAtwCOALgAkEAQQAqAuQCOALoAkEAQQAoAuwCNgLwAkEAQQAoAvQCNgL4AkEAQQAqAvwCOAKAA0EAQQAqAoQDOAKIA0EAQQAoAowDNgKQA0EAQQAoApQDNgKYA0EAQQAqApwDOAKgA0EAQQAqAqQDOAKoAyAUQQRqIRQgFEEEIAFsSARADAIMAQsLCwuFgICAAABBAA8LhYCAgAAAQQEPC4uAgIAAACAAIAFqKgIADwuIgICAAABBACgCCA8LjoCAgAAAIAAgARAEIAAgARANC++RgIAAAS9/QQAhAUEAIQJBACEDQQAhBEEAIQVBACEGQQAhB0EAIQhBACEJQQAhCkEAIQtBACEMQQAhDUEAIQ5BACEPQQAhEEEAIRFBACESQQAhE0EAIRRBACEVQQAhFkEAIRdBACEYQQAhGUEAIRpBACEbQQAhHEEAIR1BACEeQQAhH0EAISBBACEhQQAhIkEAISNBACEkQQAhJUEAISZBACEnQQAhKEEAISlBACEqQQAhK0EAISxBACEtQQAhLkEAIS9BACEBA0ACQEEAIAFBAnRqQQA2AgAgAUEBaiEBIAFBAkgEQAwCDAELCwtBACECA0ACQEEYIAJBAnRqQwAAAAA4AgAgAkEBaiECIAJBAkgEQAwCDAELCwtBACEDA0ACQEEgIANBAnRqQwAAAAA4AgAgA0EBaiEDIANBAkgEQAwCDAELCwtBACEEA0ACQEEoIARBAnRqQwAAAAA4AgAgBEEBaiEEIARBAkgEQAwCDAELCwtBACEFA0ACQEHIACAFQQJ0akEANgIAIAVBAWohBSAFQQJIBEAMAgwBCwsLQQAhBgNAAkBB0AAgBkECdGpBADYCACAGQQFqIQYgBkECSARADAIMAQsLC0EAIQcDQAJAQeAAIAdBAnRqQwAAAAA4AgAgB0EBaiEHIAdBAkgEQAwCDAELCwtBACEIA0ACQEHoACAIQQJ0akMAAAAAOAIAIAhBAWohCCAIQQJIBEAMAgwBCwsLQQAhCQNAAkBB8AAgCUECdGpDAAAAADgCACAJQQFqIQkgCUECSARADAIMAQsLC0EAIQoDQAJAQfwAIApBAnRqQwAAAAA4AgAgCkEBaiEKIApBAkgEQAwCDAELCwtBACELA0ACQEGEASALQQJ0akMAAAAAOAIAIAtBAWohCyALQQJIBEAMAgwBCwsLQQAhDANAAkBBjAEgDEECdGpBADYCACAMQQFqIQwgDEECSARADAIMAQsLC0EAIQ0DQAJAQZQBIA1BAnRqQQA2AgAgDUEBaiENIA1BAkgEQAwCDAELCwtBACEOA0ACQEGcASAOQQJ0akMAAAAAOAIAIA5BAWohDiAOQQJIBEAMAgwBCwsLQQAhDwNAAkBBpAEgD0ECdGpDAAAAADgCACAPQQFqIQ8gD0ECSARADAIMAQsLC0EAIRADQAJAQawBIBBBAnRqQQA2AgAgEEEBaiEQIBBBAkgEQAwCDAELCwtBACERA0ACQEG0ASARQQJ0akEANgIAIBFBAWohESARQQJIBEAMAgwBCwsLQQAhEgNAAkBBvAEgEkECdGpDAAAAADgCACASQQFqIRIgEkECSARADAIMAQsLC0EAIRMDQAJAQcQBIBNBAnRqQwAAAAA4AgAgE0EBaiETIBNBAkgEQAwCDAELCwtBACEUA0ACQEHMASAUQQJ0akEANgIAIBRBAWohFCAUQQJIBEAMAgwBCwsLQQAhFQNAAkBB1AEgFUECdGpBADYCACAVQQFqIRUgFUECSARADAIMAQsLC0EAIRYDQAJAQdwBIBZBAnRqQwAAAAA4AgAgFkEBaiEWIBZBAkgEQAwCDAELCwtBACEXA0ACQEHkASAXQQJ0akMAAAAAOAIAIBdBAWohFyAXQQJIBEAMAgwBCwsLQQAhGANAAkBB7AEgGEECdGpBADYCACAYQQFqIRggGEECSARADAIMAQsLC0EAIRkDQAJAQfQBIBlBAnRqQQA2AgAgGUEBaiEZIBlBAkgEQAwCDAELCwtBACEaA0ACQEH8ASAaQQJ0akMAAAAAOAIAIBpBAWohGiAaQQJIBEAMAgwBCwsLQQAhGwNAAkBBhAIgG0ECdGpDAAAAADgCACAbQQFqIRsgG0ECSARADAIMAQsLC0EAIRwDQAJAQYwCIBxBAnRqQQA2AgAgHEEBaiEcIBxBAkgEQAwCDAELCwtBACEdA0ACQEGUAiAdQQJ0akEANgIAIB1BAWohHSAdQQJIBEAMAgwBCwsLQQAhHgNAAkBBnAIgHkECdGpDAAAAADgCACAeQQFqIR4gHkECSARADAIMAQsLC0EAIR8DQAJAQaQCIB9BAnRqQwAAAAA4AgAgH0EBaiEfIB9BAkgEQAwCDAELCwtBACEgA0ACQEGsAiAgQQJ0akEANgIAICBBAWohICAgQQJIBEAMAgwBCwsLQQAhIQNAAkBBtAIgIUECdGpBADYCACAhQQFqISEgIUECSARADAIMAQsLC0EAISIDQAJAQbwCICJBAnRqQwAAAAA4AgAgIkEBaiEiICJBAkgEQAwCDAELCwtBACEjA0ACQEHEAiAjQQJ0akMAAAAAOAIAICNBAWohIyAjQQJIBEAMAgwBCwsLQQAhJANAAkBBzAIgJEECdGpBADYCACAkQQFqISQgJEECSARADAIMAQsLC0EAISUDQAJAQdQCICVBAnRqQQA2AgAgJUEBaiElICVBAkgEQAwCDAELCwtBACEmA0ACQEHcAiAmQQJ0akMAAAAAOAIAICZBAWohJiAmQQJIBEAMAgwBCwsLQQAhJwNAAkBB5AIgJ0ECdGpDAAAAADgCACAnQQFqIScgJ0ECSARADAIMAQsLC0EAISgDQAJAQewCIChBAnRqQQA2AgAgKEEBaiEoIChBAkgEQAwCDAELCwtBACEpA0ACQEH0AiApQQJ0akEANgIAIClBAWohKSApQQJIBEAMAgwBCwsLQQAhKgNAAkBB/AIgKkECdGpDAAAAADgCACAqQQFqISogKkECSARADAIMAQsLC0EAISsDQAJAQYQDICtBAnRqQwAAAAA4AgAgK0EBaiErICtBAkgEQAwCDAELCwtBACEsA0ACQEGMAyAsQQJ0akEANgIAICxBAWohLCAsQQJIBEAMAgwBCwsLQQAhLQNAAkBBlAMgLUECdGpBADYCACAtQQFqIS0gLUECSARADAIMAQsLC0EAIS4DQAJAQZwDIC5BAnRqQwAAAAA4AgAgLkEBaiEuIC5BAkgEQAwCDAELCwtBACEvA0ACQEGkAyAvQQJ0akMAAAAAOAIAIC9BAWohLyAvQQJIBEAMAgwBCwsLC6SBgIAAAEEAIAE2AghBAEMAgDtIQwAAgD9BACgCCLKXljgCDEEAQwRxgURBACoCDJU4AhBBAEMAAIA/Q3xZxERBACoCDJUQA5U4AjBBAEEAKgIwQwAAgD+SOAI0QQBDAAAAAEMAAIA/QQAqAjCTQQAqAjSVkzgCOEEAQwAAgD9BACoCNJU4AjxBAENvEoM6QQAqAgyUOAJYQQBDbCOJREEAKgIMlTgCeAuQgICAAAAgACABEAwgABAOIAAQCwuqgICAAABBAEMAAKBAOAIUQQBDAAAAADgCQEEAQwAAoEA4AkRBAEPNzEw+OAJcC42AgIAAACABIAAgACABSBsPC42AgIAAACAAIAEgACABSBsPC4yAgIAAACAAIAFqIAI4AgALC6CMgIAAAQBBAAuZDHsibmFtZSI6IkNhbWVsZW9uIEtleWJvYXJkIiwidmVyc2lvbiI6IjIuNS45Iiwib3B0aW9ucyI6Ii1zY2FsIC1mdHogMiIsInNpemUiOiI0MjgiLCJpbnB1dHMiOiIwIiwib3V0cHV0cyI6IjEiLCJtZXRhIjpbeyJhdXRob3IiOiJFUiJ9LHsiYmFzaWNzLmxpYi9uYW1lIjoiRmF1c3QgQmFzaWMgRWxlbWVudCBMaWJyYXJ5In0seyJiYXNpY3MubGliL3ZlcnNpb24iOiIwLjAifSx7ImZpbHRlcnMubGliL25hbWUiOiJGYXVzdCBGaWx0ZXJzIExpYnJhcnkifSx7ImZpbHRlcnMubGliL3ZlcnNpb24iOiIwLjAifSx7Im1hdGhzLmxpYi9hdXRob3IiOiJHUkFNRSJ9LHsibWF0aHMubGliL2NvcHlyaWdodCI6IkdSQU1FIn0seyJtYXRocy5saWIvbGljZW5zZSI6IkxHUEwgd2l0aCBleGNlcHRpb24ifSx7Im1hdGhzLmxpYi9uYW1lIjoiRmF1c3QgTWF0aCBMaWJyYXJ5In0seyJtYXRocy5saWIvdmVyc2lvbiI6IjIuMSJ9LHsibmFtZSI6IkNhbWVsZW9uIEtleWJvYXJkIn0seyJvc2NpbGxhdG9ycy5saWIvbmFtZSI6IkZhdXN0IE9zY2lsbGF0b3IgTGlicmFyeSJ9LHsib3NjaWxsYXRvcnMubGliL3ZlcnNpb24iOiIwLjAifSx7InNpZ25hbHMubGliL25hbWUiOiJGYXVzdCBTaWduYWwgUm91dGluZyBMaWJyYXJ5In0seyJzaWduYWxzLmxpYi92ZXJzaW9uIjoiMC4wIn1dLCJ1aSI6W3sidHlwZSI6InZncm91cCIsImxhYmVsIjoiQ2FtZWxlb24gS2V5Ym9hcmQiLCJpdGVtcyI6W3sidHlwZSI6ImhzbGlkZXIiLCJsYWJlbCI6Ikluc3RydW1lbnQgSGFuZCIsImFkZHJlc3MiOiIvQ2FtZWxlb25fS2V5Ym9hcmQvSW5zdHJ1bWVudF9IYW5kIiwiaW5kZXgiOiI2OCIsIm1ldGEiOlt7IjEiOiIifSx7ImFjYyI6IjEgMCAtMTAgMCAxMCJ9XSwiaW5pdCI6IjUiLCJtaW4iOiIwIiwibWF4IjoiMTAiLCJzdGVwIjoiMSJ9LHsidHlwZSI6ImhzbGlkZXIiLCJsYWJlbCI6IkhpZ2h0IiwiYWRkcmVzcyI6Ii9DYW1lbGVvbl9LZXlib2FyZC9IaWdodCIsImluZGV4IjoiMjAiLCJtZXRhIjpbeyIyIjoiIn0seyJhY2MiOiIwIDEgLTEwIDAgMzAifV0sImluaXQiOiI1IiwibWluIjoiMSIsIm1heCI6IjEwIiwic3RlcCI6IjAuMyJ9LHsidHlwZSI6ImhzbGlkZXIiLCJsYWJlbCI6Ik5vdGUgRHVyYXRpb24gKEJQRiBFbnZlbG9wZSkiLCJhZGRyZXNzIjoiL0NhbWVsZW9uX0tleWJvYXJkL05vdGVfRHVyYXRpb25fKEJQRl9FbnZlbG9wZSkiLCJpbmRleCI6IjkyIiwibWV0YSI6W3siMyI6IiJ9LHsiYWNjIjoiMiAwIC0xMCAwIDEwIn0seyJ1bml0IjoicyJ9XSwiaW5pdCI6IjAuMiIsIm1pbiI6IjAuMSIsIm1heCI6IjAuNSIsInN0ZXAiOiIwLjAxIn0seyJ0eXBlIjoidnNsaWRlciIsImxhYmVsIjoiRW52ZWxvcGUgVHlwZSAoQlBGIEVudmVsb3BlKSIsImFkZHJlc3MiOiIvQ2FtZWxlb25fS2V5Ym9hcmQvRW52ZWxvcGVfVHlwZV8oQlBGX0VudmVsb3BlKSIsImluZGV4IjoiNjQiLCJtZXRhIjpbeyI0IjoiIn0seyJzdHlsZSI6InJhZGlveydmOSc6MDsnZjExJzoxOydmMTUnOjI7J2YxNyc6M30ifV0sImluaXQiOiIwIiwibWluIjoiMCIsIm1heCI6IjMiLCJzdGVwIjoiMSJ9XX1dfTA="; }

/*
 faust2wasm
 Additional code: GRAME 2017
*/
 
'use strict';

// Monophonic Faust DSP
class SCameleonKeyboardProcessor extends AudioWorkletProcessor {
    
    // JSON parsing functions
    static parse_ui(ui, obj, callback)
    {
        for (var i = 0; i < ui.length; i++) {
            SCameleonKeyboardProcessor.parse_group(ui[i], obj, callback);
        }
    }
    
    static parse_group(group, obj, callback)
    {
        if (group.items) {
            SCameleonKeyboardProcessor.parse_items(group.items, obj, callback);
        }
    }
    
    static parse_items(items, obj, callback)
    {
        for (var i = 0; i < items.length; i++) {
            callback(items[i], obj, callback);
        }
    }
    
    static parse_item1(item, obj, callback)
    {
        if (item.type === "vgroup"
            || item.type === "hgroup"
            || item.type === "tgroup") {
            SCameleonKeyboardProcessor.parse_items(item.items, obj, callback);
        } else if (item.type === "hbargraph"
                   || item.type === "vbargraph") {
            // Nothing
        } else if (item.type === "vslider"
                   || item.type === "hslider"
                   || item.type === "button"
                   || item.type === "checkbox"
                   || item.type === "nentry") {
            obj.push({ name: item.address,
                     defaultValue: item.init,
                     minValue: item.min,
                     maxValue: item.max });
        }
    }
    
    static parse_item2(item, obj, callback)
    {
        if (item.type === "vgroup"
            || item.type === "hgroup"
            || item.type === "tgroup") {
            SCameleonKeyboardProcessor.parse_items(item.items, obj, callback);
        } else if (item.type === "hbargraph"
                   || item.type === "vbargraph") {
            // Keep bargraph adresses
            obj.outputs_items.push(item.address);
            obj.pathTable[item.address] = parseInt(item.index);
        } else if (item.type === "vslider"
                   || item.type === "hslider"
                   || item.type === "button"
                   || item.type === "checkbox"
                   || item.type === "nentry") {
            // Keep inputs adresses
            obj.inputs_items.push(item.address);
            obj.pathTable[item.address] = parseInt(item.index);
            if (item.meta !== undefined) {
                for (var i = 0; i < item.meta.length; i++) {
                    if (item.meta[i].midi !== undefined) {
                        if (item.meta[i].midi.trim() === "pitchwheel") {
                            obj.fPitchwheelLabel.push(item.address);
                        } else if (item.meta[i].midi.trim().split(" ")[0] === "ctrl") {
                            obj.fCtrlLabel[parseInt(item.meta[i].midi.trim().split(" ")[1])]
                                .push({ path:item.address,
                                      min:parseFloat(item.min),
                                      max:parseFloat(item.max) });
                        }
                    }
                }
            }
        }
    }
    
    static b64ToUint6(nChr)
    {
        return nChr > 64 && nChr < 91 ?
        nChr - 65
        : nChr > 96 && nChr < 123 ?
        nChr - 71
        : nChr > 47 && nChr < 58 ?
        nChr + 4
        : nChr === 43 ?
        62
        : nChr === 47 ?
        63
        :
        0;
    }
    
    static atob(sBase64, nBlocksSize)
    {
        if (typeof atob === 'function') {
            return atob(sBase64);
        } else {
            
            var sB64Enc = sBase64.replace(/[^A-Za-z0-9\+\/]/g, "");
            var nInLen = sB64Enc.length;
            var nOutLen = nBlocksSize ? Math.ceil((nInLen * 3 + 1 >> 2) / nBlocksSize) * nBlocksSize : nInLen * 3 + 1 >> 2;
            var taBytes = new Uint8Array(nOutLen);
            
            for (var nMod3, nMod4, nUint24 = 0, nOutIdx = 0, nInIdx = 0; nInIdx < nInLen; nInIdx++) {
                nMod4 = nInIdx & 3;
                nUint24 |= SCameleonKeyboardProcessor.b64ToUint6(sB64Enc.charCodeAt(nInIdx)) << 18 - 6 * nMod4;
                if (nMod4 === 3 || nInLen - nInIdx === 1) {
                    for (nMod3 = 0; nMod3 < 3 && nOutIdx < nOutLen; nMod3++, nOutIdx++) {
                        taBytes[nOutIdx] = nUint24 >>> (16 >>> nMod3 & 24) & 255;
                    }
                    nUint24 = 0;
                }
            }
            return taBytes.buffer;
        }
    }
    
    static remap(v, mn0, mx0, mn1, mx1)
    {
        return (1.0 * (v - mn0) / (mx0 - mn0)) * (mx1 - mn1) + mn1;
    }
   
    static get parameterDescriptors () 
    {
        // Analyse JSON to generate AudioParam parameters
        var params = [];
        SCameleonKeyboardProcessor.parse_ui(JSON.parse(getJSONSCameleonKeyboard()).ui, params, SCameleonKeyboardProcessor.parse_item1);
        return params;
    }
    
    constructor(options)
    {
        super(options);
      
        this.json_object = JSON.parse(getJSONSCameleonKeyboard());

        this.output_handler = function(path, value) { this.port.postMessage({ path: path, value: value }); };
        
        this.ins = null;
        this.outs = null;

        this.dspInChannnels = [];
        this.dspOutChannnels = [];

        this.fPitchwheelLabel = [];
        this.fCtrlLabel = new Array(128);
        for (var i = 0; i < this.fCtrlLabel.length; i++) { this.fCtrlLabel[i] = []; }

        this.numIn = parseInt(this.json_object.inputs);
        this.numOut = parseInt(this.json_object.outputs);

        // Memory allocator
        this.ptr_size = 4;
        this.sample_size = 4;
        
        this.factory = SCameleonKeyboardProcessor.SCameleonKeyboard_instance.exports;
        this.HEAP = SCameleonKeyboardProcessor.SCameleonKeyboard_instance.exports.memory.buffer;
        this.HEAP32 = new Int32Array(this.HEAP);
        this.HEAPF32 = new Float32Array(this.HEAP);

        console.log(this.HEAP);
        console.log(this.HEAP32);
        console.log(this.HEAPF32);

        // bargraph
        this.outputs_timer = 5;
        this.outputs_items = [];

        // input items
        this.inputs_items = [];

        // Start of HEAP index

        // DSP is placed first with index 0. Audio buffer start at the end of DSP.
        this.audio_heap_ptr = parseInt(this.json_object.size);

        // Setup pointers offset
        this.audio_heap_ptr_inputs = this.audio_heap_ptr;
        this.audio_heap_ptr_outputs = this.audio_heap_ptr_inputs + (this.numIn * this.ptr_size);

        // Setup buffer offset
        this.audio_heap_inputs = this.audio_heap_ptr_outputs + (this.numOut * this.ptr_size);
        this.audio_heap_outputs = this.audio_heap_inputs + (this.numIn * SCameleonKeyboardProcessor.buffer_size * this.sample_size);

        // Start of DSP memory : DSP is placed first with index 0
        this.dsp = 0;

        this.pathTable = [];

        // Send output values to the AudioNode
        this.update_outputs = function ()
        {
            if (this.outputs_items.length > 0 && this.output_handler && this.outputs_timer-- === 0) {
                this.outputs_timer = 5;
                for (var i = 0; i < this.outputs_items.length; i++) {
                    this.output_handler(this.outputs_items[i], this.HEAPF32[this.pathTable[this.outputs_items[i]] >> 2]);
                }
            }
        }
        
        this.initAux = function ()
        {
            var i;
            
            if (this.numIn > 0) {
                this.ins = this.audio_heap_ptr_inputs;
                for (i = 0; i < this.numIn; i++) {
                    this.HEAP32[(this.ins >> 2) + i] = this.audio_heap_inputs + ((SCameleonKeyboardProcessor.buffer_size * this.sample_size) * i);
                }
                
                // Prepare Ins buffer tables
                var dspInChans = this.HEAP32.subarray(this.ins >> 2, (this.ins + this.numIn * this.ptr_size) >> 2);
                for (i = 0; i < this.numIn; i++) {
                    this.dspInChannnels[i] = this.HEAPF32.subarray(dspInChans[i] >> 2, (dspInChans[i] + SCameleonKeyboardProcessor.buffer_size * this.sample_size) >> 2);
                }
            }
            
            if (this.numOut > 0) {
                this.outs = this.audio_heap_ptr_outputs;
                for (i = 0; i < this.numOut; i++) {
                    this.HEAP32[(this.outs >> 2) + i] = this.audio_heap_outputs + ((SCameleonKeyboardProcessor.buffer_size * this.sample_size) * i);
                }
                
                // Prepare Out buffer tables
                var dspOutChans = this.HEAP32.subarray(this.outs >> 2, (this.outs + this.numOut * this.ptr_size) >> 2);
                for (i = 0; i < this.numOut; i++) {
                    this.dspOutChannnels[i] = this.HEAPF32.subarray(dspOutChans[i] >> 2, (dspOutChans[i] + SCameleonKeyboardProcessor.buffer_size * this.sample_size) >> 2);
                }
            }
            
            // Parse UI
            SCameleonKeyboardProcessor.parse_ui(this.json_object.ui, this, SCameleonKeyboardProcessor.parse_item2);
            
            // Init DSP
            this.factory.init(this.dsp, sampleRate); // 'sampleRate' is defined in AudioWorkletGlobalScope  
        }

        this.ctrlChange = function (channel, ctrl, value)
        {
            if (this.fCtrlLabel[ctrl] !== []) {
                for (var i = 0; i < this.fCtrlLabel[ctrl].length; i++) {
                    var path = this.fCtrlLabel[ctrl][i].path;
                    this.setParamValue(path, SCameleonKeyboardProcessor.remap(value, 0, 127, this.fCtrlLabel[ctrl][i].min, this.fCtrlLabel[ctrl][i].max));
                    if (this.output_handler) {
                   		this.output_handler(path, this.getParamValue(path));
                   	}
                }
            }
        }

        this.pitchWheel = function (channel, wheel)
        {
            for (var i = 0; i < this.fPitchwheelLabel.length; i++) {
                var path = this.fPitchwheelLabel[i];
                this.setParamValue(path, Math.pow(2.0, wheel/12.0));
                if (this.output_handler) {
                   	this.output_handler(path, this.getParamValue(path));
                }
            }
        }

        this.setParamValue = function (path, val)
        {
            this.HEAPF32[this.pathTable[path]] = val;
        }

        this.getParamValue = function (path)
        {
            return this.HEAPF32[this.pathTable[path]];
        }

        // Init resulting DSP
        this.initAux();

        // Set message handler
        this.port.onmessage = this.handleMessage.bind(this);
    }
    
    handleMessage(event) 
    {
        var msg = event.data;
        switch (msg.type) {
            // Generic MIDI message
            case "midi": this.midiMessage(msg.data); break;
            // Typed MIDI message
            case "keyOn": this.keyOn(msg.data[0], msg.data[1], msg.data[2]); break;
            case "keyOff": this.keyOff(msg.data[0], msg.data[1], msg.data[2]); break;
            case "ctrlChange": this.ctrlChange(msg.data[0], msg.data[1], msg.data[2]); break;
            case "pitchWheel": this.pitchWheel(msg.data[0], msg.data[1]); break;
            // Generic data message
            case "param": this.setParamValue(msg.key, msg.value); break;
            //case "patch": this.onpatch(msg.data); break;
        }
    }
    
    midiMessage(data)
    {
        var cmd = data[0] >> 4;
        var channel = data[0] & 0xf;
        var data1 = data[1];
        var data2 = data[2];
        
        if (channel === 9) {
            return;
        } else if (cmd === 8 || ((cmd === 9) && (data2 === 0))) {
            //this.keyOff(channel, data1, data2);
        } else if (cmd === 9) {
            //this.keyOn(channel, data1, data2);
        } else if (cmd === 11) {
            //this.ctrlChange(channel, data1, data2);
        } else if (cmd === 14) {
            //this.pitchWheel(channel, ((data2 * 128.0 + data1)-8192)/8192.0);
        }
    }
    
    process(inputs, outputs, parameters) 
    {
        var input = inputs[0];
        var output = outputs[0];
        
        // Copy inputs
        if (input !== undefined) {
            for (var chan = 0; chan < Math.min(this.numIn, input.length) ; ++chan) {
                var dspInput = this.dspInChannnels[chan];
                dspInput.set(input[chan]);
            }
        }
        
        // Update controls (possibly needed for sample accurate control)
        var params = Object.entries(parameters);
        for (var i = 0; i < params.length; i++) {
            this.HEAPF32[this.pathTable[params[i][0]] >> 2] = params[i][1][0];
        }
        
        // Compute
        this.factory.compute(this.dsp, SCameleonKeyboardProcessor.buffer_size, this.ins, this.outs);
        
        // Update bargraph
        this.update_outputs();
        
        // Copy outputs
        if (output !== undefined) {
            //console.log("output.length " + output.length);
            for (var chan = 0; chan < Math.min(this.numOut, output.length); ++chan) {
                var dspOutput = this.dspOutChannnels[chan];
                output[chan].set(dspOutput);
            }
        }
        
        return true;
    }
}

// Globals

SCameleonKeyboardProcessor.buffer_size = 128;

SCameleonKeyboardProcessor.importObject = {
    env: {
        memoryBase: 0,
        tableBase: 0,
            
        absf: Math.abs,
        acosf: Math.acos,
        asinf: Math.asin,
        atanf: Math.atan,
        atan2f: Math.atan2,
        ceilf: Math.ceil,
        cosf: Math.cos,
        expf: Math.exp,
        floorf: Math.floor,
        fmodf: function(x, y) { return x % y; },
        logf: Math.log,
        log10f: Math.log10,
        max_f: Math.max,
        min_f: Math.min,
        remainderf: function(x, y) { return x - Math.round(x/y) * y; },
        powf: Math.pow,
        roundf: Math.fround,
        sinf: Math.sin,
        sqrtf: Math.sqrt,
        tanf: Math.tan,
            
        abs: Math.abs,
        acos: Math.acos,
        asin: Math.asin,
        atan: Math.atan,
        atan2: Math.atan2,
        ceil: Math.ceil,
        cos: Math.cos,
        exp: Math.exp,
        floor: Math.floor,
        fmod: function(x, y) { return x % y; },
        log: Math.log,
        log10: Math.log10,
        max_: Math.max,
        min_: Math.min,
        remainder:function(x, y) { return x - Math.round(x/y) * y; },
        pow: Math.pow,
        round: Math.fround,
        sin: Math.sin,
        sqrt: Math.sqrt,
        tan: Math.tan,
            
        table: new WebAssembly.Table({ initial: 0, element: 'anyfunc' })
    }
};

// Synchronously compile and instantiate the WASM module
try {
    let wasm_module = new WebAssembly.Module(SCameleonKeyboardProcessor.atob(getBase64CodeSCameleonKeyboard()));
    SCameleonKeyboardProcessor.SCameleonKeyboard_instance = new WebAssembly.Instance(wasm_module, SCameleonKeyboardProcessor.importObject);
    registerProcessor('SCameleonKeyboard', SCameleonKeyboardProcessor);
} catch (e) {
    console.log(e); console.log("Faust SCameleonKeyboard cannot be loaded or compiled");
}

